export default [
  {
    url: "https://www.youtube.com/watch?v=XIccFOAn7EE",
    title:
      "A DOMINANT outing from Yoshinobu Yamamoto heading into the All-Star break 💪 |",
    youtuber: "@MLB",
    youtuber_md5: "db66ecf57637d0755aeb2bfa940b0f87",
    video_url:
      "https://rr1---sn-vgqsknze.googlevideo.com/videoplayback?expire=1752502082&ei=4rp0aIHOEvL5ut0P6uac8Qo&ip=162.225.222.122&id=o-AFRDS03yVOEdNGp2rmrZ_tYpPcUjri3LQetduC7s6OIe&itag=18&source=youtube&requiressl=yes&xpc=EgVo2aDSNQ%3D%3D&met=1752480482%2C&mh=eJ&mm=31%2C29&mn=sn-vgqsknze%2Csn-vgqsrn67&ms=au%2Crdu&mv=m&mvi=1&pl=21&rms=au%2Cau&initcwndbps=2116250&bui=AY1jyLMo_By5PRpOmYivger8L_koIX6a50ygGpC8hLd2xOI7jTllNEE_0LYIMJnLgdMiY8gRImYTdQdE&spc=l3OVKRTvLBUsrekt-1DCXDuoutvflaPTyS4OCtx5uQJ5xi5h1ClGtZc8hCrIdXsGV79HfChUWlx-IQ&vprv=1&svpuc=1&mime=video%2Fmp4&ns=uN6D8WflLtofhvQJadeYH9QQ&rqh=1&gir=yes&clen=28350596&ratebypass=yes&dur=321.480&lmt=1752475441976820&mt=1752480075&fvip=2&fexp=51355912&c=WEB&sefc=1&txp=3308224&n=YRUKY6IJEktVBLA&sparams=expire%2Cei%2Cip%2Cid%2Citag%2Csource%2Crequiressl%2Cxpc%2Cbui%2Cspc%2Cvprv%2Csvpuc%2Cmime%2Cns%2Crqh%2Cgir%2Cclen%2Cratebypass%2Cdur%2Clmt&sig=AJfQdSswRQIgJ_GY-zbzI_3J1kpLtl6Y6kca3mofhvHOFy4docDyvJ8CIQC1K2oFEHGAjQikAbIX9ez4uFrqz7md5xL0MDCsr3lgUg%3D%3D&lsparams=met%2Cmh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Crms%2Cinitcwndbps&lsig=APaTxxMwRQIgEPV6I-1ORSTpfQwkqti_46T_f_l1r4WR2QkQ5psTAIsCIQDFCW-bOuTmwbhslFb3mgS1y6EWg_MWPj8DWrWh6LxuKg%3D%3D",
    video_length: 321,
    likes: 2586,
    views: 113660,
    date_posted: "2025-07-13T22:58:03.000Z",
    description:
      "Yoshinobu Yamamoto was dominant for the Los Angeles Dodgers vs. the San Francisco Giants on July 13, 2025.\n\nDon't forget to subscribe! https://www.youtube.com/mlb\n\nFollow us elsewhere too:\nTwitter: https://twitter.com/MLB\nInstagram: https://www.instagram.com/mlb/\nFacebook: https://www.facebook.com/mlb\nTikTok: https://www.tiktok.com/@mlb\n\nCheck out MLB.com daily to watch the MLB.TV Free Game of the Day! https://mlb.com/freegame\n\nVisit our site for all baseball news, stats and scores! https://www.mlb.com/",
    num_comments: 240,
    subscribers: 6480000,
    video_id: "XIccFOAn7EE",
    channel_url: "https://www.youtube.com/@MLB",
    preview_image: "https://i.ytimg.com/vi/XIccFOAn7EE/hqdefault.jpg",
    shortcode: "XIccFOAn7EE",
    verified: true,
    handle_name: "MLB",
    avatar_img_channel:
      "https://yt3.ggpht.com/oxG5vPLXAS37cggRvlO5j5M0ZCHRwMrxvs8U5Xlx3naNuL76uJvmH915i0ofBDtxsBfWhE7-aw=s48-c-k-c0x00ffffff-no-rj",
    related_videos: null,
    license: null,
    viewport_frames: "640x360 / -",
    current_optimal_res: "640x360@30 / 640x360@30",
    codecs: "avc1.42001E, mp4a.40.2 / mp4a.40.2",
    color: "bt709",
    quality: "hd720",
    quality_label: "720p",
    post_type: "post",
    youtuber_id: "UCoLrcjPV5PbUrUyXq5mjc_A",
    transcript:
      "Yeah, and they just flashed the numbers for Yamamoto. Eight and seven with a 277 still regardless off to just an electric all-star start. We'll see how he responds. The two-1 to Ramos is hit on the ground to the left side. Mickey bets range is over and makes the play. Waiting on a 1-1 from Yamamoto. Here it is. Chopped on the ground to first and Freddy's going to pick it up and play it himself. When Adamus is hot up and right there, that's a beautiful swing. So, and Yamamoto puts him away with a filthy splitter to complete a one, two, three first inning of his own. Zero's put up by Ray and Yamamoto. The Dodger offense back to work next. Down swinging. Yamamoto blows it by him. Back-to-back hays for Yamamoto. One out in the second. It'll pop up on the right side of the infield. Freddy Freeman will let Tommy Edmond take out number two. Well, a way of finishing the first inning. Yamamoto already putting his last outing behind him. Yamamoto's one-two is rolled to the right side. Freddy will do it all by himself. The two out walk is stranded by Yamamoto. Still a scoreless ball game as we move along to the third. you get from the shoulder, the scap, the flexibility that Yamamoto has. Incredible. Schmidt to right field. It'll hang up for Tioscar Hernandez on a 2-2. Ramos watches strike three. Third punch out for Yamamoto. Two gone in the third. And right here, just take a look. Freezes him with the split. And this is one of the ones you want to get. You want to see it up. Ramos a little bit fooled by cuz most of them are strike to ball. checks up another ground ball to Freddy Freeman that he will take by himself. And so Yamamoto wiggles around the one out base hit to Bailey and keeps this game scoreless. Fortunately, we had a couple punch outs there, but uh Yos the baseball well. Andy Pah lays out and holds it in. A spectacular grab by Pah in center field to Robadamus. Wow, you got that right. This is one of the toughest outfield spin, wind, sun, and Adam catches this one a little bit off the end. And a beautiful read from Pahes and scoops every bit of that. That's tough. Watch the wrist. Watch the shoulder. And he's able to get the glove under it. Big risk, big reward. Nice play. And Chapman jumps on the first pitch and pulls it to left where Louise is waiting on out number two. Ground ball to third. Rojos goes to Edmond and ends the inning. So there is a zero put up by Yamamoto. Two pitch. Pushed to left. No problems for Ruiz. Out number one in the fifth. Little taper back to the mound. Yamamoto thinks about going to two. Going to settle for one. Round ball to bet sit short. He bobbles it initially, but he recovers. Throw down the line, but Freddy Freeman bails him out, tagging out Ramos and stranding. Casey Schmidt, reserves a two nothing Dodger lead as this game shifts to the sixth now to pay things off. Got him swinging. Comes back with the cutter and De's going to go back a little bit frustrated. Bob Melvin doesn't like it, but when they take a look at the tape, it's a strike and then the cutter. Beautiful pitch. Yamamoto's got everything cooking tonight. Pah has robbed him. This one a more routine play for Pahes and left some two gone. Yamamoto sits him down with a splitter. A 1236 with bookending Ks, six shut out frames from the Dodgers righty. Yamamoto will try again and gets him. Six K of the game right here for Yamamoto. And look at this splitty today. It has just been strike for so long and then just dives out. Slow roller to the left side. Edmondova from third and makes the play. [Music] called strike three. Schmidt can't believe it, but that ball had a lot of the plate and Yamamoto strands the two out double. He has finished a seventh shutout inning.",
    formatted_transcript: [
      {
        start_time: 80,
        end_time: 1439,
        duration: 1359,
        text: "Yeah, and they just flashed the numbers",
      },
      {
        start_time: 1439,
        end_time: 3840,
        duration: 2401,
        text: "for Yamamoto. Eight and seven with a 277",
      },
      {
        start_time: 3840,
        end_time: 6480,
        duration: 2640,
        text: "still regardless off to just an electric",
      },
      {
        start_time: 6480,
        end_time: 7759,
        duration: 1279,
        text: "all-star start. We'll see how he",
      },
      {
        start_time: 7759,
        end_time: 9120,
        duration: 1361,
        text: "responds.",
      },
      {
        start_time: 9120,
        end_time: 11840,
        duration: 2720,
        text: "The two-1 to Ramos is hit on the ground",
      },
      {
        start_time: 11840,
        end_time: 13440,
        duration: 1600,
        text: "to the left side. Mickey bets range is",
      },
      {
        start_time: 13440,
        end_time: 16240,
        duration: 2800,
        text: "over and makes the play.",
      },
      {
        start_time: 16240,
        end_time: 18160,
        duration: 1920,
        text: "Waiting on a 1-1 from Yamamoto. Here it",
      },
      {
        start_time: 18160,
        end_time: 19680,
        duration: 1520,
        text: "is.",
      },
      {
        start_time: 19680,
        end_time: 21439,
        duration: 1759,
        text: "Chopped on the ground to first and",
      },
      {
        start_time: 21439,
        end_time: 22800,
        duration: 1361,
        text: "Freddy's going to pick it up and play it",
      },
      {
        start_time: 22800,
        end_time: 23840,
        duration: 1040,
        text: "himself.",
      },
      {
        start_time: 23840,
        end_time: 26480,
        duration: 2640,
        text: "When Adamus is hot up and right there,",
      },
      {
        start_time: 26480,
        end_time: 29359,
        duration: 2879,
        text: "that's a beautiful swing. So,",
      },
      {
        start_time: 29359,
        end_time: 31760,
        duration: 2401,
        text: "and Yamamoto puts him away with a filthy",
      },
      {
        start_time: 31760,
        end_time: 33680,
        duration: 1920,
        text: "splitter to complete a one, two, three",
      },
      {
        start_time: 33680,
        end_time: 36160,
        duration: 2480,
        text: "first inning of his own. Zero's put up",
      },
      {
        start_time: 36160,
        end_time: 38079,
        duration: 1919,
        text: "by Ray and Yamamoto. The Dodger offense",
      },
      {
        start_time: 38079,
        end_time: 42039,
        duration: 3960,
        text: "back to work next.",
      },
      {
        start_time: 42800,
        end_time: 47680,
        duration: 4880,
        text: "Down swinging. Yamamoto blows it by him.",
      },
      {
        start_time: 47680,
        end_time: 49600,
        duration: 1920,
        text: "Back-to-back hays for Yamamoto. One out",
      },
      {
        start_time: 49600,
        end_time: 52879,
        duration: 3279,
        text: "in the second.",
      },
      {
        start_time: 52879,
        end_time: 54239,
        duration: 1360,
        text: "It'll pop up on the right side of the",
      },
      {
        start_time: 54239,
        end_time: 56879,
        duration: 2640,
        text: "infield. Freddy Freeman will let Tommy",
      },
      {
        start_time: 56879,
        end_time: 60920,
        duration: 4041,
        text: "Edmond take out number two.",
      },
      {
        start_time: 61359,
        end_time: 63199,
        duration: 1840,
        text: "Well, a way of finishing the first",
      },
      {
        start_time: 63199,
        end_time: 65518,
        duration: 2319,
        text: "inning. Yamamoto already putting his",
      },
      {
        start_time: 65519,
        end_time: 68479,
        duration: 2960,
        text: "last outing behind him. Yamamoto's",
      },
      {
        start_time: 68479,
        end_time: 70960,
        duration: 2481,
        text: "one-two is rolled to the right side.",
      },
      {
        start_time: 70960,
        end_time: 73439,
        duration: 2479,
        text: "Freddy will do it all by himself. The",
      },
      {
        start_time: 73439,
        end_time: 76799,
        duration: 3360,
        text: "two out walk is stranded by Yamamoto.",
      },
      {
        start_time: 76799,
        end_time: 78960,
        duration: 2161,
        text: "Still a scoreless ball game as we move",
      },
      {
        start_time: 78960,
        end_time: 82520,
        duration: 3560,
        text: "along to the third.",
      },
      {
        start_time: 83920,
        end_time: 85680,
        duration: 1760,
        text: "you get from the shoulder, the scap, the",
      },
      {
        start_time: 85680,
        end_time: 87280,
        duration: 1600,
        text: "flexibility that Yamamoto has.",
      },
      {
        start_time: 87280,
        end_time: 88799,
        duration: 1519,
        text: "Incredible.",
      },
      {
        start_time: 88799,
        end_time: 90320,
        duration: 1521,
        text: "Schmidt to right field. It'll hang up",
      },
      {
        start_time: 90320,
        end_time: 93360,
        duration: 3040,
        text: "for Tioscar Hernandez",
      },
      {
        start_time: 93360,
        end_time: 98720,
        duration: 5360,
        text: "on a 2-2. Ramos watches strike three.",
      },
      {
        start_time: 98720,
        end_time: 101360,
        duration: 2640,
        text: "Third punch out for Yamamoto. Two gone",
      },
      {
        start_time: 101360,
        end_time: 103600,
        duration: 2240,
        text: "in the third.",
      },
      {
        start_time: 103600,
        end_time: 105360,
        duration: 1760,
        text: "And right here, just take a look.",
      },
      {
        start_time: 105360,
        end_time: 107200,
        duration: 1840,
        text: "Freezes him with the split. And this is",
      },
      {
        start_time: 107200,
        end_time: 108560,
        duration: 1360,
        text: "one of the ones you want to get. You",
      },
      {
        start_time: 108560,
        end_time: 110720,
        duration: 2160,
        text: "want to see it up. Ramos a little bit",
      },
      {
        start_time: 110720,
        end_time: 112720,
        duration: 2000,
        text: "fooled by cuz most of them are strike to",
      },
      {
        start_time: 112720,
        end_time: 115520,
        duration: 2800,
        text: "ball. checks up",
      },
      {
        start_time: 115520,
        end_time: 117360,
        duration: 1840,
        text: "another ground ball to Freddy Freeman",
      },
      {
        start_time: 117360,
        end_time: 119759,
        duration: 2399,
        text: "that he will take by himself. And so",
      },
      {
        start_time: 119759,
        end_time: 122640,
        duration: 2881,
        text: "Yamamoto wiggles around the one out base",
      },
      {
        start_time: 122640,
        end_time: 124399,
        duration: 1759,
        text: "hit to Bailey and keeps this game",
      },
      {
        start_time: 124399,
        end_time: 125200,
        duration: 801,
        text: "scoreless.",
      },
      {
        start_time: 125200,
        end_time: 126640,
        duration: 1440,
        text: "Fortunately, we had a couple punch outs",
      },
      {
        start_time: 126640,
        end_time: 131440,
        duration: 4800,
        text: "there, but uh Yos the baseball well.",
      },
      {
        start_time: 131440,
        end_time: 135920,
        duration: 4480,
        text: "Andy Pah lays out and holds it in. A",
      },
      {
        start_time: 135920,
        end_time: 138800,
        duration: 2880,
        text: "spectacular grab by Pah in center field",
      },
      {
        start_time: 138800,
        end_time: 141520,
        duration: 2720,
        text: "to Robadamus.",
      },
      {
        start_time: 141520,
        end_time: 143760,
        duration: 2240,
        text: "Wow, you got that right. This is one of",
      },
      {
        start_time: 143760,
        end_time: 148239,
        duration: 4479,
        text: "the toughest outfield spin, wind, sun,",
      },
      {
        start_time: 148239,
        end_time: 150959,
        duration: 2720,
        text: "and Adam catches this one a little bit",
      },
      {
        start_time: 150959,
        end_time: 152720,
        duration: 1761,
        text: "off the end. And a beautiful read from",
      },
      {
        start_time: 152720,
        end_time: 155519,
        duration: 2799,
        text: "Pahes and scoops every bit of that.",
      },
      {
        start_time: 155519,
        end_time: 157120,
        duration: 1601,
        text: "That's tough. Watch the wrist. Watch the",
      },
      {
        start_time: 157120,
        end_time: 159360,
        duration: 2240,
        text: "shoulder. And he's able to get the glove",
      },
      {
        start_time: 159360,
        end_time: 161440,
        duration: 2080,
        text: "under it. Big risk, big reward. Nice",
      },
      {
        start_time: 161440,
        end_time: 162480,
        duration: 1040,
        text: "play.",
      },
      {
        start_time: 162480,
        end_time: 164959,
        duration: 2479,
        text: "And Chapman jumps on the first pitch and",
      },
      {
        start_time: 164959,
        end_time: 166879,
        duration: 1920,
        text: "pulls it to left where Louise is waiting",
      },
      {
        start_time: 166879,
        end_time: 170599,
        duration: 3720,
        text: "on out number two.",
      },
      {
        start_time: 171840,
        end_time: 174800,
        duration: 2960,
        text: "Ground ball to third. Rojos goes to",
      },
      {
        start_time: 174800,
        end_time: 177840,
        duration: 3040,
        text: "Edmond and ends the inning. So there is",
      },
      {
        start_time: 177840,
        end_time: 181879,
        duration: 4039,
        text: "a zero put up by Yamamoto.",
      },
      {
        start_time: 182720,
        end_time: 186480,
        duration: 3760,
        text: "Two pitch. Pushed to left.",
      },
      {
        start_time: 186480,
        end_time: 188239,
        duration: 1759,
        text: "No problems for Ruiz. Out number one in",
      },
      {
        start_time: 188239,
        end_time: 191319,
        duration: 3080,
        text: "the fifth.",
      },
      {
        start_time: 192400,
        end_time: 194480,
        duration: 2080,
        text: "Little taper back to the mound. Yamamoto",
      },
      {
        start_time: 194480,
        end_time: 197120,
        duration: 2640,
        text: "thinks about going to two.",
      },
      {
        start_time: 197120,
        end_time: 200400,
        duration: 3280,
        text: "Going to settle for one.",
      },
      {
        start_time: 203360,
        end_time: 205280,
        duration: 1920,
        text: "Round ball to bet sit short. He bobbles",
      },
      {
        start_time: 205280,
        end_time: 207040,
        duration: 1760,
        text: "it initially, but he recovers. Throw",
      },
      {
        start_time: 207040,
        end_time: 208800,
        duration: 1760,
        text: "down the line, but Freddy Freeman bails",
      },
      {
        start_time: 208800,
        end_time: 211200,
        duration: 2400,
        text: "him out, tagging out Ramos and",
      },
      {
        start_time: 211200,
        end_time: 214400,
        duration: 3200,
        text: "stranding. Casey Schmidt, reserves a two",
      },
      {
        start_time: 214400,
        end_time: 216400,
        duration: 2000,
        text: "nothing Dodger lead as this game shifts",
      },
      {
        start_time: 216400,
        end_time: 220000,
        duration: 3600,
        text: "to the sixth now to pay things off. Got",
      },
      {
        start_time: 220000,
        end_time: 223040,
        duration: 3040,
        text: "him swinging. Comes back with the cutter",
      },
      {
        start_time: 223040,
        end_time: 226239,
        duration: 3199,
        text: "and De's going to go back a little bit",
      },
      {
        start_time: 226239,
        end_time: 229840,
        duration: 3601,
        text: "frustrated. Bob Melvin doesn't like it,",
      },
      {
        start_time: 229840,
        end_time: 232239,
        duration: 2399,
        text: "but when they take a look at the tape,",
      },
      {
        start_time: 232239,
        end_time: 234480,
        duration: 2241,
        text: "it's a strike and then the cutter.",
      },
      {
        start_time: 234480,
        end_time: 236159,
        duration: 1679,
        text: "Beautiful pitch. Yamamoto's got",
      },
      {
        start_time: 236159,
        end_time: 237920,
        duration: 1761,
        text: "everything cooking tonight. Pah has",
      },
      {
        start_time: 237920,
        end_time: 241120,
        duration: 3200,
        text: "robbed him. This one a more routine play",
      },
      {
        start_time: 241120,
        end_time: 246439,
        duration: 5319,
        text: "for Pahes and left some two gone.",
      },
      {
        start_time: 246720,
        end_time: 249680,
        duration: 2960,
        text: "Yamamoto sits him down with a splitter.",
      },
      {
        start_time: 249680,
        end_time: 253840,
        duration: 4160,
        text: "A 1236 with bookending Ks, six shut out",
      },
      {
        start_time: 253840,
        end_time: 256880,
        duration: 3040,
        text: "frames from the Dodgers righty. Yamamoto",
      },
      {
        start_time: 256880,
        end_time: 261560,
        duration: 4680,
        text: "will try again and gets him.",
      },
      {
        start_time: 265040,
        end_time: 266720,
        duration: 1680,
        text: "Six",
      },
      {
        start_time: 266720,
        end_time: 269840,
        duration: 3120,
        text: "K of the game right here for Yamamoto.",
      },
      {
        start_time: 269840,
        end_time: 272560,
        duration: 2720,
        text: "And look at this splitty today. It has",
      },
      {
        start_time: 272560,
        end_time: 275919,
        duration: 3359,
        text: "just been strike for so long and then",
      },
      {
        start_time: 275919,
        end_time: 278880,
        duration: 2961,
        text: "just dives out.",
      },
      {
        start_time: 278880,
        end_time: 280880,
        duration: 2000,
        text: "Slow roller to the left side. Edmondova",
      },
      {
        start_time: 280880,
        end_time: 286040,
        duration: 5160,
        text: "from third and makes the play.",
      },
      {
        start_time: 286490,
        end_time: 287680,
        duration: 1190,
        text: "[Music]",
      },
      {
        start_time: 287680,
        end_time: 291520,
        duration: 3840,
        text: "called strike three.",
      },
      {
        start_time: 291520,
        end_time: 293360,
        duration: 1840,
        text: "Schmidt can't believe it, but that ball",
      },
      {
        start_time: 293360,
        end_time: 295840,
        duration: 2480,
        text: "had a lot of the plate and Yamamoto",
      },
      {
        start_time: 295840,
        end_time: 298479,
        duration: 2639,
        text: "strands the two out double.",
      },
      {
        start_time: 298479,
        end_time: 300720,
        duration: 2241,
        text: "He has finished a seventh shutout",
      },
      {
        start_time: 300720,
        end_time: 303720,
        duration: 3000,
        text: "inning.",
      },
    ],
    hashtags: null,
    tags: [
      "mlb",
      "baseball",
      "sports",
      "mlb highlights",
      "sports highlights",
      "baseball highlights",
    ],
    next_recommended_videos: [
      {
        url: "https://www.youtube.com/channel/UCoLrcjPV5PbUrUyXq5mjc_A",
        title: "MLB, channel",
        thumbnail:
          "https://yt3.ggpht.com/oxG5vPLXAS37cggRvlO5j5M0ZCHRwMrxvs8U5Xlx3naNuL76uJvmH915i0ofBDtxsBfWhE7-aw=s400-c-k-c0x00ffffff-no-rj",
        startMs: 301435,
        endMs: 321421,
        style: "CHANNEL",
      },
      {
        url: "https://www.youtube.com/watch?v=rViHcsfebls",
        title:
          "Braves vs. Cardinals Game Highlights (7/13/25) | MLB Highlights, video",
        thumbnail:
          "https://i.ytimg.com/vi/rViHcsfebls/hqdefault.jpg?sqp=-oaymwEjCNACELwBSFryq4qpAxUIARUAAAAAGAElAADIQj0AgKJDeAE=&rs=AOn4CLDZ1LXaAqsqhkQOrrxnkI7TKX9acg",
        startMs: 301435,
        endMs: 321421,
        style: "VIDEO",
      },
    ],
    recommended_videos: [
      {
        url: "https://www.youtube.com/watch?v=ASUWJYhLXqQ",
        title: "Dodgers vs. Giants Game Highlights (7/13/25) | MLB Highlights",
        thumbnail:
          "https://i.ytimg.com/vi/ASUWJYhLXqQ/hqdefault.jpg?sqp=-oaymwEjCNACELwBSFryq4qpAxUIARUAAAAAGAElAADIQj0AgKJDeAE=&rs=AOn4CLBETqECyiMpK6M7sqkc4DAJ5sQ5-g",
      },
      {
        url: "https://www.youtube.com/watch?v=MYX57O99sRo",
        title: "Australia's $200B Secret Plan to Flood the Outback",
        thumbnail:
          "https://i.ytimg.com/vi/MYX57O99sRo/hqdefault.jpg?sqp=-oaymwEjCNACELwBSFryq4qpAxUIARUAAAAAGAElAADIQj0AgKJDeAE=&rs=AOn4CLD_9P1pLJLkPusjzRWXSdwvHbgH0A",
      },
      {
        url: "https://www.youtube.com/watch?v=Ahu9bnxtDkc",
        title: "Steven Spielberg Names His Six FAVOURITE Movies",
        thumbnail:
          "https://i.ytimg.com/vi/Ahu9bnxtDkc/hqdefault.jpg?sqp=-oaymwEjCNACELwBSFryq4qpAxUIARUAAAAAGAElAADIQj0AgKJDeAE=&rs=AOn4CLDsN9ceJ1V34FH9xMSoSUBs2XORmg",
      },
      {
        url: "https://www.youtube.com/watch?v=wWHFobFri4Y",
        title:
          "DEALIN’ at Yankee Stadium! Shota Imanaga tosses 7 innings and only allows 1 run! | 今永昇太ハイライト",
        thumbnail:
          "https://i.ytimg.com/vi/wWHFobFri4Y/hqdefault.jpg?sqp=-oaymwEjCNACELwBSFryq4qpAxUIARUAAAAAGAElAADIQj0AgKJDeAE=&rs=AOn4CLBasb27TRCP2vEq30tJtTbsysDkqQ",
      },
      {
        url: "https://www.youtube.com/watch?v=rHMNISBVqSY",
        title: "Best Fails of the Week | Close Calls and Crazy People 😆",
        thumbnail:
          "https://i.ytimg.com/vi/rHMNISBVqSY/hqdefault.jpg?sqp=-oaymwEjCNACELwBSFryq4qpAxUIARUAAAAAGAElAADIQj0AgKJDeAE=&rs=AOn4CLB_zFTemIj4EQhr2VlbgWBJ8SP35w",
      },
      {
        url: "https://www.youtube.com/watch?v=bKMEDZp7ZZs",
        title: "Why Didn't the US Go Metric? Now I Finally Get It.",
        thumbnail:
          "https://i.ytimg.com/vi/bKMEDZp7ZZs/hqdefault.jpg?sqp=-oaymwEjCNACELwBSFryq4qpAxUIARUAAAAAGAElAADIQj0AgKJDeAE=&rs=AOn4CLCUVOZf1jgECiw3NSsQHbYqQwWxKg",
      },
      {
        url: "https://www.youtube.com/watch?v=00ooqCuRoU8",
        title: "Confirmed: Air India 171’s Dual Engine Failure Explained",
        thumbnail:
          "https://i.ytimg.com/vi/00ooqCuRoU8/hqdefault.jpg?sqp=-oaymwEjCNACELwBSFryq4qpAxUIARUAAAAAGAElAADIQj0AgKJDeAE=&rs=AOn4CLAHbvQUwOxViVEKu9zLr5r7ULvQkg",
      },
      {
        url: "https://www.youtube.com/watch?v=A3t_uUgTm5k",
        title:
          "Chelsea vs. PSG | FIFA Club World Cup Final Extended Highlights",
        thumbnail:
          "https://i.ytimg.com/vi/A3t_uUgTm5k/hqdefault.jpg?sqp=-oaymwEjCNACELwBSFryq4qpAxUIARUAAAAAGAElAADIQj0AgKJDeAE=&rs=AOn4CLBiS21DX01o5a7UClAqevEXV8rh7w",
      },
      {
        url: "https://www.youtube.com/watch?v=8mMRhb9uS_0",
        title: "Trump's PANICKED MOVE delivers DEATHBLOW",
        thumbnail:
          "https://i.ytimg.com/vi/8mMRhb9uS_0/hqdefault.jpg?sqp=-oaymwEjCNACELwBSFryq4qpAxUIARUAAAAAGAElAADIQj0AgKJDeAE=&rs=AOn4CLDnSHtRuDEftlNOi-M3mqptJCTJOA",
      },
      {
        url: "https://www.youtube.com/watch?v=CWK04Numd0M",
        title: "26 Minutes of Incredible Facts by Professor Brian Cox",
        thumbnail:
          "https://i.ytimg.com/vi/CWK04Numd0M/hqdefault.jpg?sqp=-oaymwEjCNACELwBSFryq4qpAxUIARUAAAAAGAElAADIQj0AgKJDeAE=&rs=AOn4CLCWdM2KTOdl-g_rCzDyer-3wr2u3A",
      },
      {
        url: "https://www.youtube.com/watch?v=yOP3NCgGqhE",
        title: "The Greatest Catches in Baseball History",
        thumbnail:
          "https://i.ytimg.com/vi/yOP3NCgGqhE/hqdefault.jpg?sqp=-oaymwEjCNACELwBSFryq4qpAxUIARUAAAAAGAElAADIQj0AgKJDeAE=&rs=AOn4CLBPI9NF0qCDUq00M7paaxBEN6Vt0Q",
      },
      {
        url: "https://www.youtube.com/watch?v=s1Cx_lSrUxA",
        title:
          "NTT INDYCAR SERIES: Synk 275 powered by Sukup Highlights | INDYCAR on FOX",
        thumbnail:
          "https://i.ytimg.com/vi/s1Cx_lSrUxA/hqdefault.jpg?sqp=-oaymwEjCNACELwBSFryq4qpAxUIARUAAAAAGAElAADIQj0AgKJDeAE=&rs=AOn4CLAXic3BetFEIr8RZzStT6ikyVxV9g",
      },
    ],
    transcript_language: [
      {
        language: "English (auto-generated)",
        auto_translate: true,
      },
    ],
    chapters: null,
    transcription_language: null,
    timestamp: "2025-07-14T08:08:04.454Z",
    input: {
      url: "https://www.youtube.com/watch?v=XIccFOAn7EE",
      country: "",
      transcription_language: "",
    },
  },
  {
    url: "https://www.youtube.com/watch?v=Q7mS1VHm3Yw",
    title:
      "LLM Course – Build a Semantic Book Recommender (Python, OpenAI, LangChain, Gradio)",
    youtuber: "@freecodecamp",
    youtuber_md5: "9a02009a45a8921752db0945a64218e5",
    video_url:
      "https://rr2---sn-5abxgpxuxaxjvh-jcil.googlevideo.com/videoplayback?expire=1752502083&ei=47p0aIOsG4zIzPsPjNDIYQ&ip=154.242.139.124&id=o-AJQUVMfrh4bZZHD4WAozNBrYl-VElcfIUw1ez5hFlARi&itag=18&source=youtube&requiressl=yes&xpc=EgVo2aDSNQ%3D%3D&met=1752480483%2C&mh=fG&mm=31%2C29&mn=sn-5abxgpxuxaxjvh-jcil%2Csn-h5q7knld&ms=au%2Crdu&mv=m&mvi=2&pl=21&rms=au%2Cau&initcwndbps=875000&bui=AY1jyLPm-ychwyvfsVdl3BA9RQFcstGg4CMq5oNQj3in_mK-Z4u_6QQu3XghK0J-A8a0h1KfqoLTDNgj&spc=l3OVKQKC6p9s0g7eGZYnS7d7hDaA9I4QXIJjVK6NtCFnky_qfWGuYUPFoa6tcn5m-Yjwv40bj7RbJQ&vprv=1&svpuc=1&mime=video%2Fmp4&ns=LBmXihFP0kL-zK7ub1oCDKYQ&rqh=1&gir=yes&clen=190419341&ratebypass=yes&dur=8103.555&lmt=1738272020158707&mt=1752480075&fvip=4&fexp=51355912&c=WEB&sefc=1&txp=4438534&n=opm8SEu_ikm6u2_&sparams=expire%2Cei%2Cip%2Cid%2Citag%2Csource%2Crequiressl%2Cxpc%2Cbui%2Cspc%2Cvprv%2Csvpuc%2Cmime%2Cns%2Crqh%2Cgir%2Cclen%2Cratebypass%2Cdur%2Clmt&sig=AJfQdSswRQIgEJT0BIiVVp7qTwM-0EZqAruLX7x68LYDV50gEgsCQ7YCIQCTqHeClbAJSG0SqiQl_vp386g1hU4h4lNoNEPaEBNM4w%3D%3D&lsparams=met%2Cmh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Crms%2Cinitcwndbps&lsig=APaTxxMwRQIhAIDmdamHUDxbjdm5zROayE7w-YhjxIdQcBK9YZyhDl-NAiAiLSWtYHhYMxp5JofsVORuRxiAflpALzn52i6fX2835g%3D%3D",
    video_length: 8104,
    likes: 6047,
    views: 268252,
    date_posted: "2025-01-27T16:11:06.000Z",
    description:
      "Discover how to build an intelligent book recommendation system using the power of large language models and Python. Learn to transform book descriptions into mathematical representations that enable precise content-based matching. By the end of this course, you'll have built a recommendation engine that helps readers discover their next favorite book.\n\n💻 Code from this tutorial: https://github.com/t-redactyl/llm-semantic-book-recommender/tree/main\n\n🏗️ JetBrains provided a grant to make this course possible.\n\n⭐️ Resources ⭐️\nFree 3-Month PyCharm Professional Subscription \nCode: PyCharm4FreeCodeCamp\nDownload PyCharm: https://jb.gg/pycharm-fcc \nRedeem PyCharm 3-month free license: jetbrains.com/store/redeem\n\nDownload PyCharm: https://jb.gg/pycharm-fcc\nKaggle datasets: https://kaggle.com/datasets\n7K books dataset by Dylan Castillo: https://kaggle.com/datasets/dylanjcastillo/7k-books-with-metadata\nHugging Face free NLP course: https://huggingface.co/learn/nlp-course/en/\nExplanation of transformer encoder-decoder models (from Hugging Face NLP course): https://huggingface.co/learn/nlp-course/en/chapter1/7\nExplanation of transformer decoder-only models (from Hugging Face NLP course): https://huggingface.co/learn/nlp-course/en/chapter1/6\nExplanation of transformer encoder-only models (from Hugging Face NLP course): https://huggingface.co/learn/nlp-course/en/chapter1/5\nHugging Face Hub models page: https://huggingface.co/models\nOpenAI models: https://platform.openai.com/docs/models\nExplanation of vector index (from Weaviate): https://weaviate.io/developers/weaviate/concepts/vector-index\nLangChain Python docs: https://python.langchain.com/docs/introduction\nLangChain chat model integrations: https://python.langchain.com/docs/integrations/chat\nOpenAI billing page: https://platform.openai.com/settings/organization/billing/overview\nOpenAI API keys page: https://platform.openai.com/settings/organization/api-keys\nExplanation of zero-shot classification (from Hugging Face): https://huggingface.co/tasks/zero-shot-classification\nInformation about fine-tuned emotion classification model: https://dataloop.ai/library/model/j-hartmann_emotion-english-distilroberta-base\nGetting started with Gradio: https://gradio.app/guides/quickstart\nGradio playground: https://gradio.app/playground\nGradio themes: https://gradio.app/guides/theming-guide\nFurther work by Jodie about LLMs\nTalk from GOTO Amsterdam giving an overview of LLMs: https://youtube.com/watch?v=Pv0cfsastFs\nTalk from NDC Oslo about whether LLMs are showing signs of humanity: https://youtube.com/watch?v=kqJ7rZHFx84\nTalk from PyCon US about hallucinations in LLMs: https://youtube.com/watch?v=innz9iBIAdU\nTutorial on doing sentiment analysis with LLMs: https://blog.jetbrains.com/pycharm/2024/12/how-to-do-sentiment-analysis-with-large-language-models/\nArticle on LLM’s understanding of language: https://t-redactyl.io/blog/2024/06/can-llms-use-language-at-a-human-like-level.html\nArticle on sentience in LLMs: https://t-redactyl.io/blog/2024/07/could-llms-be-sentient.html\nArticle on intelligence in LLMs: https://t-redactyl.io/blog/2024/07/are-llms-on-the-path-to-agi.html\n12:25\n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp\n\n⭐️ Chapters ⭐️\n0:00:00 Intro\n0:03:05 Introduction to getting and preparing text data\n0:05:51 Starting a new PyCharm project\n0:16:59 Patterns of missing data\n0:25:21 Checking the number of categories\n0:28:27 Remove short descriptions\n0:34:36 Final cleaning steps\n0:38:11 Introduction to LLMs and vector search\n0:54:43 LangChain\n0:58:46 Splitting the books using CharacterTextSplitter\n1:02:57 Building the vector database\n1:05:50 Getting book recommendations using vector search\n1:11:07 Introduction to zero-shot text classification using LLMs\n1:15:34 Finding LLMs for zero-shot classification on Hugging Face\n1:22:21 Classifying book descriptions\n1:26:24 Checking classifier accuracy\n1:35:19 Introduction to using LLMs for sentiment analysis\n1:39:25 Finding fine-tuned LLMs for sentiment analysis\n1:42:07 Extracting emotions from book descriptions\n1:54:25 Introduction to Gradio\n1:56:51 Building a Gradio dashboard to recommend books\n2:12:49 Outro",
    num_comments: 226,
    subscribers: 10900000,
    video_id: "Q7mS1VHm3Yw",
    channel_url: "https://www.youtube.com/@freecodecamp",
    preview_image: "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault.jpg",
    shortcode: "Q7mS1VHm3Yw",
    verified: true,
    handle_name: "freeCodeCamp.org",
    avatar_img_channel:
      "https://yt3.ggpht.com/ytc/AIdro_lGRc-05M2OoE1ejQdxeFhyP7OkJg9h4Y-7CK_5je3QqFI=s48-c-k-c0x00ffffff-no-rj",
    related_videos: null,
    license: null,
    viewport_frames: "640x360 / -",
    current_optimal_res: "640x360@30 / 640x360@30",
    codecs: "avc1.42001E, mp4a.40.2 / mp4a.40.2",
    color: "bt709",
    quality: "hd1440",
    quality_label: "1440p",
    post_type: "post",
    youtuber_id: "UC8butISFwT-Wl7EV0hUK0BQ",
    transcript:
      "Intro discover how to build an intelligent book recommendation system using the power of large language models and python learn to transform book descriptions into mathematical representations that enable precise content-based matching by the end of this course you'll have built a recommendation engine that helps readers discover their next favorite book Dr jod Bell from jetbrains developed this course jet brains provided a grant to make this course possible would you like to get started using large language models for your own project but you don't know where to start the technical sounding terms like semantic similarity Vector search and zero shot classification the area can feel very unapproachable from the outside however in this tutorial I'm going to show you how working with llms is a lot more straightforward than you might think in this tutorial I'm going to show you how to build a book recommender using some of the most Cutting Edge techniques in natural language processing using llms at almost every stage I'm going to show you how to clean and prepare text Data how to use Vector search to find the most similar books to a query how to use large language models to find the topic of a book and also how to find the emotional tone of a book using llms then finally we're going to bundle all of this up into a dashboard so people can actually get their book recommendations before introducing any new Concepts I will take you through a little bit of theory so you can understand what's happening under the hood but otherwise this is going to be a very Hands-On code driven tutorial which is going to allow you to develop your very own semantic book recommender so in order to get the most out of this course I would recommend it for people who have some experience with python and know the basics of machine learning but you don't really need to know anything about deep learning or natural language processing in order to follow the materials finally I hope you'll be able to see that what we cover in this Tut tutorial has a lot of applications for working with text more broadly of course you can take what we learn about building a book recommender and build a recommender for anything that involves text things like movies or products but you'll also be able to take the individual components things like text cut ification and Vector search and apply them to a wide variety of natural language processing projects before we get started I'd also like to briefly introduce myself my name is Jody Burell and I've been working as a data scientist particularly in the area of natural language processing for almost 10 years now I'm currently working at jetbrains a company well known for creating development tools and we're going to be seeing one of those tools today pycharm which is an IDE which has some really great features for working with data science projects and also working with large language models if you'd like to reach out with some questions or comments about this tutorial my social media links are in the description of this video and I'm also going to share some other content you might find interesting in the area of natural language process processing that I've also created with all of that covered let's get started so we're going Introduction to getting and preparing text data to start this project in the exact same place that we start any data science project and that is of course by getting some data so we're going to be getting data today from one of my favorite sources and this is kaggle data sets so kle has this fantastic subsection which posts a whole bunch of really interesting data sets we can get to that by going to kaggle.com datasets as you can see here now the really interesting thing about this is a lot of these data sets were created by members of the community and they've generously uploaded those for all of us to use in our projects and something else you can see is that NLP is one of the specific tags so there are a whole bunch of really interesting NLP data sets you can see these here we of course want to do something very specific today we want to have a look at data sets that have to do with books so we're just going to click out of that tag and we're going to specifically search for books data sets and what we found here is the data set that I have already looked for that I want to work with for this project and that's the 7K books data set so if we go to the page of this data set and we scroll down to where the data set is described we can see that there are a whole bunch of really interesting columns that we can use for our recommender so we have of course the ISBN the book identifier we've got the title and subtitle of each book and and who wrote it the authors we've got the categories of the book we've got a thumbnail of the front cover that we might be able to use later a description of the book and then additional Fields like when it was published and what the rating is so now that we have this lovely data set let's talk about how we're going to work with it and the tool we're going to be using to work with this data is py charm so pycharm is an all-in-one python IDE and it gives you a huge range of functionality for working with python including in data science and as we'll see later specifically for working with large language models so if you want to follow along with me and have all of the same functionality that I do you can of course download a copy of pycharm if you don't have it already so just pop over to the pycharm landing page at Jet brains.com slpy charmd datascience and you'll see we have the button here to download it now for viewers of this video we're actually offering an extended 3-month trial of pycharm professional so if you pop down to the description section you'll see that promo code there and then if you pop over to Jet brains.com st/ redeem you'll see you have the option to redeem it there so if you don't already have py charm and you want to follow along just pause this video go do that and then we'll get started in the next section so once we've installed pie charm we can of course open it just Starting a new PyCharm project by clicking on the icon in the dock here on Mac and what you can see is this then lands us on the welcoming screen so py ch's welcome screen shows you the most recent projects that you've worked on and it also gives you a quick way of either starting a new project or even just quickly starting a new notebook or a new script you want to get started a little bit faster so we're going to start a new project because we know that we're going to be doing quite a lot of work so we click on new project and what this then takes us to is a loading screen in order to create this new project and we have a few different options for project types as you can see over in the left hand side so because we're working on a Scientific Python project a Jupiter based project we do have the option of creating a Jupiter based project and what this does is default to an anaconda interpreter and it also gives us you know a bunch of other things that are sort of set up in the project structure like assuming that we have and gives us folders for that but I have a preference for using virtual environments so I'm actually just going to stick with a pure python project and what you can see is that gives us the option of a few different interpreter types so virtual environments anaconda and we can also create other types of interpreters so just leaving it as the default for uh virtual environment and now I'm going to name that project and we're going to call it book recommender big surprise and then once I've given it a name we can just click create and it will go ahead and make that project for us so pycharm has now gone ahead and created that new project for us and if we go down to the right hand corner we can see that it has set up that new interpreter for us as requested set up a 311 interpreter for me because that's my system default but you have the option to play around with different interpreters uh if you would like when you set up your project and you can also see if we go across to this python packages tool window that it's set up a fresh virtual environment as requested so we just have the basic packages installed and it's ready for us to install our packages so we're now going to use this python packages tool window in order to install all of dependencies we need for our project so the first library that we're going to install is called kaggle Hub this gives us a really convenient way of interfacing with data that we might want to use from kaggle so rather than having to manually download it this gives us a really nice way of managing downloading that data the next we're going to install is pandas pandas I think needs no introduction but basically it's going to giv us a really convenient way of working with that tabular data that we're going to be downloading from kaggle and then for visualization we're going to be using map plot lib and we're also going to be using Seaborn so you can use whatever graphing package you like I just have my preferences Seaborn is my favorite and Matt plot lib is a dependency for that but you know whatever graphing packages you want to use you can of course use then we're going to also be working with some credentials um we're going to be working with some models from open Ai and that's going to require an API key so a nice package that I found for working with this is called python. so that's the next thing we're going to install and then we need some packages for working with large language models so the first of these is a framework called Lang chain and we're going to go into this a bit more in the next section but Lang chain is essentially a collection of packages which is designed for doing all sorts of stuff for working with large language models so Lang chain is going to be really useful for when we need to create the recommender we're going to see how to use that again as I said more in the next section the Lang chain is basically broken down into a number of different packages we're going to be installing three we're going to be installing one called Lang chain Community we're also going to be installing one called Lang chain open AI for working with open AI model as I said and then we're also going to be installing one called Lang chain chroma and this is for working with a V database so having installed all of these we can move on to our last few packages the next important package for working with large language models is Transformers and Transformers is a really powerful package from hugging face which is designed for working with open source large language models and again later in this video we're going to see more of how you can work with Transformers but this is a very powerful package as well and gives you a lot of options working with llms we are also going to be presenting our results or um allowing people to interact with our recommender through a dashboard so we're going to be using a framework called gradio for that and we're just going to install this here and then finally of course we're working with a jupyter notebook so we're going to go ahead and install Jupiter and also iPie widgets so that's everything we've set up all of our dependencies for this project if you're following along you can also install these here at this stage and you know that means that the Project's going to run smoothly for you as we work through the tutorial so with all of that set up we are finally ready to start working with our data so first things first we're going to create a fresh duper notebook so we do this by right clicking on the project name going to new and going to Jupiter notebook and this is going to open up a new Jupiter notebook for us and remember I mentioned that we were downloading the kaggle Hub library and you may be wondering what we were going to use that for well if we go back to the page where our data set is on kagle and we go to this download button in the right top Corner what we can see is that it actually gives us this ability to download using this kaggle Hub package and it gives us some template python code that we can use so we copy that code go back over to our jupyter notebook and paste that in what we can see is that it's given us a path where it's automatically in the background downloaded that data for us so let's now explore this directory that kaggle Hub has created for us so let's copy this path and we're going to open a new terminal window and within that terminal we're going to navigate to that directory and if we use LS to have a look at what's in that directory we can see that what kle Hub has downloaded for us is one file books. CSV and this is our entire data set so this actually makes life easier for us because we don't need to merge or combine anything so now that we have the location of the data we can read it into pandas so of course we import pandas as PD and then what we do is we use the pandas read CS B uh method we're going to change that into an F string and then what we're going to do is insert that path and combine that with the book CSV file so once we do that we can have a look at our file and voila we can see that exact data that we saw on kaggle read into a panda's data frame and ready for us to work with so I think all of the hype around large language models has sort of given the impression that working with Text data or or these NLP projects are really distinct from other types of data science or machine learning work but they're really not they're actually you know they have all of the same problems as other type of data science projects and of course what that means is the first step is inspecting the data so let's have a look firstly at the data frame that we've just read in and we had a quick look at this when we had a look at the kagle page but let's just have a look through it again so what we can see is we've got a number of really useful columns we've got our identifiers our ISBN we've got the title and subtitle of the book we've got who wrote it and we've got the category of the book and we've got that description field which we've already pegged is likely to be pretty much the most useful information we have about the book you know telling us why people might like it why we can recommend it then we can see we've got a number of other really interesting Fields we've got the year that the book was published we've got the average rating we've got the number of pages and we've got the number of ratings so we've got a lot of really good information here to start on our project so let's now have a closer look at the data and this is usually the stage in any data science project where we'd be writing a bunch of boilerplate code in order to get the relevant descriptive statistics but luckily pycharm gives us a way to shortcut this because it is quite boring and what we can do is we can use a feature in the interactive data frames called show column statistics so if we click on this button what we can see is we have a couple of different options I'm going to pick detailed and what you can see is the detailed gives us the relevant statistics for each data type above each column so whether it's categorical or continuous so let's have a look at the information that this has given us so the first piece of information that jumps out is that we have 6,810 books and if we have a look at the ISBN 10 column we can actually see that these are distinct so we have all of these entries are unique and it means we're not going to need to do any duplication the second thing that jumps out is if we go over to the subtitle column we can see that it has a lot of missing observations so probably 2/3 of the observations are missing and this really makes this column useless in and of itself we can't really use it by itself so we're going to have to get creative and think about how we might be able to use it if we want to keep hold of that information the next thing that we can notice is with the categories column if we have a look at the number of distinct observations there are a lot of different categories and we've already kind of seen that you know if you actually look at the column you can see that it has really useless looking categories like hland horn these are not really useful categories so we're probably going to need to C clean this and standardize it in some way in order to make it useful because you know we potentially want to use it as part of our recommender and we don't want to have hundreds of different categories for people to pick from and then finally let's have a look at our most important column the description column and we can see that we only have description missing for around 4% of books so this is pretty good but we should do some deeper investigation just to check whether you know this missingness is not biased in some way so it's really important to check whether missing values have a pattern Patterns of missing data because this can imply some sort of bias if you find that the missing values are linked to particular characteristics about say the books that we have in our data set so my favorite way of doing this is by creating a missingness heat map using cabor this is pretty easy to create so of course first thing we need to do is import our dependency so we import caborn and we import map plot lab pip plot and then once we've done that we instantiate our map plot lib plot and then what we do is we tell map plot lib that that is going to be a Seaborn heat map and we're going to change this so it is a heat map which documents all of the different missing values the is na values and we're going to transpose that just to make it a bit nicer for the display now now that we've done that we are going to add some labels so we're going to add the X label columns so that's all of our fields or our variables in our data set and we are also going to add a y label for the missing values and then we just need to display that plot so this gives us a really interesting picture what you can see is that you know as we saw in the descriptive statistics subtitle is mostly missing so we can kind of write that variable off thought you already knew that we can see that for the middle variables so categories thumbnails and description it's mostly looking random but if we look at the three bottom variables average rating number of pages and rating count we can see that there's actually a clear pattern here that observations that have one of them missing have all of them missing so what we can kind of conclude from this is that these are probably from another data set and that data set didn't contain all of the books in the bigger books data set so this may potentially be a source of bias because maybe the books that are missing are you know missing because they're newer or because they have other characteristics maybe they are better rated or Worse rated so this is something that we're going to check out next so the final thing we're going to do with missingness is we're going to take a closer look at those books where the description is missing and this is really important because this is really the core field that we're going to be using for all the natural language processing work going forward so it's important to know whether there's any bias in the type of descriptions that we have missing because we're going to be getting rid of these books and we need to know whether our recommender will then skew towards certain types of books so we have these really nice descriptive fields we have the year that the book was published we have the number of pages that the book has and we have the average rate of the book so we can use this to deduce things like you know our books that have missing descriptions more likely to be older or more likely to be shorter so in order to do this the first thing we're going to do is create a numeric representation of which books are missing so we're going to use nump wear method and what we're doing is basically saying books where the description is missing put a one in that column if but it's not missing put a zero then what I'm going to do is convert the year of the book into the age of the book so we're going to take the year 2024 and subtract that book year and let's run that now we can see that we've made a mistake with the name of the variable so let's just correct that and run it again and that's worked now what we do is we create a list with just the subset of columns that we want from our book's data set so we want the number of pages we want the age of the book we want the missing description and we want the average rating then what we do do is we basically create a correlation Matrix directly off the Panda's data frame using just those columns and you can see I've changed it to Method equals Spearman rather than Pearson just as an aside if you're interested in the statistics behind this peeron correlations are more appropriate when you're dealing with completely continuous variables but as you can see the missing description field is binary so Spearman is just a more appropriate correlation coefficient when you're dealing with non-continuous values okay so we have our correlation Matrix now what we're going to do is convert that into a caborn heat map so basically we set up the theme and the figure and then what we do is we create the heat map pass over the correlation Matrix put in some you know formatting things such as you know the number of decimal places the color scheme and also the labeling we set the title of that heat map and then we show it so let's now have a closer look at this heat map and really what we're interested in as I said is this missing description correlation with the other variables we want to know whether any of these variables have a high correlation with missing description and the reason we want to know this is say number of pages was correlated with missing description it would indicate that either longer books or shorter books had a missing description and as you'll see we're not going to use the books that have a missing description so it means that our recommender may be biased towards shorter or longer books same as with the age of the book and with the average rating but if we have a look at these values you can see that they're really not very strong and just to kind of give some context for those of you who are not used to interpreting correlation coefficients anything that's close to one or minus one is a really strong correlation anything that's closer to zero is a very weak correlation indicates there's not really a relationship so you can see there's nothing really there and what this gives us is a bit of confidence that at least in terms of these Dimensions our book descriptions are pretty representative so we're going to have a pretty good range of older books of books with a good range of ratings and good range of lengths in terms of what we can give our um users of our recommender so because we have a small number of observations with missing values because you know there doesn't really seem to be a pattern in terms of the missingness and because replacing these descriptions is going to be a pain in the butt it's probably going to involve a lot of web scraping to retrieve the actual description I think it's safe for us to just delete those observations with missing values so first things first let's do our due diligence and find out how many books that's going to cost us so what we can do is do a bit of conditional logic using pandas and what we want to know is those books that are going to have a missing description that are going to have missing number of pages a missing average rating and also a missing published year so you can see this conditional logic is basically saying if it is missing in description or it's missing in number of pages etc etc please fetch me all of those observations so we look at the resulting data frame what we can see is this consists of 303 rows which given the size of our data set this is well under 5% so we can definitely go ahead and get rid of these observations and not stress too much so let's now create a new data frame which is going to remove these missing observations so we're going to call it book missing and we're just going to modify this conditional logic so that it is the opposite of what we created we want to keep all of these observations that don't have these fields missing so what we'll do is add a negation to the front of each of the conditions and we'll just change those oros to ANS and voila we have our new data frame which has only those books that have all of those fields with complete values so the next thing we're going to do is revisit that categories field and Checking the number of categories just to remind you the problem we had with the categories Feld field is it just had way too many distinct values so it's kind of unusable in its current form so first things first let's enable the column statistics again and check what it looks like after we deleted the missing observations and we can see that well it's still a mess we still have over 500 different categories but it probably wasn't going to solve the problem because we only deleted 300 or so observations so let's just have a look at the type of categories that we have and we can see you know there are some that are very very specific like Highland mour I'm guessing that this is probably one of the characters in the book and this is just so specific no one's going to use this as a category so let's have a closer look at the distribution of categories and so the way we can do this is by taking the value counts of each of the categories and I'm just going to add a bit more code just to make this a bit easier for us to visual ual so I'm going to reset the index so that all of the categories are put back into a column and I'm going to sort the values by count and I'm going to sort it by descending so what we have is basically the categories that are most popular at the top and those that are the least popular at the bottom so we look at the resulting table you can already see we really have a very uneven distribution of categories so fiction is the most popular juvenile fiction is next and then it just sort of keeps going down into more and more specific Fields but to really get a handle on how uneven this distribution is let's visualize it so we visualize it as essentially a bar chart showing the counts of each of these and so we can use this really handy function that belongs to data frames inside pie charm so we go up to this button and click chart view what we then switch over is to a no code panel that allow us to do visualizations directly off the data frame without having to write any code so if we go over to the settings what we can do is change the Y AIS to count and then we can change the type of chart to bar and this gives us a really good indication of just how uneven that distribution is so we can see that if we hover over it it really doesn't take very long until we start getting to categories that only have one or two actual books contained within them so this shows us really we have a longtail problem with book category and we really really need to focus on how we're going to normalize that so that's actually going to be one of the sections of this video I'm going to show you how to do this using large language models and this will be a way of introducing you to text classification and how you can do this using very modern tools so the final thing that we're going to do in Remove short descriptions terms of cleaning and screening this data is just having a closer look at that descriptions category and seeing whether there's a way to potentially refine it a bit more so the really important thing about the descriptions category is that it needs to be meaningful it needs to contain enough information about what the book is about so that we can recommend it because if it's not in the description it's not going to be anywhere so let's have a look at our new data frame the book missing one and if we scroll over to the description column what we can see immediately in the top 10 is a completely useless description we can see this on the seventh row where it says donation so this is obviously not going to be a helpful description and we want to get rid of ones like this so the easiest way to actually identify these is by checking how long they are you know this has one word so it's probably not going to be a useful description so what we're going to do is create a bit of code and the first thing that we're going to do is oh we can see that py charm has already completed that for me but basically what we're going to do is create a new variable called words in description and what we're going to do is take the description split it based on space this is the default for string split and then what we're going to do is ask for the length of that list that results from splitting that string and what that would give us is a count of the number of words so we've assign this to a new variable so again let's look at the data frame and you can see that we have you know a pretty good distribution of the words in the description and you can see there again on row seven our donation one the one with one word so again let's visualize this we're going to use the chart view functionality again and what we're going to do is assign we're going to switch over to histogram and then we're going to assign the words in description variable to both the X and the Y AIS and we'll just change this to count on the Y AIS so what you can see is we have actually a pretty you know even distribution of the number of words in the description between you know probably about 10 or maybe a little bit higher up to around 2 or 300 so what this means is it's not really a natural break point where there are a clear group of descriptions that are really short and a maybe you know donation or something like that and those that are a bit longer and more meaningful so what this means is we're going to need to create an arbitrary cut Point ourselves so a relatively straightforward way of working out where this cut off will be you know how many words a description needs to have in order to be meaningful is just come up with some cut offs come up with some bins for how many words the description needs to have inspect the descriptions that have those number of words and then you know it's really just a gut feeling for whether you think that this gives you enough information to know what the book is about so what we're going to do is create some pandas code and we're going to filter the pandas data frame so that we have all of those books where the words in description are between 1 and four to start so there's going to be our smallest group and we really just want to return the descriptions so that's what we're going to put in the second part of the conditional and when we run that what we find is yes indeed these are all completely useless you know first published in 1813 edited by morrice hendle no marketing blur fantasy hman like these are not very helpful so basically we can I think skip this and decide that this is definitely too small no big surprise so let's move up to the next bin and I've decided on between 5 and 14 words and again this is really just a bit too short a matter of life and death and the Throne of England a title story in this collection of shorts and now film from Angley this is really not giving us particularly good information so let's now move up to the next bin and this one will be between 15 and 24 and you can see we're actually starting to get to a point where these are becoming meaningful like a boy imagines what it would be like if he had things such as duck feet or you know a magical and Fantastical collection of early stories still probably not enough though so let's go up to the next bin this is actually spoiler alert going to be the final bin that we look at and what you see is well and truly now we're at a point where we have enough information it would be the most natural thing in the world but in Tony Parson's latest bestseller three couples discover that mother nature blah blah blah so this is really where we're starting to get to the point where it seems like there's enough information so I think it's reasonable to use 25 words and up in the description as a cut off and now we need to really see what the impact of that is going to be so let's now create some filtering code to clean up the data set again and remove all of those that have less than 25 words in the description so again we are going to create a new data frame called book missing 25 words and we're going to filter obviously book missing and this will be all of those rows where words in description are more than or equal to 25 so we're going to keep those and then when we create that let's go ahead and see how many rows that actually contains and we can see that it contains around 5,200 so we have lost quite a lot of books as part of this filtering but essentially we wouldn't have been able to use them anyway unless we replace those descriptions so 5,000 is still a pretty good number and I think we can be happy with that as the basis of our recommender okay so there are a couple of final variables that we want to Final cleaning steps create before we declare that cleaning and screening is completely done so the first thing is we need to decide what we're going to do with the subtitle field so as we've already established it's unusable on its own because there are so many missing values but it's quite common to have a Convention of books paired with their title and subtitle so say spiders web colon a novel would be you know a pretty normal convention or empires of the monsoon colon a history of the Indian Ocean and its Invaders so what we can do is create a new field called title and subtitle and what we can do is we can actually pair the two if it exists so again we're going to use NP Weare so first we start typing in for those where the subtitle is missing we add the npw clause and what we do is we specify that when books missing uh when subtitle is missing um please just use the title but when it is present when there is a subtitle what we want you to do is to aggregate the title and subtitle and we need to convert that explicitly to a string because there are a lot of missing values and they're considered as a float in pandas we can join them using a colon and voila this has done the job so let's go and have a look and what we can see is we have this lovely new column which contains the title and subtitle and it looks very good now the last thing we want to do is we want to create a new description column which tags each description with a unique identifier and I'm going to explain why we need to do this in the next section you'll see why it'll be important for building the vector database but for now just trust me on it and I'll explain soon so we can use either of the ISBN fields for this because we know that they're unique identifiers I'm going to use the ISBN 13 and essentially we're going to do a very similar thing that we did to create the title and subtitle we're going to create a new variable called tag description and what we're going to do is take the ISBN 13 and the description again we're going to explicitly convert them both to string and then what we're going to do is join them so that the ISBN is just attached as the first word of the description so now that we've done that again let's have a look and what we can see is that we have successfully created that column so that's it we have completely cleaned up the data set it is now ready for all of the NLP work we want to do with it so we're now ready to save it to file and use it for the rest of our project so what we're going to do is drop some of those columns that we created that we don't need we're going to drop the subtitle column the missing description column the age of book column and the words and description column because we don't need them anymore we just use them for cleaning or for uh filtering and then what we're going to do is just save that to CSV we're going to call it books cleaned CSV and we're not going to save the index cuz we don't need it and that's it now we have prepared everything we've gotten all the boring stuff out of the way we've eaten our vegetables and now we're ready to get into the fun NLP Introduction to LLMs and vector search stuff so now we've gotten the hard bit out of the way we have a lovely clean data set and we are ready to start building our book recommender and to do this I'm going to show you how we can take raw text and turn it into a vector something that captures the meaning of the text and allows us to compare how similar or different pieces of text are we're then going to bundle those vectors up into a database allowing us to efficiently find the most similar books to a query we'll start with some theory that will help us understand why and how llms create vectors and then I'll show you how you can easily create your own Vector database in this section we're going to learn how to transform text into a form that allows us to compare how similar documents are to each other mathematically this has many useful applications and in this section we'll see how we can use it to find the most similar books to a query that we have to start explaining how to do this we need to understand a basic building block called word embeddings now to understand what these are let's take seven words queen king girl boy woman man and tree now let's say we try to manually grw them in a three-dimensional space based on their similarity so we put woman and man together we put queen and king together we put girl and boy together and off in the corner we put tree now if we take the coordinates of each of these words we can see that along this First Dimension girl and boy are similar but the rest are quite different so perhaps this represents something to do with age on this second dimension Queen and King are similar and different from the rest so maybe this Dimension represents something to do with class or nobility and finally in the third dimension all of the people are similar but tree is different so this Dimension maybe represents something to do with personhood these values for each word are word embeddings and they represent the meaning of a word by grouping words that are similar and creating distance between words that are dissimilar of course we're not going to create these Word embeddings manually that would be a nightmare especially for large vocabularies instead we rely on word embedding models to do so which learn these relationships by seeing how words are used in context so to demonstrate this I'm going to show you how a model called word to VEC works specifically the skip gram architecture the way this model learns the word embeddings is by taking all usages of each word in your training data and trying to predict which words are likely to surround it so let's take the case of the word best we're going to ask the model to predict which word immediately preds and follows best so initially its guesses are going to be pretty inaccurate but as it sees more and more examples of sentence fragments containing this word it will adjust its internal waiting and these guesses will get closer and closer so let's get to training this model in our first sentence fragment the word in front of best is the and the word after it is the things in our second example it's also the and things however in our third example it's the and Halloween the model is therefore going to predict that the most likely word to proceed best is the and with a little less confidence the word that follows best is things the weights that it uses to make these predictions end up being the word embedding for best we repeat this exercise for for every word in the vocabulary meaning we have a word embedding for each word in our Corpus do you know the way that this model is trained it means that words that are used in similar context end up with similar weights in their embeddings so you can see that best worst and funniest are all used in similar contexts when we look at the resulting embeddings we can see that these three words therefore have similar embeddings in contrast words like war attack and blast are all used in very different contexts so they have very different embedding weights on each Dimension now in practice word embedding models don't have three or five Dimensions like I've been showing you so far but they usually have hundreds or even thousands in addition we also don't care in principle what these Dimensions mean we only want them to separate out words that are different and group words that are similar so word embeddings were the hottest thing ever for a while when they first came out I remember I actually used them at my first data science job and I was completely fascinated by them however one of the biggest limitations of word embedding models is that all meanings of a word are collapsed under the same token regardless of whether it means different things in different contexts an example of this is the word bank which has very different meanings depending on the context we can see that in two different sentences he checked his bank account describes Bank in the sense of a financial institution whereas the river bank was peaceful refers to bank as a natural feature this is where the latest generation of models come in which are designed to understand the meaning of a word in context broadly they're based on a type of neural network called a Transformer model and all of The Cutting Edge llms like the chat GPT models Claude Gemini minstral 7B and falcon are all variations of this type of model so I'm going to give you a very high level explanation of how these models work so let's start with our example sentence he checked his bank account so we start by transforming each of the words into word embeddings just like we did with the word to back model but we then add positional vectors to each of these embeddings to indicate their position in the sentence so the embedding for he would be waited to indicate that it's the first word in the sentence would be waited to indicate it's the second word and so on and so forth these weighted word embeddings are then fed into a mechanism called self attention self attention basically uses the information from the weighted word embeddings to understand how much attention it needs to pay to the other words in the sentence in order to get the meaning of that word so let's break down these self attention vectors each word has its own vector and if we have a closer look at the vector Vector for the word bank we can see that each of the vector elements corresponds to a word in the sentence so the first element corresponds to he the second to check and so on as you can see the highest values in this Vector are for the words check bank and account indicating that the model has worked out that in order to make sense of the meaning of the word Bank in this context it needs to take these words into account so you can see that accounting for the words checked and account allow the financial meaning of the word bang to be discovered by the model as you can also see the self attention mechanism tends to focus on the word it's finding context for most strongly as such the model creates these self attention vectors for each word multiple times and then averages over them finally the model does some normalization which makes it easier to work with these attention vectors and this process of generating self attention vectors and then normalizing them is called an encoder block the attention mechanism allows Transformer models to do all sorts of interesting things with text we can see this with the original architecture of the Transformer model which was designed to translate sentences from one language to another so in order to do translation between two languages a Transformer based model needs two components an encoder and a decod as you can see in both the encoder and the decoder they both use attention blocks to process the text Data coming in however their goals are a bit different the role of the encoder is to learn everything it can about how words in the source language relate to one another and send that information over to the decoder the decoder has a slightly more complex job it need toos learn everything it can about how words in the target language relate to one another it then uses that knowledge as well as what the encoder has sent over about the source sentence to predict word by word the most likely sequence in the target language so you can see that in this example here let's say we have the sentence in English I have visited Italy we want to translate it into German our encoder will have learned a whole bunch about how English functions and our decoder will have learned about how German Works our sentence is then processed by the encoder and word by word the aoto will generate the closest matching sentence in German over the past 6 years the Transformer architecture has been so successful that it's led to the development of larger and larger models which are of course called large language models or llms the basic Transformer architecture has spun off many different types of models some like the original model use both encoda and dcota blocks we're going to see such a model in the next section of the tutorial however many only use dakoda blocks most of the generative text models you'll be used to using are decoder only models and then there there are the encoder only models which tend to be good for tasks that require a full understanding of the sentence llms are now so big that they're generally too expensive for most people to train from scratch however the brilliant thing about llms is that due to how they learn during training they are natural language generalists they have a deep knowledge of how their training language work they've been used in such a way that they can be adapted to many tasks and this has led to a proliferation of what are called pre-trained models these are large language models that someone else has trained and they've made available to the public for use for a downstream task here are some examples of pre-trained models you can see open source models here on a hugging face which I'm going to be explaining in more detail in the next section then here are proprietary models offered by open AI there are many many different models which have been made available by either large tech companies or research institutes and the explosion and models can sometimes make it feel overwhelming to get started working with llms however I hope by the end of this video you'll feel more confident about these models and how to apply them in this section we're going to be using encoder models so let's have a closer look at these now as encoder models are designed to understand the meaning of full sequences such as how all the words in a sentence relate to one another they're trained with a goal that forces the model to understand this so let's take the case of a model called Roberta which is trained by getting it to predict a masked word in a sentence that is a word that is missing so let's see how this training Works let's say we have our training sentence I grew up in Paris so I speak mask and English mask of course representing the missing word what Roberta first does is to tokenize this sentence and add these special CLS and sep tokens to indicate the beginning and the end of the sentence these tokens are then passed into the model and the model retrieves word embeddings for each word weighted by their position in the sentences these are then passed through a bunch of encoder blocks to get all of those self attention vectors the final part of the model uses everything that it's learned about the representation of these words in a sentence to make its prediction about what the missing word is at the beginning these guesses are going to be quite bad again just like with the word Toc model however after seeing many many many different examples of such sentences the model builds up an internal representation of how the language works and becomes very accurate the original Roberta model was trained on 160 GB of text so you can imagine that the models have a chance to build up a really rich representation of the meanings of the words in in different contexts now as we've discussed language models work by transforming raw text into Vector representations so really interesting thing we can do within Coda models is to pass in a sentence or a document and extract the internal Vector representation that the model has made of that sequence this is called a document embedding and just like with word embeddings is a way for us to be able to mathematically determine how similar or dissimilar documents are to each other so let's return to the example of our books let's say we have four book descriptions a heartwarming journey of love and friendship an ambitious attorney gets entangled in a case which may prove to be more dangerous than anticipated one of the most meticulous accounts of the decline and fall of the Roman Empire and a provocative and well researched take on human relationships so we pass each of these through an encoder model we can convert them into their document embeddings as each of these descriptions are quite different the values in each of the dimensions are also quite different meaning each of these descriptions should be in distinct parts of their embedding Vector space so how can we find a specific book well the first thing we can do is to store each of these vectors in a vector database with some sort of ID perhaps some sort of other metadata you can see that our vectors now have unique IDs assigned to them so let's say we want to find a book about the Roman Empire because yes I do think about that every day we would first convert this query into a document embedding using the same encoder model we used to create the embeddings in the database we would then compare this Vector with those in the database calculating a similarity score between the vector and the query I'm using a distance metric called the cosine similarity here but there are quite a few different options you can use and what you have available will depend on the vector database that you choose so you can see from this comparison our third book Vector 103 ended up being the most similar to our query Vector however we don't want to just retrieve a vector that's not really that useful to us so this is where the ID comes back in the ID can be used as a link to the original text of the query as well as other potential metad data so in the case of this example we can use the ID to retrieve the description and also the title and the author of the book which turns out to be Edward Gibbon's legendary history of the decline and fall of the Roman Empire so that turns out to be a very relevant recommendation indeed we might have spotted a problem right now we're doing linear search our search time is going to increase linearly with the size of our database CU right now we're comparing our query with every single Vector so it's not terribly efficient so to to solve this there are many different algorithms you can use to reduce the search space and these all roughly work by grouping similar vectors in the database index meaning that at search time you're only going to be comparing your query Vector to the most similar vectors however this grouping is not always precise meaning that most of these algorithms are a trade-off between speed and accuracy seeking an idea about how this works from this page from web8 which is a popular Vector database company or there are many such pages that you can read about online and of course you don't need to implement these algorithms yourself the advantage of using a vector database is that they build these into the indexing and with that big chunk of theory out of the way we are finally ready to get started building our semantic recommender so in LangChain order to build our Vector search we're going to be working with a framework called Lang chain and we briefly mentioned Lang chain when we were installing our dependencies but I'm just going to dive a little bit more into what it is now so Lang chain is this super powerful framework that's available in Python and it allows you to do a whole bunch of stuff with large language models so we're going to be using it for Vector search you can of course extend that to make rag pipelines you can also do things like creating chatbots or creating agents so it's very powerful and it's very sort of state-ofthe-art so another thing that makes Lang chain really nice to work with is you're not bound to a single large language model provider so as I mentioned when we were talking about installing the dependencies we're going to be working with an open AI model in this section but you can work with any of the proprietary vendors or almost any of them and you can also importantly work with open source models from hugging face so there's a lot of flexibility there and it allows you to do a lot of different experimentation and work with a whole range of different models so jumping back over to pie charm you can see see from the dependencies that we're importing the methods we're importing kind of how the workflow is going to go with creating this Vector database so the first method that we're importing is the text loader and basically that's going to take the raw text the text of the book descriptions and kind of convert it into a format that Lang chain can work with then the character text splitter method is going to split that whole document containing all of the descriptions into meaningful chunks so in our case those chunks are just going to be individual descriptions of each book but in other context you might be splitting a really long document and you might just arbitrarily split it off at say a th characters there are many many different ways of splitting documents and if you're interested in this topic definitely a rabbit hole you can go down the next step is converting those chunks into document embeddings and we're going to be using the open AI embeddings method to do that and do API calls to open AI to use their models to do that and then finally we need to store those in a vector database and we're going to be using chroma for this this is a very popular open-source Vector database but there are a range of other databases you can use with Lang chain some of them proprietary so the next thing we need to do is set up our environment so that we can use that open AI model so we're basically going to be calling that model using API calls so what this means is that we need an API key so that we can connect to our own open AI account and be a able to charge to our account to use that model and we're going to get into how to get the API keys and how to basically put credits on your open AI account so you can use those models in a little bit but for now let's talk about the nice clean way of passing that API key to your environment and my favorite way of doing that is using a package called M so what M requires you to do is first create a m file and you can see that here I just have it sitting in my room directory and all I need to do is pass in my API Keys into this file then what I do is I import M and I import the load m method and then I just need to call that load m method and what it's going to do is look in the M file see those two keys that I have and it's going to write them to the environment that I'm using for this particular project so it's very clean and it's very simple now that we've done that let's go ahead and read in our nice cleaned books data set so again we're going to be using pandas to do that so we import pandas and we're going to call it books again and we're going to import that books cleaned data set so we can see here it is just as we saw it at the end of the last section okay so now that we've loaded in our data and we've set up our Splitting the books using CharacterTextSplitter environment we are ready to start building our Vector search so this is where we revisit that tag description that I created at the end of the last section and I promised you that I was going to explain why I did this so when we create the vector search and when we query the database what we're going to get in return are the descriptions of the books because this is what's in the vector database but we don't want to give descriptions to the users of our recommender it doesn't really make sense what we want to give them are the titles and the authors of the books so so what we essentially want to be able to do is filter down the data frame that contains all the books to those that were recommended based on our query to the vector database but doing this based on string match is really messy it's it's not a nice way of doing this filtering it's quite slow and it can be imprecise so instead what I've done is I've appended the ISBN as an identifier and what we can do is when we get back the recommend ations we can split off that ISBN from the front of the description and use that as the thing to filter so I'm going to talk you through how we do that but you're going to see that it's quite clean and it's a much nicer way of doing this filtering than trying to do it on a full text match which is messy and slow okay so the text loader method in Lang chain it doesn't work with Pan's data frames so the first thing we need to do is save these tag descript and only the tag descriptions in a text file so we're going to create some code to do that we're going to use the 2 CSV method in pandas going to change that to a text file and we're going to make sure that it's separated by new lines and we're also going to make sure that it doesn't have an index and it doesn't have a header so it's just going to be a file that contains just the text descriptions okay so we can have a look at that text document that we've just created and we can see that it's done exactly what we needed we have all of our nice descriptions separated neatly by new lines so great now we can start splitting them so the first thing we do is we load them using the text loader method and you can see the syntax here is pretty straightforward and what we need to do is instantiate the text splitter so what we want to do is pass a couple of arguments here the first one is chunk overlap it's pretty easy to understand essentially what it's telling us is we don't want any of these chunks to have any overlap that's why we set it to zero because they are separate titles they they shouldn't overlap and we also set the separator as a new line so making that really clear but just going back to this chunk size argument the reason we're setting that to zero is because it first tries to look for the closest separator to the index number indicated by the chunks and basically if this is more than one there's a chance that it may not split on a new line it will split on chunk size but so by setting it to zero we make sure that it prioritize splitting on the separator rather than trying to split on the chunk size so now that we've done this we've instantiated our text spitter we can apply it to those documents that have been loaded in by the documents spitter and this takes a while and you can see that we get basically a warning every single one because we set the chunk size to zero but we'll just let that run we will just actually skip over that and now you can see that it's done so let's just go ahead and check that that worked correctly so what we're going to take is the first document um of those that have been split using the text splitter and we can see perfect this is the first description it's just the description it's worked correctly so now we can go ahead and we can start building building our Vector database so kind of the final Building the vector database step actually we're pretty much done is that we need to in the same step create the document embeddings and store them in a vector database so what we're going to do is to use the chroma method we're going to assign that to a variable called DB books and we're going to use the from documents method in chroma and we're going to pass that two arguments we're going to pass it the documents that we created the ones that have been split using the text splitter and we're going to tell it what embedding we want to use and we're going to use our open AI embeddings so what I'm going to do now is take a little diversion and explain to you how you can get access to an open AI API key and how you can also load up credits so that you can pay for this model so let's duck over to the openai website and have a look at that so in order to start working with open AI models you first need to visit platform. open.com and if you don't have an account you will need to create one so once you have an account you can then go up to the top right hand corner and go to settings as you can see here and you will land on your profile page now there are two relevant sections for us here the first is the billing page so in order to use any of these open AI models you do need to pay for it but smaller models like the Ada embedding model that we're going to be using in order to create our document embeddings or older models like GPT 3.5 turbo are actually pretty cheap to use so I chucked $10 on my account I think 6 months ago and you can see I've still got $440 left so it's not terribly expensive if you're not really hammering these models so you can see here on this billing page you can add credit like I said you can load up a small amount it will last you a while if you're not using the expensive models and you can also to manage your preferences to set things like usage limits the other thing that we want to have a look at is how you get the API key and if you just navigate on the right hand side you can see that there is a section called API Keys all you need to do is click this green button it will generate a new API key and just make sure you save that straight in the M file so that you can use that and as you can see it's relatively straightforward to set up and once you've got this set up you got your API key loaded in yourm file it's pretty easy and straightforward to work with these models so now we have everything in place to create our Vector database so if we just execute this cell you can see that this is going to run for a little while so I'm actually just going to skip ahead and you can see that it took about 24 seconds to create that database so now we're ready to start quering it we're at the fun part and you can see it actually wasn't that much work okay so for our first query let's Getting book recommendations using vector search try for something kind of specific so let's say a book to teach children about nature so I'm going to save this to a query variable and then to get the recommendations what we're going to do is take our database the DB books and we're going to run this similarity search method over it we're going to pass in that query and this k equal 10 argument tells us how many results we want to get in return so let's go ahead and run that and let's see what it's returned so if we have a look at the top results the first one is children will discover the exciting world of their own backyard in this introduction to familiar animals from cats and dogs to bugs and frogs and the second one is introduce your babies to birds cats dogs and babies not really sure why you need to introduce your baby to babies through a book about animals but anyway this is still a relevant recommendation so this is super cool and it's working really nicely recommendations really make sense but the problem is is as I said earlier this is just returning the descriptions to us and we don't want to give recommendations of descriptions we want to give recommendations of book titles and authors and things like that so we obviously need some way of using these recommendations to filter the data frame containing all of our books and this is of course where those isbns come back in that I mentioned earlier so what I'm going to do is create a piece of panda code that is going to filter that books data frame just to the first result that was returned as our query so the one at the top there children will discover the exciting world of their own backyard blah blah blah so let's have a closer look at this piece of code so we can see in this section here what we're doing is take the docs take all of the recommendations that were returned from the vector database extract from them the page content so just the text split that based on space and keep only the first element so the ISBN and then strip it so that there's no trailing white space and then convert the whole thing to an integer and the reason we need to do that conversion to an integer is because the field in the data frame is also integer so they need to match in data type otherwise that matching won't work and then we pass all of that into a pandas conditional and that essentially tells pandas please give me only that book which has this ISBN so let's see how it works so if we run that it seems to have worked perfectly we have a book that makes sense Baby Einstein Neighborhood Animals and so this method has worked really cleanly and gives us a really quick and clean way of looking up the books that are recommended through the descriptions so this is really nice but we've only done it for one recommendation from one query so in order to make our lives a bit easier let's bundle all of this functionality up into a function so we can do this for every query that we want to do and it's going to return all of the recommendations so let's call this function retrieve semantic recommendations and we're going to give it two arguments we're going to give it the query and we're going to give it the number of recommendations we want the top K and it's going to return a panda data frame now the first thing we're going to pass in is uh the code to basically give us the recommendations so running that similarity search for the given query against the database then what we're going to do is create this blank list this is going to contain all of the isbns and what we're going to do is Loop over each of the recommendations that are returned and for each of them we're essentially going to do what we did before with extracting the ISBN I've just made a small change in this function and the reason why is because I found that for some of the descriptions they were actually enclosed in quotation marks and this caused problems when I was trying to PA the ISBN I couldn't recognize it as an integer so basically in this case what I do is once we have the page content I strip off the quotation marks and then I split and keep the first element and convert that to an INT and what we have in return in this books list is a bunch of int isbns and then what we do as the final step is we filter the books data set based on that so we keep all the IBN that match those in the books list so let's now have a look at how we go with our query a book to teach children about nature and these are the results that we get and they all look great you know these all totally make sense I actually see a r doll book that I read when I was a kid so that's actually quite nice and the Very Hungry Caterpillar as well um so yeah this has worked very very well and this is our first building block for our recommender and I think you can see that even with the small amount of theory that we needed to cover this is not terribly complex to understand and it's very very powerful and gives you very flexible ways of working with Introduction to zero-shot text classification using LLMs text so now that we have our basic recommender let's start thinking about some things we could do to improve it or to refine it so have a think back to the first section when we were looking at our data set and remember we had that categories field that was really really messy and you might remember that I said to put a pin in it that we were going to come back to it and tidy it up well this is what we're going to do in this section we're going to use llms to do a technique called text classification that's going to help us sort those categories into a much smaller number of groups once we have this smaller number of categories we can add this to our book recommender as a potential filter so text classification as you might guess from the name is the branch of natural language processing which is concerned with trying to assign text to different discret groups so for example let's say we have this book description that we've seen before a heartwarming journey of love and friendship and we might for example want to sort it as either fiction or non-fiction so we could build a text classification model which is trained to do so and voila it predicts for us that this book is likely to be fiction we can repeat this with each of our book descriptions this one about the ambitious attorney also gets classified as fiction Edward given Masterpiece is of course classified as non-fiction and then finally our book about relationships is also assigned to non-fiction Now text classification doesn't need to be done by llms of course this is an older problem that we were solving before llms but it does turn out that text classification is something that they're rather good at there are few different ways that llms can do text classification but the one we're going to use in this tutorial is called Z shot classification what this involves is taking a pre-trained llm and without any further training no further work getting the model to assign text to a category what we do is we provide the model with a prompt like the one that you can see on the screen and the text that we want it to classify and we may optionally provide it with our categories that we want to classify as part of the prompt so in the case of our book descriptions we could take a pre-trained model that is good at doing doing zero shot classification and without any further work instructed to assign the books to either fiction or non-fiction so we can see a simplified version of how an llm might do that here we have this prompt telling the model to do the classification and what the categories are and that's all the model needs to either classify it as fiction or nonfiction so how can models do this out of the box without us doing anything else well it seems to be something that sufficiently large llms able to do models that are 100 million parameters or more as we've discussed Transformer based models are good at understanding which words are likely to be semantically related to one another due to seeing them in related context during training so in order to be able to do successful zero shot classification of our book descriptions the model will need to have seen enough text showing that certain types of topics are likely to be fiction or non-fiction in his training data so for example let's say that we're trying to train an encoda decoda model during training this model will see an enormous variety of texts from Wikipedia articles to news stories to Amazon reviews and somewhere in that training data there is likely to be information about books with information about them such as their categories so in the training data the model might see a book that is a moving Tale Of Love Redemption and family which is further described as a fiction book after being exposed to enough similar examples the model will have a pretty good understanding that books with this sort of topic are fiction so when when we prompt it with the book that we want to classify the model will be able to compare the book's description with what it's already seen during training and predict that that is most likely to be a fiction book so we can see that here a heartwarming journey of love and friendship is similar enough to things that it's seen in the past so it knows that this is likely to be a fiction so now that we understand the theory about how llms can do zero shot text classification let's jump into doing this for our book descriptions so as we saw in the last Finding LLMs for zero-shot classification on Hugging Face section when we were cleaning and screening the data we have way way too many categories for the books so if we revisit this and we have a look at it again what we can see is that we very very quickly go from sizable categories things like fiction or juvenile fiction down to really small categories that get really specific things like self-help Computing Etc and the thing is is because we intend to use this for filtering we first we don't want too many but we also don't want each of these to be too small because what we're looking for is something that's going to facet the recommendations that are returned from the vector search and that's already going to be a subset of the books so we don't want to you know divide up the categories into things that are two too small or too specific so if we limit this to categories that only have 50 books or more we can essentially see that we have a number of quite broad categories including fiction juvenile fiction and juvenile non-fiction so let's go ahead and have a closer look at the Juvenile fiction category we can see you know this looks pretty broad it looks like it really just contains you know fiction books for children so it looks like it could be a potentially useful category and if we do the same thing with juvenile non-fiction we can see you know a number of books like graph books or educational books for children so this also could be a potentially useful category so it's the easiest thing that we can focus on when creating the book categories is by focusing on this fiction non-fiction distinction so basically what you can see is I pre-created a mapping of the top 12 book categories to either fiction or non-fiction and in addition I preserved juvenile fiction and juvenile non-fiction as separate categories but I've renamed them as children's fiction and children's non-fiction so for example you can see that I've changed biography and autobiography to non-fiction I've Changed History to non-fiction but I've changed things like comics and graphic novels to fiction and drama to fiction so what this is going to give us is a nice chunk of the data which is either classified as fiction or non-fiction and that's going to give us a starter for classifying the rest of the books so if we have a look at how many of the books now have known labels we can do this by checking which of the simple categories are not missing we can see that we have 3743 books so this is a pretty good basis and this is going to form the basis of the data set that we're going to check our llm based classifications on so at the beginning of this section we talked about how you can get llms to do a task called zero shot classification that is you can get them to sort pieces of text into particular categories without having being explicitly trained to do so so you might be thinking well where can I get such a model where can I find a model they can do zero shot classification and the place we're going to be getting our model from today is hugging face so what is hugging face hugging face is a company that has a significant open- Source branch and this open-source branch is responsible for hosting and distributing all of the major open source llms as well as other types of AI models such as text to image voice models and multimodal models so we can see that we're here on the huggingface ./ models page and on this page you can see a whole variety of different models that you can use for different tasks and we go down to zero shot classification under natural language processing what we can see is a whole bunch of different models that we could potentially use for our zero shot classification task so you might be thinking okay well how can I use this model and happily hugging face also provides packages for us to interact with these models and the most powerful one for working with large language models is called Transformers so Transformers gives us a whole bunch of functionality in Python for working with open source large language models that are hosted on hugging face and you'll see we're going to use it not only for our zero shot classification task but also for our sentiment analysis task down the line so after this tutorial you might want to learn more about working with large language models and the best course I've ever come across for this is hugging faces natural language processing course so if you visit their URL huggingface clearn NLP course you will be taken to to their homepage and this course is such an amazing free resource it takes you through from the basics how to work with large language models what the different types of architecture mean which we have covered a bit in this course and different ways of working with large language models beyond what we cover in this tutorial so we've talked about the fact that hugging face has these zero shot classification models that we want to use for our task but pie charm gives us a really nice shortcut to being able to choose and access these models so I click in a new cell in my Jupiter notebook and I can also do this if I'm using a python script what I will see is a context menu which will give me the option to pick insert hugging face model so once we've selected that we can see that we're presented with this tool window which gives us the same functionality that we have on the hugging face models page so if we go over on the left hand side you can see that we can filter Again by task type we select of course zero shot classification and then you can see that we're presented with the same models that we saw on the hugging face models page we can change how they're sorted by likes by downloads created at or last Modified by the license type and we can also filter by tags so we're going to pick the most popular model the BART large mnli this is a very popular model for zero shot classification tasks and we can see that within this tool window we can also see the model card and that gives us a whole bunch of useful information about the model including how to use it so if we go down to the use model button we can see that pycharm has inserted some boilerplate code for us to help us get started and we're going to use this as the basis of our classifier so having had a look at the model card it tells us that if we want to be able to use this model for classification for zero shot Classifying book descriptions classification we need to set up the categories that we want the model to be able to classify into so I've decided to just limit this to fiction and non-fiction I could have of course included the children's non-fiction and fiction but just to keep it simple I decided to just limit to the adult classes so what we do is we set this up as a list and we include that before we set up our model Pipeline and then one additional change that you can make to this boilerplate code is if your device has a GPU you can specify that you want the model to be able to use that so you can see that py charm is automatically completing device equals z you can use this argument if you have Cuda I do not I have an apple machine which uses MPS so that is the argument that I will pass in so I'm just going to execute that cell and now that that's run our model is loaded in and ready to start making predictions before we start using it I just want to show you one more thing and that's the hugging face tool window in pie charm so if you click on the hugging Face logo over in the left hand side of pie charm you'll see this tool window pop up and what you can see that it contains is every single one of the hugging face models that I've downloaded because what hugging face does is downloads encases models rather than you having to redownload them every time you want to use them now this is great but one problem that this can lead to is you can see see from this size column that the models can be quite big so it's a good idea to review these models periodically make sure that any models that you're not using you delete and that's something you can do right from that tool window rather than having to go to the directory so let's now get to doing our zero shot classification and first things first let's have a look at the first of the known fiction examples that we have so we're just going to do this pend as filtering where symbol categories equals fiction take the description and the reason we add this reset index argument is because when we do a filtering obviously we're left with rows that have you know the index they had in the original data frame so by resetting the index we know that we're resetting it so that it's now for the filter data frame and zero is going to be the first example so let's now run our classifier over that sequence and you can see that the code here is very very simple we just need to pass in the sequence that we want to classify and the categories we wanted to classify into and then once we've done that you can see it's quite fast and we get back the labels and we get back the scores so what this represents is the probability that that particular description that piece of text belongs to each of those categories what we can see is that the probability that it is fiction is much much higher than non-fiction so just like the known label tells us the model has also predicted that this is a fiction book so in order to actually get the predicted label out of this output we need to do a bit of postprocessing so the first thing we're going to do is to take that array that contains the scores and we're going to run numpy's ug Max method over it and what that's going to yield is the index of the highest probability now as you can see pie charm is telling me we have an error here it's because I haven't imported numpy so I'm going to go ahead and do that so now that we have that index what we can do is we can now take the array that contains the labels and take the index of the maximum probability and if we have a look at that it tells us correctly that the maximum probability the most likely label is fiction so let's now go ahead and bundle all of that up into a function we'll call it generate predictions and it's basically just going to take in the sequence and it's going to take in the categories it's going to run those predictions that zero shot classification and then it's going to extract the maximum label Checking classifier accuracy so now we set things up so we can get this model to do zero shot classification over a description and tell us what the most likely label is fiction or non-fiction so the next thing we want to know is how good is this model at actually doing this task so to find this out what we're going to do is take a sizable sample of both fiction and non-fiction books we're going to get the classifier to predict a label and then we're going to compare it to the known label so the first thing we're going to do is import tqdm because that's going to give us a way of knowing how long we've got left in our Loop because it does take a while to do these predictions over 600 examples and then what we're going to do is create blank lists for the actual categories the known categories and the predicted categories the ones that the model comes up with then we set up our for loop with a range of 0 to 300 and what we do is we take examples where the books have the simple category fiction extract just the description and basically iterate through the first 300 of those and for each of them we generate the predicted category and we add that to our predicted cats list and then for our actual cats list we just add fiction then let's repeat the same thing for non-fiction so we change the filtering to non-fiction and we change the actual categories to non-fiction and then we go ahead and run this and this is going to take a while so I'm just going to skip ahead and you'll see the results so now that that's finished let's go ahead and throw those two lists in a panda's data frame and we have these two columns actual categories and predictor categories and you can see that py charm did a very nice job of predicting what I wanted to type there and if we have a look at our data frame we can see actually from the first glance it looks like it's done a pretty good job so the next step is to create a column where we compare these actual categories to the predictions and see if they match and let's go ahead and start creating that we're going to call it correct prediction and again you can see that py Chom has jumped ahead and autoc completed most of that I would prefer it to be 1 and zero rather than true and false it's basically the same thing but basically it will be one if the predictions lined up and it will be zero if it didn't and then the final thing we can do is just check how many of those predictions were correct and again pie Jam's going ahead and completing that code and we can see that we got 78% correct so this is actually a pretty good rate for zero shot classification it does mean we're getting around 1 in five incorrect but for something that is predicting on categories it was not explicitly designed to predict on this is actually a pretty good rate so we can be happy with this and we can go ahead and use this model to predict all of the missing categories okay so in order to predict the category label for all of the missing boards what we're going to do is we're first going to create two lists we're going to create a list for the isbns and we're going to create a list for the predictions so the reason we're doing this is because what we're about to do is subset the data frame and take only those where the category is missing or where the simple category is missing and we need the ISBN so that we can actually merge that back into the full data frame later so let's now go ahead and create that subset of the full data frame so we use the filtering code to pick only those books where the simple category is missing is Na and we keep those two fields ispn and the description and again we're resetting the index because we want to be able to Loop through it and we need the index to be contiguous so here we set up another for Loop this time it's for the entire length of the missing cats data frame then what we do is we take the description we pass it into our generate predictions function so we extract the most likely category and then what we do is we attach that category or we append it to the predicted cats list and then finally we attach the ISBN to the ISBN list or we appended and then finally we execute that and again this is going to take a while it's even more than the examples we did for checking the accuracy so I'm going to skip ahead until this is finished so again we're going to Chuck that into a data frame it will have two columns the isbn13 and the predicted categories and you can see that data frame here so now that we have that data frame the last step is basically merging it into the original data frame and using these categories to replace those that are missing so first step is we're going to use a PD merge to merge those two data frames we're going to do this on isbn13 and we're going to do a left join so the reason for this is because these missing books these missing categories are a subset of the original data frame and we want to be able to keep all the observations so having the books data frame on the left means that we can keep all the rows when we do this join this second thing we need to do is now that we've merged those data frames there's going to be a new column called predicted categories in the original data frame so we're going to use a numpy wear Clause where basically we specify that when the original simple categories column is missing please use the values from predictor categories the ones that we just predicted otherwise use the original value and what that gives us is a mixture of the original known labels and our predicted categories so that's actually going to improve the overall accuracy of this category because only a subset of them are predicted and then of course we can finish up by Tiding up and dropping that predicted categories column because we don't need it anymore so let's now double check that everything has worked we'll have a look at the data frame let's scroll across to this column we can see that everything looks okay and when we have a look at our column statistics we can see that we do not have any missing and we have four distinct categories so everything has worked exactly as we wanted so doing this zero shot classification possibly got you thinking are there other things I could use it for are there other categories I could predict and of course sky the limit if the model was trained on data that actually supports these associations then of course you can absolutely use it for this so one potential candidate for us is breaking down that fiction category we can see that it's 54% of all of our books so maybe we want to narrow it down to specific fiction types however a challenge that we have is having insufficient labeled data to actually test how good these predictions are so you saw that how with the fiction and non-fiction categories we had a lot of labeled examples so we were able to easily see how good our predictions were but when it comes to specific categories especially those within fiction we really don't have a lot of examples in the data so let's have a look at this in our books data set we're going to take that raw categories column and going to filter it down to those cases where there's an exact match for the following terms so we're going to use romance science fiction and sci-fi as an alternative fantasy horror mystery thriller comedy crime and historical and when we run this you can see that we get a whole 16 observations so essentially we really don't have enough labeled data in order to be able to tell how well our classifier will go with more specific categories so we could still do it and we could still just assume that the model will do a reasonably good job but it is a little bit risky and this is sort of a lesson we need to keep in mind when we're using llms they're not really magic they're not really different from any other type of machine learning model we still need to apply the same checks and the same sort of uh processes with working with them as we would with any other machine learning model so that's it for the end of this section we have learned a lot about how we can use llms for zero shot classification and the final thing we're going to do is of course save our nice new data set to file so we can use it in the next Introduction to using LLMs for sentiment analysis section so far we've used llms to find the most similar books to each other and also to classify those books now we're going to use llms to do something called sentiment analysis that's going to help us determine the emotional tone of those books I also think it's a really nice way of showing that the type of data you use can open up the possibilities for different types of features in your data science products because we are working with Text data we have the option of extracting sentiment whereas we're working with a more traditional data set for recommenders we would wouldn't really have this information so once we've extracted this information we can include it as part of our recommender to allow our users to filter the books based on their tone so perhaps someone is after an exciting read so they might choose something that's suspenseful or maybe they just want to be cheered up so they might choose a book that's joyful so including this information will allow that additional degree of control for our users so in this section we're going to revisit text classification but we're going to be applying a different technique using large language models so first things first what are we doing well we're going to be classifying our text into seven different discreet emotion categories we have anger disgust fear Joy sadness surprise and of course a neutral category because sometimes the text will not have any emotional content so using these categories we can get an llm to classify the dominant emotion expressed in our book descriptions so for example for this description our old favorite our heartwarming journey of love and friendship the llm is likely predict that the most likely emotion is Joy now of course we could actually do this emotion classification using zero shot classification as long as the data set that the model was originally trained on contains sufficient association between emotional tone and book descriptions but this time we're actually going to be doing something bit different we're going to be using a technique called fine tuning in order to get an llm that can do em motion classifications so to understand how fine tuning works and how it's going to give us an llm that can classify emotions let's revisit our Roberta model which we first saw when we were talking about document embeddings so this Roberta model is made up of a sequence of layers we have our word embedding layers we have our encoder layers and then we have those final layers which allow the model to do that mask word prediction task that it was initially trained to do with fine-tuning we can throw away those last layers that we used to do that mass word prediction task and we can replace it with layers that are instead used to predict motion categories what we then do is we take a small labeled data set and this data set contains text and their Associated emotion and we can further train the model using this so what you can see is that as part of setting up the model for fine tuning we haven't touched those lovely encoder layers they are still there we didn't reset them or delete them meaning that the model has preserved all of that rich information about language that it learned from its original training what we can use is that information and then the information contained in the emotion data set to get the model to learn the weights in its new Final layer meaning that we end up with an llm that is specifically designed to do an emotion classification task now we're not going to be fine-tuning a model ourselves in this video it's quite complex to do and it's really a whole Topic in its own right to do properly however if you want to learn more about how to do this for yourself in case you want to find Junior own model I'm going to as always direct you to the hugging phase natural language processing course where they show you in detail in the third section how to do this for yourself instead what we're going to be doing today is use a model from hugging face Hub that someone else has fine-tuned and up loaded so let's get Finding fine-tuned LLMs for sentiment analysis started so as per usual I've gone ahead and created a new Jupiter notebook and I've loaded in our new data set that one that contains all of those predicted categories so now that we've done that let's get to work to finding a fine-tune model that we can use for a motion classification so just like in the last section we're going to be using an open source model from hugging face so we're going to right click in a new Jupiter cell and we're going to select insert hugging face model so as we discussed at the beginning of this section we're going to be treating sentiment analysis as a text classification problem so that means we select text classification from the left hand side of our model selection tool window and then we can search for emotion in the search bar in order to narrow it down to emotion models so let's have a look at the most liked model the most popular model in this category and what we can see is this is a fine-tuning of a Roberta model like we talked about at the beginning of this section but this been fine-tuned to predict many many many different types of emotions this is probably far more than we really need for our purposes so let's have a look at the next model it's also a fine-tuning of a Roberta model and what we can see is this time it's been fine-tuned for only emman six basic emotions so we've got anger disgust fear Joy sadness and surprise and we talked about those at the beginning of this section and it also has a neutral class so having a bit of a look through the model card for this what we can see is just like with our zero shot classification model we have instructions on how to use it so this time let's actually copy this and we're going to use this as the basis of how to start using this model so because someone fine-tuned this model to do this specific em motion classification task there are likely evaluation metrics we can look at so how well did this model perform at doing this classification during its training so I found this page from datal loop. a and it gives us a bunch of information about this model it's quite a well-known model but if we scroll down to the accuracy section you can see that it tells us that it had an evaluation accuracy of 66% and this seems a little bit low but it is actually significantly higher than the random chance Baseline of 14% that was achieved by taking 100% and dividing it across the seven different categories so I think we can be happy with this model we can feel fairly confident in using it and we can go ahead and use it to measure the emotional content in our descriptions so let's first test out our Emotion classifier by literally running the code that we copied from the model Extracting emotions from book descriptions card so we have this little example I love this which is the sequence to classify and if we run this we can see that we get two warnings the first is to tell us that we are not using gpus when we could be and the second is to tell us that this return all scores argument that was in the documentation is now deprecated so let's go ahead and update our function so that we modify these arguments so the first thing that we're going to do is change this return all scores argument to top k equals none as suggested and the second is like we did last time we're going to add device equals MPS so we get GPU utilization so we've loaded in our emotion classification model and we've seen how we can get it to predict the emotion of different pieces of text so we now need to decide which level of the description we're going to apply the sentiment analysis over and we've got two options here we can either get the sentiment classifier to try to predict the overall emotion for the whole description or we can break it down into individual sentences and try to predict the sentiment of each of these so let's first look at this first description we have and let's just start having a look at the potential emotional tone of each of the sentences so we start with a novel that readers and critics have been eagerly anticipating for over a decade Gilead is an astonishingly imagined story of remarkable lives well this feels kind of surprising right and then we have another sentence haunted by his grandfather's presence John tells the rift between his grandfather and his father the Elder an angry Visionary who fought for the Abolitionist cause and his son an Ardent pacifist that almost feels fearful so you can see that we have a bit of a mixture and potentially running a sentiment analyzer to get one sentiment or one emotional prediction from this whole description might be losing some information but let's have a closer look at this let's test it out so let's first run the sentiment analyzer over the entire description and what we can see is the prediction we get overall is that it's 65% likely to be fearful now I don't really get that impression when I look at this whole book description like looking back up a little bit we can see sen is like told in John A's joyous rambling voice that finds Beauty humor and Truth in the smallest of life's details that feels kind of joyous it feels like this book has a mixture of different themes and we want to be able to capture those so what we're going to do instead is split this description down into its individual sentences and classify on that basis and very nicely this classifier actually allows us to classify multiple sentences at the same time so we can just pass in pretty much the same code but instead with a split argument that allows us to split that on the basis of full stops and if we look through this this is way better we have a lot more variants so we can see just like I suspected that first sentence is surprising and if we look a bit further we've got high scores for other sentences we've got one that is fearful and we've got another one that is sad and we've got another one that is joyous so we can see that we're getting a lot more variety here and this is doing a much better job at getting at the true emotional tone of these descriptions so let's just compare a couple of these predictions to the sentence to see if you know it's actually giving the right predictions as well based on eyeballing so again let's just take that first sentence again and let's have a look at the classification and yes again it's mostly classified it as surprising as we said before so let's have a look at another sentence let's have a look at the fourth sentence and the predictions that it's given for this is that it's mostly fearful and this makes sense haunted by his grandfather's presence you know he's talking about a conflict he's talking about his grandfather being angry so this all seems to make sense and it checks out that this classifier is also doing a good job so this idea does complicate things for us somewhat because now what we've done is introduced multiple emotions that can be associated with the same book so how can we make sense of this well my idea is what we can do is for each book have a separate column for each of the seven emotion classes and instead of a assigning a category of it is this or it isn't this what we can do is take the highest probability from across the whole description for that particular sentiment so for example if Joy is very high in one sentence but it's low across all the others we'll just take that higher score for Joy for that book description and so on for all of the other seven or other six so what that means we need to do is we need to process this output of of the predictor and kind of amalgamate it or Cate it in such a way that it only gives us one maximum score for each of these labels and you can see with the way this is formatted we're going to have quite a lot of processing to do so the very first problem we have is that this output is ordered by the score for each of the sentences so you can see that we have a different order of labels for every single one of the sent sentences so the first thing we can do is actually sort these by score instead and what it means is that for each of the sentences we will have the exact same order of each of the seven emotion categories so let's create some code to efficiently extract the maximum emotion probability for each emotion for each description so first thing we're going to do is import numpy and then what we're going to create is this list called emotion labels and this is basically going to be the key in our dictionary so we're later going to turn that into The Columns of a panda data frame we also create an empty list for holding the isbns the reason we're doing this is because later on we're going to create this data frame as I said and we want to merge it back in with the full data frame so again we're going to use isbn13 as the key and then finally we create this emotion score dictionary comprehension what this is going to contain is basically all of the scores for every single description for each of these labels anger disgust fear so let's now create this function calculate max em motion scores in order to extract the maximum motion scores for each description so the first thing we do is create another another dictionary comprehension this is designed to hold all of the predictions for a particular description so we're not talking about every description just talking about a single description right now then what we do is we Loop over each of the sentences so each of the sentences return by prediction we sort it like we saw before so that all of the keys all of the emotions are in the same order and then what we do is we Loop over that and per each of the emotions we extract the score and we append it using the correct label then what we do is we append this to the uh dictionary comprehension and then we take the maximum score for each of those emotions so what we now have for each description is a dictionary containing the maximum probability for each of the different emotion labels so we now need to apply this function to each of the books so let's just test it out first we'll just do the first 10 books and the first thing we do is of this for Loop is we take the ISBN 13 for that book and we append it to that ISBN list then what we do is we take the description we split it into individual sentences and save that to the sentences variable and we pass that variable into the emotions classifier then what we do is we pass those predictions generated by the classifier into our calculate max em motion scores function and then we take the resulting dictionary that's returned by that function and we append it to to that emotion scores dictionary so basically by doing that we should have a dictionary that can serve as the basis of our data frame containing different columns with the maximum probabilities for each book and if we run that for Loop and then we have a look at the results we can see that it seems to have worked like all of these probabilities seem to make sense um if we scroll all the way through we can actually see that Joy prediction for the first book that we already know about and we know that that's the correct number cuz we've seen that before so now that we know this works let's go ahead and apply it to all of the books so we're just going to go ahead and copy and paste the code for the for loop from above and the first change we're going to make is by including tqdm as part of the for Loop so again we have a progress bar and py charm is throwing an error so it's telling us we have not imported tqdm so let's go ahead and do that and of course we modify the for Loop so that is now for the length of the entire book's data frame now of course we are starting from scratch with this Loop so we don't want the results from the previous run to be saved to the ISBN or the emotion scores variables so let's just go ahead and copy and paste the three variables from above down here so we've got emotion labels we've got ISBN and we've got emotion scores and they're basically going to be reinstantiate here and pretty much this is it we are good to go so let's just kick that off and again this is going to take quite some time to run this over more than 5,000 observations so I'm just going to skip ahead and we can now have a look at the results and with that done let's now pass the results of this dictionary into a panda's data frame and we don't want the index to be ISBN but what we are actually going to do is create a separate colum for ISBN and assign the ISBN list to that so if we have a look at that data frame we see we have exactly what we wanted got a separate column for each of the emotions and we can see that each of those columns contains the maximum probability for that description now of course the final thing that we need to do is to merge this back into the book's data frame so again we're going to use Panda's merge we have the books we have the emotions data frame and we can just merge them both on isbm 13 and so let's now have a look at the resulting data frame and if we scroll across we can see all of our emotions columns and if we actually want to have a look at the distribution of those emotions we can again use the column statistics function and what we can see is we actually have a pretty good distribution of most of the emotions and in particular the sadness emotion has quite a lot of pretty high probabilities so this indicates to us having a look at this that we do have a relatively good range even though we do have you know some inflation at the lower areas and this is going to give us a pretty good variable to use for sorting the different books when it comes to making the recommender and then as always the final stage is to save our beautiful new data frame to file so we can use it in our final step which is to present all of this in a dashboard so we're going to go ahead and do that and I hope this has been an interesting overview of how large language models can do sentiment analysis and giving you some ideas on how you might be able to use this in some of your projects so now we finished developing Introduction to Gradio all of the different components for our book recommender we have our Vector database that allows us to find the most similar books to a query we use text classification to sort the books into fiction or non-fiction meaning our users can also filter books based on this category and we found out how likely each book description is to have a certain emotional tone however all we have right now is a bunch of code and a data set admittedly a very nice data set but still it's just a data set it's not the most userfriendly interface as such the last thing that we're going to cover is how we can bring all of this together and present it in a dashboard that people can use to get their book recommendations so in order to build this dashboard we have moved away from Jupiter notebooks and we're now working with a python script and if you want to create a python script in pycharm it's the exact same process c as creating a jupyter notebook you just need to pick python script instead of Jupiter notebook so to get us started I've already gone ahead and imported all of our dependencies these should mostly look familiar because we've already covered them in the previous section so we have pandas numpy andm we have our Lang chain packages and the only new one we have here is gradio and I'm going to cover that in a second we've already added our load. M function in order to load our open AI API Keys into the background and I've gone ahead and read in our very latest books data frame the one that contains all of those emotions that we just added so let's now talk about gradio so gradio is an open-source python package that allows you to build dashboards specifically designed to Showcase machine learning models so it's really tailored nicely to allow you to use things like machine learning models or llms under the hood and if you go to gradio doapp you can explore a lot of the very very powerful functionality that it has and we'll see a touch of it in this you can see that it can be quite flexible in terms of the things you can show um but it gives you a really cool way of demonstrating the things that you're building with code to people who may not necessarily want to use code in order to use your models or whatever else you're creating in Python so first things first we're actually going to be using the thumbnail as part of our dashboard and the thumbnail is basically Building a Gradio dashboard to recommend books a little preview of the book's front cover which is going to give us a nice sort of visual element to our dashboard so the books data set that we use provides a URL which links to Google books but what that provides Us by default is book covers that are all kind of random different sizes so what we actually want is that Google Books returns to us the largest possible size that it has available so that we get a better resolution so we can add this little argument to the end of the URL just depending that to the string and that's going to give us back much better resolution book covers the next problem we have is that a number of books don't have covers so if we try to render them we're actually going to get an error so what I've done is I've gone ahead and I've created this interim cover I will provide this as part of the repo with all the code for this project but you can use whatever you want and basically what we now do is we modify the code again using NP Weare and what we're going to do is replace those cases where we have a missing cover so where large thumbnail is na a with this interim cover and otherwise we'll use the link that's provided and that's it so we're now ready to use the thumbnails so we can get on with building buing the next parts of our dashboard so the next thing we need to do is add that code that we created in the second section in order to build our Vector do base and this is so we can of course do the core functionality of our recommender which is semantic recommendations so just to remind you what this code does in this first line what we're doing is reading those tag descriptions into the text loader then we're instantiating a character text splitter which has as a separator the new line then we're applying that to each of the documents so what we end up with are document chunks that are individual book descriptions and then what we do is we convert those into document embeddings using the open a Ai embeddings and we store those in the chroma Vector database so now we're going to create a function that's going to retrieve those semantic recommendations from our books data set and it's also going to apply filtering based on category and sorting based on tone so let's go ahead and start creating this let's call it retrieve semantic recommendations and it's going to have as its arguments the query it's going to have the category and we can set none as a default and also the tone which again can be none and then we're going to have two top k categories we're going to initially retrieve 50 recommendations because we're going to apply some filtering and then what we're going to have have is a final top K which is going to be lived to 16 because 16 as you will see looks quite nice for display on our dashboard and then of course the result that it's going to return is a panda's data frame so to start this function we're going to again repeat some code that we saw all the way back in the second section the first thing that we're going to do is get our recommendations from the books Vector database the DB books and we're going to limit that to the initial top K those top 50 results it's going to be based on a query that's going to be input by our user then what we're going to do is get back those isbns of those recommendations by splitting them off the front of the descriptions and then what we're going to do is limit our books data frame to just those that match the isbns of those books recommended from the vector database and then what we're going to do is start applying some filtering based on category so basically we're going to have a drop down on our dashboard and it can either read all or it can read one of the four simple categories fiction non-fiction children's fiction and children's non-fiction so basically want the argument to be is that if someone has picked anything other than the default all we want to filter the books Rex data frame down to only those books that match that category and otherwise we just just want to return all the recommendations and then you can see what we've done is we've limited those filtered recommendations down to the final top K and then finally the way we're going to use the emotions category I think I mentioned this earlier is we're going to sort based on the probabilities rather than doing any sort of classification or filtering so say if someone picks happy as a label that's going to match to Joy then what we will do is sort those recommend ations based on the highest probability of them being joyful books so we're going to do this for five of the emotions we're going to do it for Joy surprise anger fear and sadness and they're going to correspond to a drop- down menu with labels happy surprising angry suspenseful and sad so I decided to leave out disgust because I can't imagine anyone really wants to read books that are likely to disgust them and I also left out neutral because neutral is kind of implied by all so you know you're not really looking for anything specific so let's go ahead and create the code for that so what you can see again it's just a simple um give else Clause so if tone equals happy then sort these books based on Joy and make sure that it is descending and then do the same for the others and then to end this function we just return the data frame with the book recommendations so the next thing we need to do is to create a function that specifies what we want to display on the gradio dashboard so we're going to call this recommend books and it's going to take three arguments it's going to take the user query it's going to take the chosen category and it's going to take the selected tone and what we're going to do is first get our recommendations data frame by calling that function that we just created retrieve semantic recommendations and we're going to pass in those three arguments we then create this empty results list and what we do is we then uh loop over every single one of these recommendations that have been passed back from our previous function so the first thing we're going to deal with is the book description so this is just going to be the description field of course but the thing is is we're going to be using this on a dashboard that has limited space so we don't necessarily want to show the full description so instead what we're going to do is we're going to split that description into its separate words and if the description has more than 30 words what we're going to do is cut it off and just make it continue with a trailing ellipses so let's now think about how we want the author's list to be displayed so in this data set if a book has more than one author they are combined using a semicolon so first things first we're going to take the string containing the authors and split it on semicolon so let's now think about the different conditions we might have a book that has two authors so let's create an F string that separates these two authors using and so we have the first author in the first placeholder and the second author in the second placeholder or we might have a book where we have more than two authors so in this case we create an F string where all of the authors except for the last author are separated by a comma and then the last author is added on using an and or else we just have a book with one author in which case we just use the author and you can see I've just made a small mistake here in the F string for two or more authors I need to use single quotation marks rather than double quotation marks so I'll just pop up and change that so the way that we're going to display all this information about the book is as a caption that's sort of appended to the bottom of the book thumbnail image so let's now all combine this into a caption string again using an F string we'll first have the title by authors and then colon we have that truncated description and then finally we have that results empty list that we created earlier so what we appended is a topple containing the thumbnail and the caption and we're going to do that obviously for every single book looping over it using that itose functionality okay so we are now ready to finally start creating the dashboard and you can see actually there really wasn't that much code we needed to write to get to this point we could have actually been a little bit less fussy about how we presented the caption but you'll see it will look very nice so you'll see it's worth the effort so the first thing we do is we create two lists the first is our list containing all of our categories plus that all category that I talked about earlier and then we do a similar thing for tones so if someone doesn't want a particular emotional tone we have all as a standin for neutral so we start off our gradio dashboard with the following code and you might have noticed as I'm writing it I'm including the argument theme within the blocks method so gradio actually allows you to customize dashboards to an extent with a bunch of different themes so before we go any further let's quickly go and have a look at what they are so we can see that we are on the theming guide page within the gradio documentation and if we scroll down a bit we can see that these are all the themes that are available so they range from themes that are very simple up to themes that are a bit more bright and a bit more colorful like the Citrus theme so I specifically chose the glass theme because when I messed around with the different themes this really felt like the most you know the most dignified something you might want for a book recommender but depending on your purpose you might want something very simple very soft very bright so you can just play around with these so continuing on with our dashboard we can see that the first thing we include is this markdown element and this is going to be the title of our dashboard so this will appear at the top and it'll tell people what our dashboard is about so we will call it semantic book recommender so now we're going to create the part of our dashboard that our users will be interacting with so this is going to first contain our user query and we'll represent this as a text box we're going to give it the description to please enter a description of a book and we can actually add a placeholder which is really cool to give them an idea of what sort of things they can actually query so let's say we put for example a story about forgiveness then what we're going to do is we're going to add dropdowns for both category and tone so let's first have a look at the code for the category dropdown so we use this dropdown method and what we do is we assign the choices by assigning that list with all the categories and again we can add a label and we can make the default value all and so we do the exact same thing with the tone drop down and then finally we need to add a button so people can get their recommendations we use the button method to do that and again we can label that so what we're now going to be doing is adding the functionality to display the recommendations so again we use that markdown method and we give it the subtitle recommendations and we're going to displaying it as a gallery so this is going to be a really nice way to Showcase all of those nice thumbnails of the books that we prepared and what you might have noticed is I've made it size of column 8 with two rows this is why we have a maximum of 16 recommendations that are returned after filtering and then finally we need to tell gradio what to do when users click that submit button so what we tell gradio to do is to execute the function recommend books take as the inputs the user query the category dropdown and the tone dropdown and to Output whatever comes out of that recommend books function and then finally of course we create our main method and from there we can execute the script so as you can see this is rebuilding the vector database from scratch we can of course just save this Vector database cuz we don't really need to recreate it each time and that means that it's going to be a lot faster for our dashboard to start and then finally our dashboard is launched so let's go ahead and have a look so here's our gradio dashboard so here are all the elements that I described we were creating when we were coding it up we can see our text box where our user can enter their query with that placeholder that we designed we can see our two dropdowns with category and emotional tone so let's go ahead and do our first query and let's make it pretty broad let's say a book about World War I so when we click find recommendations we get back that really nice Gallery with all of the different thumbnails and you can see the cover not found popping up a couple of times and if we go ahead and click on the first of the books we can see that c that we created being displayed down the bottom so you can see why I needed to truncate the description there's not very much space and if we just go clicking through down the bottom we can actually scroll through the gallery this way or scroll through it on the main screen so let's now try our category filter and let's filter this down to fiction books and you can see that this has eliminated a lot of books that were about World War I but we're not actually fiction stories so let's now try sorting these books based on their emotional tone and well we're talking about stories about World War I so they're probably going to be sad so let's try sorting on that and basically what we can see is the top recommended one is this Virginia Wolf book so this is what our recommender has come up with but searching for books about World War I is pretty straightforward so let's put our semantic recommender to the test and let's try something a little more nuanced so let's say a story about a troubled family set across many generations so looking at this second result we can see you know pretty good so the description is a young Widow raising two boys Sarah Laden is struggling to keep her family together when a shocking Revelation rips apart the family of her closest friend you know looks pretty relevant this one here also looks pretty good Bry Ashley knows that her family's Grand estate is both hell and Paradise once elegant and beautiful yet myed in debt and shrouded in shadow looks pretty troubled to me and deals with this sort of generational family issues and actually if we go ahead and we sort this list of recommendations based on how suspenseful they are this one actually comes up at the top so that seems pretty consistent like this book seemed like it was probably going to be like good mystery as well as a family generational drama and this brings us to the end of Outro the tutorial thank you so much for completing it with me and I hope you've enjoyed it so let's end with a quick recap in the course of this tutorial we've covered a lot of different topics in modern natural language processing the core of this tutorial was of course large language models and I hope you've ended this tutorial with an understanding of how these important models work as well as how flexible their applications can be for solving natural language problems we've also seen the current state of the development ecosystem around llms and we've seen how getting access to and choosing between these models is getting easier and easier we saw how proprietary providers like open AI have their own easyto usee apis to let you access their models and these can be relatively inexpensive depending on the model you use we also saw how hugging face Hub makes it easy to find and choose between open-source large language models and how py charms Integrations with hugging face make make it even easier to do that within your development environment finally userfriendly python packages such as Lang chain and Transformers make it easy to do even relatively complicated tasks like building a vector database with really just a few lines of code so just before we wrap up there are a few things that I wanted to remind you about that I've mentioned throughout this tutorial the first is if you want to get that three Monon free license for py Chon professional make sure you grab the code from the description below if you want to ask me any questions or contact me about this tutorial you can also find my social media links in the description as well and then finally I have shared some further resources in the description if you want to follow up and learn more about this topic after this tutorial so thank you again so much for joining me and I hope you had as much fun as I did I hope you're feeling confident and excited about working with llms after this tutorial and I also hope that you're feeling inspired to learn more about natural language Pro processing it is a very exciting area of data science and there's a whole lot more that obviously I couldn't cover in this tutorial which is waiting for you to learn about please keep in touch I would love to know what you end up building",
    formatted_transcript: [
      {
        start_time: 0,
        end_time: 185000,
        duration: 185000,
        text: "Intro",
      },
      {
        start_time: 399,
        end_time: 5520,
        duration: 5121,
        text: "discover how to build an intelligent book recommendation system using the",
      },
      {
        start_time: 5520,
        end_time: 10800,
        duration: 5280,
        text: "power of large language models and python learn to transform book",
      },
      {
        start_time: 10800,
        end_time: 16358,
        duration: 5558,
        text: "descriptions into mathematical representations that enable precise",
      },
      {
        start_time: 16359,
        end_time: 23400,
        duration: 7041,
        text: "content-based matching by the end of this course you'll have built a recommendation engine that helps readers",
      },
      {
        start_time: 23400,
        end_time: 31480,
        duration: 8080,
        text: "discover their next favorite book Dr jod Bell from jetbrains developed this course jet brains provided a grant to",
      },
      {
        start_time: 31480,
        end_time: 37800,
        duration: 6320,
        text: "make this course possible would you like to get started using large language models for your own project but you",
      },
      {
        start_time: 37800,
        end_time: 42879,
        duration: 5079,
        text: "don't know where to start the technical sounding terms like semantic similarity",
      },
      {
        start_time: 42879,
        end_time: 50239,
        duration: 7360,
        text: "Vector search and zero shot classification the area can feel very unapproachable from the outside however",
      },
      {
        start_time: 50239,
        end_time: 56520,
        duration: 6281,
        text: "in this tutorial I'm going to show you how working with llms is a lot more straightforward than you might think in",
      },
      {
        start_time: 56520,
        end_time: 62280,
        duration: 5760,
        text: "this tutorial I'm going to show you how to build a book recommender using some of the most Cutting Edge techniques in",
      },
      {
        start_time: 62280,
        end_time: 67360,
        duration: 5080,
        text: "natural language processing using llms at almost every stage I'm going to show",
      },
      {
        start_time: 67360,
        end_time: 74520,
        duration: 7160,
        text: "you how to clean and prepare text Data how to use Vector search to find the most similar books to a query how to use",
      },
      {
        start_time: 74520,
        end_time: 82479,
        duration: 7959,
        text: "large language models to find the topic of a book and also how to find the emotional tone of a book using llms then",
      },
      {
        start_time: 82479,
        end_time: 88960,
        duration: 6481,
        text: "finally we're going to bundle all of this up into a dashboard so people can actually get their book recommendations",
      },
      {
        start_time: 88960,
        end_time: 94079,
        duration: 5119,
        text: "before introducing any new Concepts I will take you through a little bit of theory so you can understand what's",
      },
      {
        start_time: 94079,
        end_time: 100360,
        duration: 6281,
        text: "happening under the hood but otherwise this is going to be a very Hands-On code driven tutorial which is going to allow",
      },
      {
        start_time: 100360,
        end_time: 106040,
        duration: 5680,
        text: "you to develop your very own semantic book recommender so in order to get the most out of this course I would",
      },
      {
        start_time: 106040,
        end_time: 111360,
        duration: 5320,
        text: "recommend it for people who have some experience with python and know the basics of machine learning but you don't",
      },
      {
        start_time: 111360,
        end_time: 117399,
        duration: 6039,
        text: "really need to know anything about deep learning or natural language processing in order to follow the materials finally",
      },
      {
        start_time: 117399,
        end_time: 122880,
        duration: 5481,
        text: "I hope you'll be able to see that what we cover in this Tut tutorial has a lot of applications for working with text",
      },
      {
        start_time: 122880,
        end_time: 128840,
        duration: 5960,
        text: "more broadly of course you can take what we learn about building a book recommender and build a recommender for",
      },
      {
        start_time: 128840,
        end_time: 135000,
        duration: 6160,
        text: "anything that involves text things like movies or products but you'll also be able to take the individual components",
      },
      {
        start_time: 135000,
        end_time: 141680,
        duration: 6680,
        text: "things like text cut ification and Vector search and apply them to a wide variety of natural language processing",
      },
      {
        start_time: 141680,
        end_time: 148440,
        duration: 6760,
        text: "projects before we get started I'd also like to briefly introduce myself my name is Jody Burell and I've been working as",
      },
      {
        start_time: 148440,
        end_time: 154480,
        duration: 6040,
        text: "a data scientist particularly in the area of natural language processing for almost 10 years now I'm currently",
      },
      {
        start_time: 154480,
        end_time: 159879,
        duration: 5399,
        text: "working at jetbrains a company well known for creating development tools and we're going to be seeing one of those",
      },
      {
        start_time: 159879,
        end_time: 166319,
        duration: 6440,
        text: "tools today pycharm which is an IDE which has some really great features for working with data science projects and",
      },
      {
        start_time: 166319,
        end_time: 173319,
        duration: 7000,
        text: "also working with large language models if you'd like to reach out with some questions or comments about this tutorial my social media links are in",
      },
      {
        start_time: 173319,
        end_time: 178800,
        duration: 5481,
        text: "the description of this video and I'm also going to share some other content you might find interesting in the area",
      },
      {
        start_time: 178800,
        end_time: 185599,
        duration: 6799,
        text: "of natural language process processing that I've also created with all of that covered let's get started so we're going",
      },
      {
        start_time: 185000,
        end_time: 351000,
        duration: 166000,
        text: "Introduction to getting and preparing text data",
      },
      {
        start_time: 185599,
        end_time: 191480,
        duration: 5881,
        text: "to start this project in the exact same place that we start any data science project and that is of course by getting",
      },
      {
        start_time: 191480,
        end_time: 199000,
        duration: 7520,
        text: "some data so we're going to be getting data today from one of my favorite sources and this is kaggle data sets so",
      },
      {
        start_time: 199000,
        end_time: 205760,
        duration: 6760,
        text: "kle has this fantastic subsection which posts a whole bunch of really interesting data sets we can get to that",
      },
      {
        start_time: 205760,
        end_time: 211840,
        duration: 6080,
        text: "by going to kaggle.com datasets as you can see here now the",
      },
      {
        start_time: 211840,
        end_time: 217040,
        duration: 5200,
        text: "really interesting thing about this is a lot of these data sets were created by members of the community and they've",
      },
      {
        start_time: 217040,
        end_time: 224840,
        duration: 7800,
        text: "generously uploaded those for all of us to use in our projects and something else you can see is that NLP is one of",
      },
      {
        start_time: 224840,
        end_time: 230200,
        duration: 5360,
        text: "the specific tags so there are a whole bunch of really interesting NLP data",
      },
      {
        start_time: 230200,
        end_time: 237280,
        duration: 7080,
        text: "sets you can see these here we of course want to do something very specific today we want to have a look at data sets that",
      },
      {
        start_time: 237280,
        end_time: 243840,
        duration: 6560,
        text: "have to do with books so we're just going to click out of that tag and we're going to specifically search for books",
      },
      {
        start_time: 243840,
        end_time: 249200,
        duration: 5360,
        text: "data sets and what we found here is the data set that I have already looked for",
      },
      {
        start_time: 249200,
        end_time: 255959,
        duration: 6759,
        text: "that I want to work with for this project and that's the 7K books data set so if we go to the page of this data set",
      },
      {
        start_time: 255959,
        end_time: 261479,
        duration: 5520,
        text: "and we scroll down to where the data set is described we can see that there are a whole bunch of really interesting",
      },
      {
        start_time: 261479,
        end_time: 267720,
        duration: 6241,
        text: "columns that we can use for our recommender so we have of course the ISBN the book identifier we've got the",
      },
      {
        start_time: 267720,
        end_time: 274520,
        duration: 6800,
        text: "title and subtitle of each book and and who wrote it the authors we've got the categories of the book we've got a",
      },
      {
        start_time: 274520,
        end_time: 280680,
        duration: 6160,
        text: "thumbnail of the front cover that we might be able to use later a description of the book and then additional Fields",
      },
      {
        start_time: 280680,
        end_time: 287160,
        duration: 6480,
        text: "like when it was published and what the rating is so now that we have this lovely data set let's talk about how",
      },
      {
        start_time: 287160,
        end_time: 294199,
        duration: 7039,
        text: "we're going to work with it and the tool we're going to be using to work with this data is py charm so pycharm is an",
      },
      {
        start_time: 294199,
        end_time: 301160,
        duration: 6961,
        text: "all-in-one python IDE and it gives you a huge range of functionality for working with python including in data science",
      },
      {
        start_time: 301160,
        end_time: 307199,
        duration: 6039,
        text: "and as we'll see later specifically for working with large language models so if you want to follow along",
      },
      {
        start_time: 307199,
        end_time: 313120,
        duration: 5921,
        text: "with me and have all of the same functionality that I do you can of course download a copy of pycharm if you",
      },
      {
        start_time: 313120,
        end_time: 318240,
        duration: 5120,
        text: "don't have it already so just pop over to the pycharm landing page at Jet",
      },
      {
        start_time: 318240,
        end_time: 324639,
        duration: 6399,
        text: "brains.com slpy charmd datascience and you'll see we have the button here to",
      },
      {
        start_time: 324639,
        end_time: 331360,
        duration: 6721,
        text: "download it now for viewers of this video we're actually offering an extended 3-month trial of pycharm",
      },
      {
        start_time: 331360,
        end_time: 337240,
        duration: 5880,
        text: "professional so if you pop down to the description section you'll see that promo code there and then if you pop",
      },
      {
        start_time: 337240,
        end_time: 342319,
        duration: 5079,
        text: "over to Jet brains.com st/ redeem you'll see you have the",
      },
      {
        start_time: 342319,
        end_time: 349280,
        duration: 6961,
        text: "option to redeem it there so if you don't already have py charm and you want to follow along just pause this video go",
      },
      {
        start_time: 349280,
        end_time: 356039,
        duration: 6759,
        text: "do that and then we'll get started in the next section so once we've installed pie charm we can of course open it just",
      },
      {
        start_time: 351000,
        end_time: 1019000,
        duration: 668000,
        text: "Starting a new PyCharm project",
      },
      {
        start_time: 356039,
        end_time: 364720,
        duration: 8681,
        text: "by clicking on the icon in the dock here on Mac and what you can see is this then lands us on the welcoming screen so py",
      },
      {
        start_time: 364720,
        end_time: 370599,
        duration: 5879,
        text: "ch's welcome screen shows you the most recent projects that you've worked on and it also gives you a quick way of",
      },
      {
        start_time: 370599,
        end_time: 376479,
        duration: 5880,
        text: "either starting a new project or even just quickly starting a new notebook or a new script you want to get started a",
      },
      {
        start_time: 376479,
        end_time: 381800,
        duration: 5321,
        text: "little bit faster so we're going to start a new project because we know that we're going to be doing quite a lot of",
      },
      {
        start_time: 381800,
        end_time: 388800,
        duration: 7000,
        text: "work so we click on new project and what this then takes us to is a loading",
      },
      {
        start_time: 388800,
        end_time: 395759,
        duration: 6959,
        text: "screen in order to create this new project and we have a few different options for project types as you can see",
      },
      {
        start_time: 395759,
        end_time: 401479,
        duration: 5720,
        text: "over in the left hand side so because we're working on a Scientific Python",
      },
      {
        start_time: 401479,
        end_time: 406639,
        duration: 5160,
        text: "project a Jupiter based project we do have the option of creating a Jupiter",
      },
      {
        start_time: 406639,
        end_time: 413400,
        duration: 6761,
        text: "based project and what this does is default to an anaconda interpreter and",
      },
      {
        start_time: 413400,
        end_time: 419000,
        duration: 5600,
        text: "it also gives us you know a bunch of other things that are sort of set up in the project structure like assuming that",
      },
      {
        start_time: 419000,
        end_time: 425360,
        duration: 6360,
        text: "we have and gives us folders for that but I have a preference for using virtual environments so I'm actually",
      },
      {
        start_time: 425360,
        end_time: 431879,
        duration: 6519,
        text: "just going to stick with a pure python project and what you can see is that gives us the option of a few different",
      },
      {
        start_time: 431879,
        end_time: 438240,
        duration: 6361,
        text: "interpreter types so virtual environments anaconda and we can also create other types of",
      },
      {
        start_time: 438240,
        end_time: 443440,
        duration: 5200,
        text: "interpreters so just leaving it as the default for uh virtual environment and",
      },
      {
        start_time: 443440,
        end_time: 450520,
        duration: 7080,
        text: "now I'm going to name that project and we're going to call it book recommender big surprise and then once I've given it",
      },
      {
        start_time: 450520,
        end_time: 458000,
        duration: 7480,
        text: "a name we can just click create and it will go ahead and make that project for us so pycharm has now gone ahead and",
      },
      {
        start_time: 458000,
        end_time: 464919,
        duration: 6919,
        text: "created that new project for us and if we go down to the right hand corner we can see that it has set up that new",
      },
      {
        start_time: 464919,
        end_time: 471280,
        duration: 6361,
        text: "interpreter for us as requested set up a 311 interpreter for me because that's my system default but you have the option",
      },
      {
        start_time: 471280,
        end_time: 477919,
        duration: 6639,
        text: "to play around with different interpreters uh if you would like when you set up your project and you can also",
      },
      {
        start_time: 477919,
        end_time: 483919,
        duration: 6000,
        text: "see if we go across to this python packages tool window that",
      },
      {
        start_time: 483919,
        end_time: 489639,
        duration: 5720,
        text: "it's set up a fresh virtual environment as requested so we just have the basic packages installed and it's ready for us",
      },
      {
        start_time: 489639,
        end_time: 496199,
        duration: 6560,
        text: "to install our packages so we're now going to use this python packages tool window in order to",
      },
      {
        start_time: 496199,
        end_time: 502520,
        duration: 6321,
        text: "install all of dependencies we need for our project so the first library that we're going to install is called kaggle",
      },
      {
        start_time: 502520,
        end_time: 508879,
        duration: 6359,
        text: "Hub this gives us a really convenient way of interfacing with data that we might want to use from kaggle so rather",
      },
      {
        start_time: 508879,
        end_time: 515560,
        duration: 6681,
        text: "than having to manually download it this gives us a really nice way of managing downloading that data the next we're",
      },
      {
        start_time: 515560,
        end_time: 521080,
        duration: 5520,
        text: "going to install is pandas pandas I think needs no introduction but basically it's going to giv us a really",
      },
      {
        start_time: 521080,
        end_time: 527320,
        duration: 6240,
        text: "convenient way of working with that tabular data that we're going to be downloading from kaggle and then for",
      },
      {
        start_time: 527320,
        end_time: 534320,
        duration: 7000,
        text: "visualization we're going to be using map plot lib and we're also going to be using Seaborn so you can use whatever",
      },
      {
        start_time: 534320,
        end_time: 540920,
        duration: 6600,
        text: "graphing package you like I just have my preferences Seaborn is my favorite and Matt plot lib is a dependency for that",
      },
      {
        start_time: 540920,
        end_time: 548880,
        duration: 7960,
        text: "but you know whatever graphing packages you want to use you can of course use then we're going to also be working",
      },
      {
        start_time: 548880,
        end_time: 554040,
        duration: 5160,
        text: "with some credentials um we're going to be working with some models from open Ai",
      },
      {
        start_time: 554040,
        end_time: 559160,
        duration: 5120,
        text: "and that's going to require an API key so a nice package that I found for",
      },
      {
        start_time: 559160,
        end_time: 566720,
        duration: 7560,
        text: "working with this is called python. so that's the next thing we're going to install and then we need some packages",
      },
      {
        start_time: 566720,
        end_time: 574040,
        duration: 7320,
        text: "for working with large language models so the first of these is a framework called Lang chain and we're going to go",
      },
      {
        start_time: 574040,
        end_time: 579200,
        duration: 5160,
        text: "into this a bit more in the next section but Lang chain is essentially a",
      },
      {
        start_time: 579200,
        end_time: 586640,
        duration: 7440,
        text: "collection of packages which is designed for doing all sorts of stuff for working with large language models so Lang chain",
      },
      {
        start_time: 586640,
        end_time: 593040,
        duration: 6400,
        text: "is going to be really useful for when we need to create the recommender we're going to see how to use that again as I",
      },
      {
        start_time: 593040,
        end_time: 598519,
        duration: 5479,
        text: "said more in the next section the Lang chain is basically broken down into a number of different packages we're going",
      },
      {
        start_time: 598519,
        end_time: 604720,
        duration: 6201,
        text: "to be installing three we're going to be installing one called Lang chain Community we're also going to be",
      },
      {
        start_time: 604720,
        end_time: 611240,
        duration: 6520,
        text: "installing one called Lang chain open AI for working with open AI model as I said",
      },
      {
        start_time: 611240,
        end_time: 618040,
        duration: 6800,
        text: "and then we're also going to be installing one called Lang chain chroma and this is for working with a V",
      },
      {
        start_time: 618040,
        end_time: 624279,
        duration: 6239,
        text: "database so having installed all of these we can move on to our last few packages the next important package for",
      },
      {
        start_time: 624279,
        end_time: 629560,
        duration: 5281,
        text: "working with large language models is Transformers and Transformers is a",
      },
      {
        start_time: 629560,
        end_time: 636480,
        duration: 6920,
        text: "really powerful package from hugging face which is designed for working with open source large language models and",
      },
      {
        start_time: 636480,
        end_time: 643360,
        duration: 6880,
        text: "again later in this video we're going to see more of how you can work with Transformers but this is a very powerful package as well and gives you a lot of",
      },
      {
        start_time: 643360,
        end_time: 649839,
        duration: 6479,
        text: "options working with llms we are also going to be presenting our results or um",
      },
      {
        start_time: 649839,
        end_time: 655240,
        duration: 5401,
        text: "allowing people to interact with our recommender through a dashboard so we're going to be using a framework called",
      },
      {
        start_time: 655240,
        end_time: 660760,
        duration: 5520,
        text: "gradio for that and we're just going to install this here and then finally of",
      },
      {
        start_time: 660760,
        end_time: 668600,
        duration: 7840,
        text: "course we're working with a jupyter notebook so we're going to go ahead and install Jupiter and also iPie widgets so",
      },
      {
        start_time: 668600,
        end_time: 674120,
        duration: 5520,
        text: "that's everything we've set up all of our dependencies for this project if you're following along you can also",
      },
      {
        start_time: 674120,
        end_time: 679720,
        duration: 5600,
        text: "install these here at this stage and you know that means that the Project's going to run smoothly for you as we work",
      },
      {
        start_time: 679720,
        end_time: 684880,
        duration: 5160,
        text: "through the tutorial so with all of that set up we are finally ready to start working with",
      },
      {
        start_time: 684880,
        end_time: 691560,
        duration: 6680,
        text: "our data so first things first we're going to create a fresh duper notebook so we do this by right clicking on the",
      },
      {
        start_time: 691560,
        end_time: 696639,
        duration: 5079,
        text: "project name going to new and going to Jupiter notebook and this is going to",
      },
      {
        start_time: 696639,
        end_time: 703920,
        duration: 7281,
        text: "open up a new Jupiter notebook for us and remember I mentioned that we were downloading the kaggle Hub library and",
      },
      {
        start_time: 703920,
        end_time: 711320,
        duration: 7400,
        text: "you may be wondering what we were going to use that for well if we go back to the page where our data set is on kagle",
      },
      {
        start_time: 711320,
        end_time: 716839,
        duration: 5519,
        text: "and we go to this download button in the right top Corner what we can see is that",
      },
      {
        start_time: 716839,
        end_time: 723440,
        duration: 6601,
        text: "it actually gives us this ability to download using this kaggle Hub package and it gives us some template python",
      },
      {
        start_time: 723440,
        end_time: 730040,
        duration: 6600,
        text: "code that we can use so we copy that code go back over to our jupyter notebook and paste that in what we can",
      },
      {
        start_time: 730040,
        end_time: 738160,
        duration: 8120,
        text: "see is that it's given us a path where it's automatically in the background downloaded that data for us so let's now",
      },
      {
        start_time: 738160,
        end_time: 744880,
        duration: 6720,
        text: "explore this directory that kaggle Hub has created for us so let's copy this path and we're going to open a new",
      },
      {
        start_time: 744880,
        end_time: 750120,
        duration: 5240,
        text: "terminal window and within that terminal we're going to navigate to that",
      },
      {
        start_time: 750120,
        end_time: 757000,
        duration: 6880,
        text: "directory and if we use LS to have a look at what's in that directory we can see that what kle Hub has downloaded for",
      },
      {
        start_time: 757000,
        end_time: 762760,
        duration: 5760,
        text: "us is one file books. CSV and this is our entire data set so this actually",
      },
      {
        start_time: 762760,
        end_time: 769639,
        duration: 6879,
        text: "makes life easier for us because we don't need to merge or combine anything so now that we have the location of the",
      },
      {
        start_time: 769639,
        end_time: 775880,
        duration: 6241,
        text: "data we can read it into pandas so of course we import pandas as PD and then",
      },
      {
        start_time: 775880,
        end_time: 782880,
        duration: 7000,
        text: "what we do is we use the pandas read CS B uh method we're going to change that",
      },
      {
        start_time: 782880,
        end_time: 788560,
        duration: 5680,
        text: "into an F string and then what we're going to do is insert that path and",
      },
      {
        start_time: 788560,
        end_time: 794440,
        duration: 5880,
        text: "combine that with the book CSV file so once we do that we can have a look at",
      },
      {
        start_time: 794440,
        end_time: 800560,
        duration: 6120,
        text: "our file and voila we can see that exact data that we saw on kaggle read into a",
      },
      {
        start_time: 800560,
        end_time: 806120,
        duration: 5560,
        text: "panda's data frame and ready for us to work with so I think all of the hype around large language models has sort of",
      },
      {
        start_time: 806120,
        end_time: 813079,
        duration: 6959,
        text: "given the impression that working with Text data or or these NLP projects are really distinct from other types of data",
      },
      {
        start_time: 813079,
        end_time: 819120,
        duration: 6041,
        text: "science or machine learning work but they're really not they're actually you know they have all of the same problems",
      },
      {
        start_time: 819120,
        end_time: 827240,
        duration: 8120,
        text: "as other type of data science projects and of course what that means is the first step is inspecting the data so",
      },
      {
        start_time: 827240,
        end_time: 833399,
        duration: 6159,
        text: "let's have a look firstly at the data frame that we've just read in and we had a quick look at this when we had a look",
      },
      {
        start_time: 833399,
        end_time: 839800,
        duration: 6401,
        text: "at the kagle page but let's just have a look through it again so what we can see is we've got a number of really useful",
      },
      {
        start_time: 839800,
        end_time: 845120,
        duration: 5320,
        text: "columns we've got our identifiers our ISBN we've got the title and subtitle of",
      },
      {
        start_time: 845120,
        end_time: 850959,
        duration: 5839,
        text: "the book we've got who wrote it and we've got the category of the book and we've got that description field which",
      },
      {
        start_time: 850959,
        end_time: 856920,
        duration: 5961,
        text: "we've already pegged is likely to be pretty much the most useful information we have about the book you know telling",
      },
      {
        start_time: 856920,
        end_time: 861959,
        duration: 5039,
        text: "us why people might like it why we can recommend it then we can see we've got a",
      },
      {
        start_time: 861959,
        end_time: 867759,
        duration: 5800,
        text: "number of other really interesting Fields we've got the year that the book was published we've got the average",
      },
      {
        start_time: 867759,
        end_time: 873399,
        duration: 5640,
        text: "rating we've got the number of pages and we've got the number of ratings so we've got a lot of really good information",
      },
      {
        start_time: 873399,
        end_time: 878440,
        duration: 5041,
        text: "here to start on our project so let's now have a closer look at the data and",
      },
      {
        start_time: 878440,
        end_time: 885000,
        duration: 6560,
        text: "this is usually the stage in any data science project where we'd be writing a bunch of boilerplate code in order to",
      },
      {
        start_time: 885000,
        end_time: 892600,
        duration: 7600,
        text: "get the relevant descriptive statistics but luckily pycharm gives us a way to shortcut this because it is quite boring",
      },
      {
        start_time: 892600,
        end_time: 899600,
        duration: 7000,
        text: "and what we can do is we can use a feature in the interactive data frames called show column statistics so if we",
      },
      {
        start_time: 899600,
        end_time: 905959,
        duration: 6359,
        text: "click on this button what we can see is we have a couple of different options I'm going to pick detailed and what you",
      },
      {
        start_time: 905959,
        end_time: 912320,
        duration: 6361,
        text: "can see is the detailed gives us the relevant statistics for each data type",
      },
      {
        start_time: 912320,
        end_time: 917519,
        duration: 5199,
        text: "above each column so whether it's categorical or continuous so let's have a look at the",
      },
      {
        start_time: 917519,
        end_time: 923600,
        duration: 6081,
        text: "information that this has given us so the first piece of information that jumps out is that we have",
      },
      {
        start_time: 923600,
        end_time: 930199,
        duration: 6599,
        text: "6,810 books and if we have a look at the ISBN 10 column we can actually see that",
      },
      {
        start_time: 930199,
        end_time: 936040,
        duration: 5841,
        text: "these are distinct so we have all of these entries are unique and it means",
      },
      {
        start_time: 936040,
        end_time: 942839,
        duration: 6799,
        text: "we're not going to need to do any duplication the second thing that jumps out is if we go over to the subtitle",
      },
      {
        start_time: 942839,
        end_time: 949440,
        duration: 6601,
        text: "column we can see that it has a lot of missing observations so probably 2/3 of",
      },
      {
        start_time: 949440,
        end_time: 956000,
        duration: 6560,
        text: "the observations are missing and this really makes this column useless in and of itself we can't really use it by",
      },
      {
        start_time: 956000,
        end_time: 961160,
        duration: 5160,
        text: "itself so we're going to have to get creative and think about how we might be able to use it if we want to keep hold",
      },
      {
        start_time: 961160,
        end_time: 967199,
        duration: 6039,
        text: "of that information the next thing that we can notice is with the categories column if",
      },
      {
        start_time: 967199,
        end_time: 972600,
        duration: 5401,
        text: "we have a look at the number of distinct observations there are a lot of",
      },
      {
        start_time: 972600,
        end_time: 978279,
        duration: 5679,
        text: "different categories and we've already kind of seen that you know if you actually look at the column you can see",
      },
      {
        start_time: 978279,
        end_time: 984399,
        duration: 6120,
        text: "that it has really useless looking categories like hland horn these are not",
      },
      {
        start_time: 984399,
        end_time: 989600,
        duration: 5201,
        text: "really useful categories so we're probably going to need to C clean this",
      },
      {
        start_time: 989600,
        end_time: 995040,
        duration: 5440,
        text: "and standardize it in some way in order to make it useful because you know we potentially want to use it as part of",
      },
      {
        start_time: 995040,
        end_time: 1000360,
        duration: 5320,
        text: "our recommender and we don't want to have hundreds of different categories for people to pick",
      },
      {
        start_time: 1000360,
        end_time: 1006279,
        duration: 5919,
        text: "from and then finally let's have a look at our most important column the description column and we can see that",
      },
      {
        start_time: 1006279,
        end_time: 1011440,
        duration: 5161,
        text: "we only have description missing for around 4% of books so this is pretty",
      },
      {
        start_time: 1011440,
        end_time: 1017839,
        duration: 6399,
        text: "good but we should do some deeper investigation just to check whether you know this missingness is not biased in",
      },
      {
        start_time: 1017839,
        end_time: 1024678,
        duration: 6839,
        text: "some way so it's really important to check whether missing values have a pattern",
      },
      {
        start_time: 1019000,
        end_time: 1521000,
        duration: 502000,
        text: "Patterns of missing data",
      },
      {
        start_time: 1024679,
        end_time: 1031079,
        duration: 6400,
        text: "because this can imply some sort of bias if you find that the missing values are linked to particular characteristics",
      },
      {
        start_time: 1031079,
        end_time: 1036319,
        duration: 5240,
        text: "about say the books that we have in our data set so my favorite way of doing",
      },
      {
        start_time: 1036319,
        end_time: 1041480,
        duration: 5161,
        text: "this is by creating a missingness heat map using cabor this is pretty easy to",
      },
      {
        start_time: 1041480,
        end_time: 1049000,
        duration: 7520,
        text: "create so of course first thing we need to do is import our dependency so we import caborn and we import map plot lab",
      },
      {
        start_time: 1049000,
        end_time: 1056520,
        duration: 7520,
        text: "pip plot and then once we've done that we instantiate our map plot lib plot and",
      },
      {
        start_time: 1056520,
        end_time: 1063640,
        duration: 7120,
        text: "then what we do is we tell map plot lib that that is going to be a Seaborn heat",
      },
      {
        start_time: 1063640,
        end_time: 1070400,
        duration: 6760,
        text: "map and we're going to change this so it is a heat map which documents all of the",
      },
      {
        start_time: 1070400,
        end_time: 1077640,
        duration: 7240,
        text: "different missing values the is na values and we're going to transpose that just to make it a bit nicer for the",
      },
      {
        start_time: 1077640,
        end_time: 1083480,
        duration: 5840,
        text: "display now now that we've done that we are going to add some labels so we're",
      },
      {
        start_time: 1083480,
        end_time: 1091320,
        duration: 7840,
        text: "going to add the X label columns so that's all of our fields or our variables in our data set and we are",
      },
      {
        start_time: 1091320,
        end_time: 1098600,
        duration: 7280,
        text: "also going to add a y label for the missing values and then we just need to display that plot so this gives us a",
      },
      {
        start_time: 1098600,
        end_time: 1106039,
        duration: 7439,
        text: "really interesting picture what you can see is that you know as we saw in the descriptive statistics subtitle is",
      },
      {
        start_time: 1106039,
        end_time: 1112000,
        duration: 5961,
        text: "mostly missing so we can kind of write that variable off thought you already knew that we can see that for the middle",
      },
      {
        start_time: 1112000,
        end_time: 1118360,
        duration: 6360,
        text: "variables so categories thumbnails and description it's mostly looking random",
      },
      {
        start_time: 1118360,
        end_time: 1125520,
        duration: 7160,
        text: "but if we look at the three bottom variables average rating number of pages and rating count we can see that there's",
      },
      {
        start_time: 1125520,
        end_time: 1131799,
        duration: 6279,
        text: "actually a clear pattern here that observations that have one of them missing have all of them missing so what",
      },
      {
        start_time: 1131799,
        end_time: 1137320,
        duration: 5521,
        text: "we can kind of conclude from this is that these are probably from another",
      },
      {
        start_time: 1137320,
        end_time: 1142880,
        duration: 5560,
        text: "data set and that data set didn't contain all of the books in the bigger",
      },
      {
        start_time: 1142880,
        end_time: 1148600,
        duration: 5720,
        text: "books data set so this may potentially be a source of bias because maybe the",
      },
      {
        start_time: 1148600,
        end_time: 1154320,
        duration: 5720,
        text: "books that are missing are you know missing because they're newer or because",
      },
      {
        start_time: 1154320,
        end_time: 1160039,
        duration: 5719,
        text: "they have other characteristics maybe they are better rated or Worse rated so",
      },
      {
        start_time: 1160039,
        end_time: 1165159,
        duration: 5120,
        text: "this is something that we're going to check out next so the final thing we're going to do with missingness is we're",
      },
      {
        start_time: 1165159,
        end_time: 1171200,
        duration: 6041,
        text: "going to take a closer look at those books where the description is missing and this is really important because",
      },
      {
        start_time: 1171200,
        end_time: 1177039,
        duration: 5839,
        text: "this is really the core field that we're going to be using for all the natural language processing work going forward",
      },
      {
        start_time: 1177039,
        end_time: 1183039,
        duration: 6000,
        text: "so it's important to know whether there's any bias in the type of descriptions that we have missing because we're going to be getting rid of",
      },
      {
        start_time: 1183039,
        end_time: 1190360,
        duration: 7321,
        text: "these books and we need to know whether our recommender will then skew towards certain types of books so we have these",
      },
      {
        start_time: 1190360,
        end_time: 1196880,
        duration: 6520,
        text: "really nice descriptive fields we have the year that the book was published we have the number of pages that the book",
      },
      {
        start_time: 1196880,
        end_time: 1203120,
        duration: 6240,
        text: "has and we have the average rate of the book so we can use this to deduce things like you know our books that have",
      },
      {
        start_time: 1203120,
        end_time: 1209559,
        duration: 6439,
        text: "missing descriptions more likely to be older or more likely to be shorter so in order to do this the first thing we're",
      },
      {
        start_time: 1209559,
        end_time: 1215559,
        duration: 6000,
        text: "going to do is create a numeric representation of which books are missing so we're going to use nump wear",
      },
      {
        start_time: 1215559,
        end_time: 1222280,
        duration: 6721,
        text: "method and what we're doing is basically saying books where the description is missing put a one in that column if but",
      },
      {
        start_time: 1222280,
        end_time: 1229240,
        duration: 6960,
        text: "it's not missing put a zero then what I'm going to do is convert the year of the book into the age of the book so",
      },
      {
        start_time: 1229240,
        end_time: 1234919,
        duration: 5679,
        text: "we're going to take the year 2024 and subtract that book year and let's run",
      },
      {
        start_time: 1234919,
        end_time: 1241919,
        duration: 7000,
        text: "that now we can see that we've made a mistake with the name of the variable so let's just correct that and run it again",
      },
      {
        start_time: 1241919,
        end_time: 1248679,
        duration: 6760,
        text: "and that's worked now what we do is we create a list with just the subset of columns that we want from our book's",
      },
      {
        start_time: 1248679,
        end_time: 1255880,
        duration: 7201,
        text: "data set so we want the number of pages we want the age of the book we want the missing description and we want the",
      },
      {
        start_time: 1255880,
        end_time: 1263320,
        duration: 7440,
        text: "average rating then what we do do is we basically create a correlation Matrix",
      },
      {
        start_time: 1263320,
        end_time: 1269159,
        duration: 5839,
        text: "directly off the Panda's data frame using just those columns and you can see",
      },
      {
        start_time: 1269159,
        end_time: 1275080,
        duration: 5921,
        text: "I've changed it to Method equals Spearman rather than Pearson just as an aside if you're interested in the",
      },
      {
        start_time: 1275080,
        end_time: 1280360,
        duration: 5280,
        text: "statistics behind this peeron correlations are more appropriate when you're dealing with completely",
      },
      {
        start_time: 1280360,
        end_time: 1285600,
        duration: 5240,
        text: "continuous variables but as you can see the missing description field is binary",
      },
      {
        start_time: 1285600,
        end_time: 1292559,
        duration: 6959,
        text: "so Spearman is just a more appropriate correlation coefficient when you're dealing with non-continuous",
      },
      {
        start_time: 1292559,
        end_time: 1301520,
        duration: 8961,
        text: "values okay so we have our correlation Matrix now what we're going to do is convert that into a caborn heat map so",
      },
      {
        start_time: 1301520,
        end_time: 1308840,
        duration: 7320,
        text: "basically we set up the theme and the figure and then what we do is we create",
      },
      {
        start_time: 1308840,
        end_time: 1314600,
        duration: 5760,
        text: "the heat map pass over the correlation Matrix put in some you know formatting",
      },
      {
        start_time: 1314600,
        end_time: 1321159,
        duration: 6559,
        text: "things such as you know the number of decimal places the color scheme and also",
      },
      {
        start_time: 1321159,
        end_time: 1327880,
        duration: 6721,
        text: "the labeling we set the title of that heat map and then we show it so let's",
      },
      {
        start_time: 1327880,
        end_time: 1334640,
        duration: 6760,
        text: "now have a closer look at this heat map and really what we're interested in as I said is this missing description",
      },
      {
        start_time: 1334640,
        end_time: 1341279,
        duration: 6639,
        text: "correlation with the other variables we want to know whether any of these variables have a high correlation with",
      },
      {
        start_time: 1341279,
        end_time: 1346760,
        duration: 5481,
        text: "missing description and the reason we want to know this is say number of pages",
      },
      {
        start_time: 1346760,
        end_time: 1352279,
        duration: 5519,
        text: "was correlated with missing description it would indicate that either longer books or shorter books had a missing",
      },
      {
        start_time: 1352279,
        end_time: 1358080,
        duration: 5801,
        text: "description and as you'll see we're not going to use the books that have a missing description so it means that our",
      },
      {
        start_time: 1358080,
        end_time: 1364200,
        duration: 6120,
        text: "recommender may be biased towards shorter or longer books same as with the age of the book and with the average",
      },
      {
        start_time: 1364200,
        end_time: 1370240,
        duration: 6040,
        text: "rating but if we have a look at these values you can see that they're really not very strong and just to kind of give",
      },
      {
        start_time: 1370240,
        end_time: 1375799,
        duration: 5559,
        text: "some context for those of you who are not used to interpreting correlation coefficients anything that's close to",
      },
      {
        start_time: 1375799,
        end_time: 1381279,
        duration: 5480,
        text: "one or minus one is a really strong correlation anything that's closer to zero is a very",
      },
      {
        start_time: 1381279,
        end_time: 1387120,
        duration: 5841,
        text: "weak correlation indicates there's not really a relationship so you can see there's nothing really there and what",
      },
      {
        start_time: 1387120,
        end_time: 1393240,
        duration: 6120,
        text: "this gives us is a bit of confidence that at least in terms of these Dimensions our book descriptions are",
      },
      {
        start_time: 1393240,
        end_time: 1400080,
        duration: 6840,
        text: "pretty representative so we're going to have a pretty good range of older books of books with a good range of ratings",
      },
      {
        start_time: 1400080,
        end_time: 1406320,
        duration: 6240,
        text: "and good range of lengths in terms of what we can give our um users of our",
      },
      {
        start_time: 1406320,
        end_time: 1413559,
        duration: 7239,
        text: "recommender so because we have a small number of observations with missing values because you know there doesn't",
      },
      {
        start_time: 1413559,
        end_time: 1419320,
        duration: 5761,
        text: "really seem to be a pattern in terms of the missingness and because replacing these descriptions is going to be a pain",
      },
      {
        start_time: 1419320,
        end_time: 1424640,
        duration: 5320,
        text: "in the butt it's probably going to involve a lot of web scraping to retrieve the actual description I think",
      },
      {
        start_time: 1424640,
        end_time: 1430039,
        duration: 5399,
        text: "it's safe for us to just delete those observations with missing values so",
      },
      {
        start_time: 1430039,
        end_time: 1436919,
        duration: 6880,
        text: "first things first let's do our due diligence and find out how many books that's going to cost us so what we can",
      },
      {
        start_time: 1436919,
        end_time: 1442400,
        duration: 5481,
        text: "do is do a bit of conditional logic using pandas and what we want to know is",
      },
      {
        start_time: 1442400,
        end_time: 1449120,
        duration: 6720,
        text: "those books that are going to have a missing description that are going to have missing number of pages a missing",
      },
      {
        start_time: 1449120,
        end_time: 1456159,
        duration: 7039,
        text: "average rating and also a missing published year so you can see this conditional logic is basically saying if",
      },
      {
        start_time: 1456159,
        end_time: 1462640,
        duration: 6481,
        text: "it is missing in description or it's missing in number of pages etc etc",
      },
      {
        start_time: 1462640,
        end_time: 1469000,
        duration: 6360,
        text: "please fetch me all of those observations so we look at the resulting data frame what we can see is this",
      },
      {
        start_time: 1469000,
        end_time: 1475840,
        duration: 6840,
        text: "consists of 303 rows which given the size of our data set this is well under",
      },
      {
        start_time: 1475840,
        end_time: 1481520,
        duration: 5680,
        text: "5% so we can definitely go ahead and get rid of these observations and not stress",
      },
      {
        start_time: 1481520,
        end_time: 1488880,
        duration: 7360,
        text: "too much so let's now create a new data frame which is going to remove these",
      },
      {
        start_time: 1488880,
        end_time: 1495360,
        duration: 6480,
        text: "missing observations so we're going to call it book missing and we're just going to modify this conditional logic",
      },
      {
        start_time: 1495360,
        end_time: 1500840,
        duration: 5480,
        text: "so that it is the opposite of what we created we want to keep all of these",
      },
      {
        start_time: 1500840,
        end_time: 1505960,
        duration: 5120,
        text: "observations that don't have these fields missing so what we'll do is add a",
      },
      {
        start_time: 1505960,
        end_time: 1515120,
        duration: 9160,
        text: "negation to the front of each of the conditions and we'll just change those oros to ANS and voila we have our new",
      },
      {
        start_time: 1515120,
        end_time: 1520279,
        duration: 5159,
        text: "data frame which has only those books that have all of those fields with",
      },
      {
        start_time: 1520279,
        end_time: 1525640,
        duration: 5361,
        text: "complete values so the next thing we're going to do is revisit that categories field and",
      },
      {
        start_time: 1521000,
        end_time: 1707000,
        duration: 186000,
        text: "Checking the number of categories",
      },
      {
        start_time: 1525640,
        end_time: 1532120,
        duration: 6480,
        text: "just to remind you the problem we had with the categories Feld field is it just had way too many distinct values so",
      },
      {
        start_time: 1532120,
        end_time: 1538320,
        duration: 6200,
        text: "it's kind of unusable in its current form so first things first let's enable the column statistics again and check",
      },
      {
        start_time: 1538320,
        end_time: 1545240,
        duration: 6920,
        text: "what it looks like after we deleted the missing observations and we can see that well it's still a mess we still have",
      },
      {
        start_time: 1545240,
        end_time: 1551559,
        duration: 6319,
        text: "over 500 different categories but it probably wasn't going to solve the problem because we only deleted 300 or",
      },
      {
        start_time: 1551559,
        end_time: 1558720,
        duration: 7161,
        text: "so observations so let's just have a look at the type of categories that we have",
      },
      {
        start_time: 1558720,
        end_time: 1564440,
        duration: 5720,
        text: "and we can see you know there are some that are very very specific like Highland mour I'm guessing that this is",
      },
      {
        start_time: 1564440,
        end_time: 1571000,
        duration: 6560,
        text: "probably one of the characters in the book and this is just so specific no one's going to use this as a",
      },
      {
        start_time: 1571000,
        end_time: 1577960,
        duration: 6960,
        text: "category so let's have a closer look at the distribution of categories and so",
      },
      {
        start_time: 1577960,
        end_time: 1583520,
        duration: 5560,
        text: "the way we can do this is by taking the value counts of each of the categories",
      },
      {
        start_time: 1583520,
        end_time: 1589919,
        duration: 6399,
        text: "and I'm just going to add a bit more code just to make this a bit easier for us to visual ual so I'm going to reset",
      },
      {
        start_time: 1589919,
        end_time: 1595480,
        duration: 5561,
        text: "the index so that all of the categories are put back into a column and I'm going",
      },
      {
        start_time: 1595480,
        end_time: 1602440,
        duration: 6960,
        text: "to sort the values by count and I'm going to sort it by descending so what we have is basically the categories that",
      },
      {
        start_time: 1602440,
        end_time: 1607799,
        duration: 5359,
        text: "are most popular at the top and those that are the least popular at the bottom",
      },
      {
        start_time: 1607799,
        end_time: 1614679,
        duration: 6880,
        text: "so we look at the resulting table you can already see we really have a very uneven distribution of categories so",
      },
      {
        start_time: 1614679,
        end_time: 1620919,
        duration: 6240,
        text: "fiction is the most popular juvenile fiction is next and then it just sort of keeps going down into more and more",
      },
      {
        start_time: 1620919,
        end_time: 1626120,
        duration: 5201,
        text: "specific Fields but to really get a handle on how uneven this distribution",
      },
      {
        start_time: 1626120,
        end_time: 1634279,
        duration: 8159,
        text: "is let's visualize it so we visualize it as essentially a bar chart showing the counts of each of these and so we can",
      },
      {
        start_time: 1634279,
        end_time: 1640120,
        duration: 5841,
        text: "use this really handy function that belongs to data frames inside pie charm",
      },
      {
        start_time: 1640120,
        end_time: 1649039,
        duration: 8919,
        text: "so we go up to this button and click chart view what we then switch over is to a no code panel that allow us to do",
      },
      {
        start_time: 1649039,
        end_time: 1654200,
        duration: 5161,
        text: "visualizations directly off the data frame without having to write any code",
      },
      {
        start_time: 1654200,
        end_time: 1662360,
        duration: 8160,
        text: "so if we go over to the settings what we can do is change the Y AIS to count and",
      },
      {
        start_time: 1662360,
        end_time: 1667840,
        duration: 5480,
        text: "then we can change the type of chart to bar and this gives us a really good",
      },
      {
        start_time: 1667840,
        end_time: 1674200,
        duration: 6360,
        text: "indication of just how uneven that distribution is so we can see that if we",
      },
      {
        start_time: 1674200,
        end_time: 1680760,
        duration: 6560,
        text: "hover over it it really doesn't take very long until we start getting to categories that only have one or two",
      },
      {
        start_time: 1680760,
        end_time: 1687679,
        duration: 6919,
        text: "actual books contained within them so this shows us really we have a longtail problem with book category and we really",
      },
      {
        start_time: 1687679,
        end_time: 1694880,
        duration: 7201,
        text: "really need to focus on how we're going to normalize that so that's actually going to be one of the sections of this",
      },
      {
        start_time: 1694880,
        end_time: 1703039,
        duration: 8159,
        text: "video I'm going to show you how to do this using large language models and this will be a way of introducing you to",
      },
      {
        start_time: 1703039,
        end_time: 1709039,
        duration: 6000,
        text: "text classification and how you can do this using very modern tools so the final thing that we're going to do in",
      },
      {
        start_time: 1707000,
        end_time: 2076000,
        duration: 369000,
        text: "Remove short descriptions",
      },
      {
        start_time: 1709039,
        end_time: 1714840,
        duration: 5801,
        text: "terms of cleaning and screening this data is just having a closer look at that descriptions category and seeing",
      },
      {
        start_time: 1714840,
        end_time: 1720120,
        duration: 5280,
        text: "whether there's a way to potentially refine it a bit more so the really important thing about the descriptions",
      },
      {
        start_time: 1720120,
        end_time: 1727120,
        duration: 7000,
        text: "category is that it needs to be meaningful it needs to contain enough information about what the book is about",
      },
      {
        start_time: 1727120,
        end_time: 1733720,
        duration: 6600,
        text: "so that we can recommend it because if it's not in the description it's not going to be anywhere so let's have a",
      },
      {
        start_time: 1733720,
        end_time: 1739320,
        duration: 5600,
        text: "look at our new data frame the book missing one and if we scroll over to the",
      },
      {
        start_time: 1739320,
        end_time: 1744840,
        duration: 5520,
        text: "description column what we can see immediately in the top 10 is a",
      },
      {
        start_time: 1744840,
        end_time: 1750840,
        duration: 6000,
        text: "completely useless description we can see this on the seventh row where it says",
      },
      {
        start_time: 1750840,
        end_time: 1757799,
        duration: 6959,
        text: "donation so this is obviously not going to be a helpful description and we want",
      },
      {
        start_time: 1757799,
        end_time: 1764840,
        duration: 7041,
        text: "to get rid of ones like this so the easiest way to actually identify these is by checking how long they are you",
      },
      {
        start_time: 1764840,
        end_time: 1771640,
        duration: 6800,
        text: "know this has one word so it's probably not going to be a useful description so what we're going to do is",
      },
      {
        start_time: 1771640,
        end_time: 1777720,
        duration: 6080,
        text: "create a bit of code and the first thing that we're going to do is oh we can see",
      },
      {
        start_time: 1777720,
        end_time: 1785039,
        duration: 7319,
        text: "that py charm has already completed that for me but basically what we're going to do is create a new variable called words",
      },
      {
        start_time: 1785039,
        end_time: 1790519,
        duration: 5480,
        text: "in description and what we're going to do is take the description split it",
      },
      {
        start_time: 1790519,
        end_time: 1798919,
        duration: 8400,
        text: "based on space this is the default for string split and then what we're going to do is ask for the length of that list",
      },
      {
        start_time: 1798919,
        end_time: 1804440,
        duration: 5521,
        text: "that results from splitting that string and what that would give us is a count of the number of",
      },
      {
        start_time: 1804440,
        end_time: 1811320,
        duration: 6880,
        text: "words so we've assign this to a new variable so again let's look at the data frame and you can see that we have you",
      },
      {
        start_time: 1811320,
        end_time: 1818200,
        duration: 6880,
        text: "know a pretty good distribution of the words in the description and you can see there again on row seven our donation",
      },
      {
        start_time: 1818200,
        end_time: 1825159,
        duration: 6959,
        text: "one the one with one word so again let's visualize this we're going to use the chart view functionality again and what",
      },
      {
        start_time: 1825159,
        end_time: 1831840,
        duration: 6681,
        text: "we're going to do is assign we're going to switch over to histogram and then we're going to assign the words in",
      },
      {
        start_time: 1831840,
        end_time: 1839960,
        duration: 8120,
        text: "description variable to both the X and the Y AIS and we'll just change this to count on the Y AIS so what you can see",
      },
      {
        start_time: 1839960,
        end_time: 1845440,
        duration: 5480,
        text: "is we have actually a pretty you know",
      },
      {
        start_time: 1845440,
        end_time: 1853200,
        duration: 7760,
        text: "even distribution of the number of words in the description between you know probably about 10 or maybe a little bit",
      },
      {
        start_time: 1853200,
        end_time: 1859120,
        duration: 5920,
        text: "higher up to around 2 or 300 so what this means is it's not really a natural",
      },
      {
        start_time: 1859120,
        end_time: 1864600,
        duration: 5480,
        text: "break point where there are a clear group of descriptions that are really short and a maybe you know donation or",
      },
      {
        start_time: 1864600,
        end_time: 1869760,
        duration: 5160,
        text: "something like that and those that are a bit longer and more meaningful so what this means is we're going to need to",
      },
      {
        start_time: 1869760,
        end_time: 1875519,
        duration: 5759,
        text: "create an arbitrary cut Point ourselves so a relatively straightforward way of",
      },
      {
        start_time: 1875519,
        end_time: 1881679,
        duration: 6160,
        text: "working out where this cut off will be you know how many words a description needs to have in order to be meaningful",
      },
      {
        start_time: 1881679,
        end_time: 1888639,
        duration: 6960,
        text: "is just come up with some cut offs come up with some bins for how many words the description needs to have inspect the",
      },
      {
        start_time: 1888639,
        end_time: 1895120,
        duration: 6481,
        text: "descriptions that have those number of words and then you know it's really just a gut feeling for whether you think that",
      },
      {
        start_time: 1895120,
        end_time: 1900760,
        duration: 5640,
        text: "this gives you enough information to know what the book is about so what we're going to do is create some pandas",
      },
      {
        start_time: 1900760,
        end_time: 1906760,
        duration: 6000,
        text: "code and we're going to filter the pandas data frame so that we have all of",
      },
      {
        start_time: 1906760,
        end_time: 1912159,
        duration: 5399,
        text: "those books where the words in description are between 1 and four to start so there's going to be our",
      },
      {
        start_time: 1912159,
        end_time: 1917519,
        duration: 5360,
        text: "smallest group and we really just want to return the descriptions so that's",
      },
      {
        start_time: 1917519,
        end_time: 1925919,
        duration: 8400,
        text: "what we're going to put in the second part of the conditional and when we run that what we find is yes indeed these",
      },
      {
        start_time: 1925919,
        end_time: 1934240,
        duration: 8321,
        text: "are all completely useless you know first published in 1813 edited by morrice hendle no",
      },
      {
        start_time: 1934240,
        end_time: 1941519,
        duration: 7279,
        text: "marketing blur fantasy hman like these are not very helpful so",
      },
      {
        start_time: 1941519,
        end_time: 1948000,
        duration: 6481,
        text: "basically we can I think skip this and decide that this is definitely too small",
      },
      {
        start_time: 1948000,
        end_time: 1957240,
        duration: 9240,
        text: "no big surprise so let's move up to the next bin and I've decided on between 5 and 14 words and again this is really",
      },
      {
        start_time: 1957240,
        end_time: 1963720,
        duration: 6480,
        text: "just a bit too short a matter of life and death and the Throne of England a title story in this collection of shorts",
      },
      {
        start_time: 1963720,
        end_time: 1970320,
        duration: 6600,
        text: "and now film from Angley this is really not giving us particularly good information so let's now move up to the",
      },
      {
        start_time: 1970320,
        end_time: 1976200,
        duration: 5880,
        text: "next bin and this one will be between 15 and 24 and you can see we're actually",
      },
      {
        start_time: 1976200,
        end_time: 1981559,
        duration: 5359,
        text: "starting to get to a point where these are becoming meaningful like a boy",
      },
      {
        start_time: 1981559,
        end_time: 1987000,
        duration: 5441,
        text: "imagines what it would be like if he had things such as duck feet or you know a",
      },
      {
        start_time: 1987000,
        end_time: 1994200,
        duration: 7200,
        text: "magical and Fantastical collection of early stories still probably not enough though so let's go up to the next bin",
      },
      {
        start_time: 1994200,
        end_time: 2000360,
        duration: 6160,
        text: "this is actually spoiler alert going to be the final bin that we look at and what you see is well and truly now we're",
      },
      {
        start_time: 2000360,
        end_time: 2006399,
        duration: 6039,
        text: "at a point where we have enough information it would be the most natural thing in the world but in Tony Parson's",
      },
      {
        start_time: 2006399,
        end_time: 2011519,
        duration: 5120,
        text: "latest bestseller three couples discover that mother nature blah blah blah so",
      },
      {
        start_time: 2011519,
        end_time: 2017600,
        duration: 6081,
        text: "this is really where we're starting to get to the point where it seems like there's enough information so I think",
      },
      {
        start_time: 2017600,
        end_time: 2023240,
        duration: 5640,
        text: "it's reasonable to use 25 words and up in the description as a cut off and now",
      },
      {
        start_time: 2023240,
        end_time: 2030960,
        duration: 7720,
        text: "we need to really see what the impact of that is going to be so let's now create some filtering code to clean up the data",
      },
      {
        start_time: 2030960,
        end_time: 2038159,
        duration: 7199,
        text: "set again and remove all of those that have less than 25 words in the description so again we are going to",
      },
      {
        start_time: 2038159,
        end_time: 2045600,
        duration: 7441,
        text: "create a new data frame called book missing 25 words and we're going to filter obviously book missing and this",
      },
      {
        start_time: 2045600,
        end_time: 2050839,
        duration: 5239,
        text: "will be all of those rows where words in description are more than or equal to 25",
      },
      {
        start_time: 2050839,
        end_time: 2056440,
        duration: 5601,
        text: "so we're going to keep those and then when we create that let's go ahead and",
      },
      {
        start_time: 2056440,
        end_time: 2062320,
        duration: 5880,
        text: "see how many rows that actually contains and we can see that it contains around",
      },
      {
        start_time: 2062320,
        end_time: 2068398,
        duration: 6078,
        text: "5,200 so we have lost quite a lot of books as part of this filtering but essentially we wouldn't have been able",
      },
      {
        start_time: 2068399,
        end_time: 2074638,
        duration: 6239,
        text: "to use them anyway unless we replace those descriptions so 5,000 is still a pretty good number and I think we can be",
      },
      {
        start_time: 2074639,
        end_time: 2081520,
        duration: 6881,
        text: "happy with that as the basis of our recommender okay so there are a couple of final variables that we want to",
      },
      {
        start_time: 2076000,
        end_time: 2291000,
        duration: 215000,
        text: "Final cleaning steps",
      },
      {
        start_time: 2081520,
        end_time: 2087960,
        duration: 6440,
        text: "create before we declare that cleaning and screening is completely done so the first thing is we need to decide what",
      },
      {
        start_time: 2087960,
        end_time: 2094200,
        duration: 6240,
        text: "we're going to do with the subtitle field so as we've already established it's unusable on its own because there",
      },
      {
        start_time: 2094200,
        end_time: 2100960,
        duration: 6760,
        text: "are so many missing values but it's quite common to have a Convention of books paired with their title and",
      },
      {
        start_time: 2100960,
        end_time: 2106560,
        duration: 5600,
        text: "subtitle so say spiders web colon a novel would be you know a pretty normal",
      },
      {
        start_time: 2106560,
        end_time: 2111640,
        duration: 5080,
        text: "convention or empires of the monsoon colon a history of the Indian Ocean and",
      },
      {
        start_time: 2111640,
        end_time: 2118960,
        duration: 7320,
        text: "its Invaders so what we can do is create a new field called title and subtitle",
      },
      {
        start_time: 2118960,
        end_time: 2125000,
        duration: 6040,
        text: "and what we can do is we can actually pair the two if it exists so again we're",
      },
      {
        start_time: 2125000,
        end_time: 2132079,
        duration: 7079,
        text: "going to use NP Weare so first we start typing in for those where the subtitle",
      },
      {
        start_time: 2132079,
        end_time: 2139520,
        duration: 7441,
        text: "is missing we add the npw clause and what we do is we specify that when books",
      },
      {
        start_time: 2139520,
        end_time: 2147720,
        duration: 8200,
        text: "missing uh when subtitle is missing um please just use the title but when it is",
      },
      {
        start_time: 2147720,
        end_time: 2154359,
        duration: 6639,
        text: "present when there is a subtitle what we want you to do is to aggregate the title",
      },
      {
        start_time: 2154359,
        end_time: 2159440,
        duration: 5081,
        text: "and subtitle and we need to convert that explicitly to a string because there are",
      },
      {
        start_time: 2159440,
        end_time: 2168680,
        duration: 9240,
        text: "a lot of missing values and they're considered as a float in pandas we can join them using a colon and voila this",
      },
      {
        start_time: 2168680,
        end_time: 2176760,
        duration: 8080,
        text: "has done the job so let's go and have a look and what we can see is we have this lovely new column which contains the",
      },
      {
        start_time: 2176760,
        end_time: 2182760,
        duration: 6000,
        text: "title and subtitle and it looks very good now the last thing we want to do is",
      },
      {
        start_time: 2182760,
        end_time: 2188200,
        duration: 5440,
        text: "we want to create a new description column which tags each description",
      },
      {
        start_time: 2188200,
        end_time: 2193280,
        duration: 5080,
        text: "with a unique identifier and I'm going to explain why we need to do this in the",
      },
      {
        start_time: 2193280,
        end_time: 2201160,
        duration: 7880,
        text: "next section you'll see why it'll be important for building the vector database but for now just trust me on it and I'll explain soon so we can use",
      },
      {
        start_time: 2201160,
        end_time: 2207880,
        duration: 6720,
        text: "either of the ISBN fields for this because we know that they're unique identifiers I'm going to use the ISBN 13",
      },
      {
        start_time: 2207880,
        end_time: 2214400,
        duration: 6520,
        text: "and essentially we're going to do a very similar thing that we did to create the title and subtitle we're going to create",
      },
      {
        start_time: 2214400,
        end_time: 2220200,
        duration: 5800,
        text: "a new variable called tag description and what we're going to do is take the",
      },
      {
        start_time: 2220200,
        end_time: 2225960,
        duration: 5760,
        text: "ISBN 13 and the description again we're going to explicitly convert them both to",
      },
      {
        start_time: 2225960,
        end_time: 2231160,
        duration: 5200,
        text: "string and then what we're going to do is join them so that the ISBN is just",
      },
      {
        start_time: 2231160,
        end_time: 2238720,
        duration: 7560,
        text: "attached as the first word of the description so now that we've done that again let's have a look and what we can",
      },
      {
        start_time: 2238720,
        end_time: 2245040,
        duration: 6320,
        text: "see is that we have successfully created that column so that's it we have",
      },
      {
        start_time: 2245040,
        end_time: 2251640,
        duration: 6600,
        text: "completely cleaned up the data set it is now ready for all of the NLP work we want to do with it so we're now ready to",
      },
      {
        start_time: 2251640,
        end_time: 2258079,
        duration: 6439,
        text: "save it to file and use it for the rest of our project so what we're going to do is drop some of those columns that we",
      },
      {
        start_time: 2258079,
        end_time: 2263160,
        duration: 5081,
        text: "created that we don't need we're going to drop the subtitle column the missing",
      },
      {
        start_time: 2263160,
        end_time: 2270560,
        duration: 7400,
        text: "description column the age of book column and the words and description column because we don't need them anymore we just use them for cleaning or",
      },
      {
        start_time: 2270560,
        end_time: 2278240,
        duration: 7680,
        text: "for uh filtering and then what we're going to do is just save that to CSV we're going to call it books cleaned CSV",
      },
      {
        start_time: 2278240,
        end_time: 2284440,
        duration: 6200,
        text: "and we're not going to save the index cuz we don't need it and that's it now we have prepared everything we've gotten",
      },
      {
        start_time: 2284440,
        end_time: 2291760,
        duration: 7320,
        text: "all the boring stuff out of the way we've eaten our vegetables and now we're ready to get into the fun NLP",
      },
      {
        start_time: 2291000,
        end_time: 3283000,
        duration: 992000,
        text: "Introduction to LLMs and vector search",
      },
      {
        start_time: 2291760,
        end_time: 2298200,
        duration: 6440,
        text: "stuff so now we've gotten the hard bit out of the way we have a lovely clean data set and we are ready to start",
      },
      {
        start_time: 2298200,
        end_time: 2305839,
        duration: 7639,
        text: "building our book recommender and to do this I'm going to show you how we can take raw text and turn it into a vector",
      },
      {
        start_time: 2305839,
        end_time: 2313520,
        duration: 7681,
        text: "something that captures the meaning of the text and allows us to compare how similar or different pieces of text are",
      },
      {
        start_time: 2313520,
        end_time: 2319920,
        duration: 6400,
        text: "we're then going to bundle those vectors up into a database allowing us to efficiently find the most similar books",
      },
      {
        start_time: 2319920,
        end_time: 2327400,
        duration: 7480,
        text: "to a query we'll start with some theory that will help us understand why and how llms create vectors and then I'll show",
      },
      {
        start_time: 2327400,
        end_time: 2334160,
        duration: 6760,
        text: "you how you can easily create your own Vector database in this section we're going to learn how to transform text",
      },
      {
        start_time: 2334160,
        end_time: 2341200,
        duration: 7040,
        text: "into a form that allows us to compare how similar documents are to each other mathematically this has many useful",
      },
      {
        start_time: 2341200,
        end_time: 2347319,
        duration: 6119,
        text: "applications and in this section we'll see how we can use it to find the most similar books to a query that we",
      },
      {
        start_time: 2347319,
        end_time: 2352680,
        duration: 5361,
        text: "have to start explaining how to do this we need to understand a basic building",
      },
      {
        start_time: 2352680,
        end_time: 2362680,
        duration: 10000,
        text: "block called word embeddings now to understand what these are let's take seven words queen king girl boy woman",
      },
      {
        start_time: 2362680,
        end_time: 2368440,
        duration: 5760,
        text: "man and tree now let's say we try to manually grw them in a three-dimensional",
      },
      {
        start_time: 2368440,
        end_time: 2375560,
        duration: 7120,
        text: "space based on their similarity so we put woman and man together we put queen and king together we put girl and boy",
      },
      {
        start_time: 2375560,
        end_time: 2380960,
        duration: 5400,
        text: "together and off in the corner we put tree now if we take the coordinates of",
      },
      {
        start_time: 2380960,
        end_time: 2387359,
        duration: 6399,
        text: "each of these words we can see that along this First Dimension girl and boy are similar but the rest are quite",
      },
      {
        start_time: 2387359,
        end_time: 2392920,
        duration: 5561,
        text: "different so perhaps this represents something to do with age on this second",
      },
      {
        start_time: 2392920,
        end_time: 2399319,
        duration: 6399,
        text: "dimension Queen and King are similar and different from the rest so maybe this Dimension represents something to do",
      },
      {
        start_time: 2399319,
        end_time: 2405800,
        duration: 6481,
        text: "with class or nobility and finally in the third dimension all of the people are similar",
      },
      {
        start_time: 2405800,
        end_time: 2412880,
        duration: 7080,
        text: "but tree is different so this Dimension maybe represents something to do with personhood these values for each word",
      },
      {
        start_time: 2412880,
        end_time: 2419160,
        duration: 6280,
        text: "are word embeddings and they represent the meaning of a word by grouping words that are similar and creating distance",
      },
      {
        start_time: 2419160,
        end_time: 2425240,
        duration: 6080,
        text: "between words that are dissimilar of course we're not going to create these Word embeddings manually",
      },
      {
        start_time: 2425240,
        end_time: 2430400,
        duration: 5160,
        text: "that would be a nightmare especially for large vocabularies instead we rely on word",
      },
      {
        start_time: 2430400,
        end_time: 2438400,
        duration: 8000,
        text: "embedding models to do so which learn these relationships by seeing how words are used in context so to demonstrate",
      },
      {
        start_time: 2438400,
        end_time: 2444720,
        duration: 6320,
        text: "this I'm going to show you how a model called word to VEC works specifically the skip gram",
      },
      {
        start_time: 2444720,
        end_time: 2451400,
        duration: 6680,
        text: "architecture the way this model learns the word embeddings is by taking all usages of each word in your training",
      },
      {
        start_time: 2451400,
        end_time: 2456839,
        duration: 5439,
        text: "data and trying to predict which words are likely to surround it so let's take",
      },
      {
        start_time: 2456839,
        end_time: 2462000,
        duration: 5161,
        text: "the case of the word best we're going to ask the model to predict which word",
      },
      {
        start_time: 2462000,
        end_time: 2469440,
        duration: 7440,
        text: "immediately preds and follows best so initially its guesses are going to be pretty inaccurate but as it sees more",
      },
      {
        start_time: 2469440,
        end_time: 2476200,
        duration: 6760,
        text: "and more examples of sentence fragments containing this word it will adjust its internal waiting and these guesses will",
      },
      {
        start_time: 2476200,
        end_time: 2481480,
        duration: 5280,
        text: "get closer and closer so let's get to training this model in our first",
      },
      {
        start_time: 2481480,
        end_time: 2487760,
        duration: 6280,
        text: "sentence fragment the word in front of best is the and the word after it is the",
      },
      {
        start_time: 2487760,
        end_time: 2494800,
        duration: 7040,
        text: "things in our second example it's also the and things however in our third",
      },
      {
        start_time: 2494800,
        end_time: 2500079,
        duration: 5279,
        text: "example it's the and Halloween the model is therefore going",
      },
      {
        start_time: 2500079,
        end_time: 2507079,
        duration: 7000,
        text: "to predict that the most likely word to proceed best is the and with a little less confidence the word that follows",
      },
      {
        start_time: 2507079,
        end_time: 2513720,
        duration: 6641,
        text: "best is things the weights that it uses to make these predictions end up being the word",
      },
      {
        start_time: 2513720,
        end_time: 2520119,
        duration: 6399,
        text: "embedding for best we repeat this exercise for for every word in the vocabulary meaning we have a word",
      },
      {
        start_time: 2520119,
        end_time: 2527000,
        duration: 6881,
        text: "embedding for each word in our Corpus do you know the way that this model is trained it means that words that are",
      },
      {
        start_time: 2527000,
        end_time: 2534319,
        duration: 7319,
        text: "used in similar context end up with similar weights in their embeddings so you can see that best worst and funniest",
      },
      {
        start_time: 2534319,
        end_time: 2539520,
        duration: 5201,
        text: "are all used in similar contexts when we look at the resulting embeddings we can",
      },
      {
        start_time: 2539520,
        end_time: 2545040,
        duration: 5520,
        text: "see that these three words therefore have similar embeddings in contrast",
      },
      {
        start_time: 2545040,
        end_time: 2550319,
        duration: 5279,
        text: "words like war attack and blast are all used in very different contexts so they",
      },
      {
        start_time: 2550319,
        end_time: 2555480,
        duration: 5161,
        text: "have very different embedding weights on each Dimension now in practice word embedding",
      },
      {
        start_time: 2555480,
        end_time: 2561559,
        duration: 6079,
        text: "models don't have three or five Dimensions like I've been showing you so far but they usually have hundreds or",
      },
      {
        start_time: 2561559,
        end_time: 2567400,
        duration: 5841,
        text: "even thousands in addition we also don't care in principle what these Dimensions",
      },
      {
        start_time: 2567400,
        end_time: 2574760,
        duration: 7360,
        text: "mean we only want them to separate out words that are different and group words that are similar so word embeddings were",
      },
      {
        start_time: 2574760,
        end_time: 2580000,
        duration: 5240,
        text: "the hottest thing ever for a while when they first came out I remember I actually used them at my first data",
      },
      {
        start_time: 2580000,
        end_time: 2586040,
        duration: 6040,
        text: "science job and I was completely fascinated by them however one of the biggest limitations of word embedding",
      },
      {
        start_time: 2586040,
        end_time: 2591240,
        duration: 5200,
        text: "models is that all meanings of a word are collapsed under the same token",
      },
      {
        start_time: 2591240,
        end_time: 2599240,
        duration: 8000,
        text: "regardless of whether it means different things in different contexts an example of this is the word bank which has very",
      },
      {
        start_time: 2599240,
        end_time: 2604359,
        duration: 5119,
        text: "different meanings depending on the context we can see that in two different",
      },
      {
        start_time: 2604359,
        end_time: 2612680,
        duration: 8321,
        text: "sentences he checked his bank account describes Bank in the sense of a financial institution whereas the river",
      },
      {
        start_time: 2612680,
        end_time: 2617760,
        duration: 5080,
        text: "bank was peaceful refers to bank as a natural",
      },
      {
        start_time: 2617760,
        end_time: 2623839,
        duration: 6079,
        text: "feature this is where the latest generation of models come in which are designed to understand the meaning of a",
      },
      {
        start_time: 2623839,
        end_time: 2629079,
        duration: 5240,
        text: "word in context broadly they're based on a type of neural network called a",
      },
      {
        start_time: 2629079,
        end_time: 2637559,
        duration: 8480,
        text: "Transformer model and all of The Cutting Edge llms like the chat GPT models Claude Gemini minstral 7B and falcon are",
      },
      {
        start_time: 2637559,
        end_time: 2644800,
        duration: 7241,
        text: "all variations of this type of model so I'm going to give you a very high level explanation of how these models work so",
      },
      {
        start_time: 2644800,
        end_time: 2650280,
        duration: 5480,
        text: "let's start with our example sentence he checked his bank account so we start by",
      },
      {
        start_time: 2650280,
        end_time: 2657240,
        duration: 6960,
        text: "transforming each of the words into word embeddings just like we did with the word to back model but we then add",
      },
      {
        start_time: 2657240,
        end_time: 2663720,
        duration: 6480,
        text: "positional vectors to each of these embeddings to indicate their position in the sentence so the embedding for he",
      },
      {
        start_time: 2663720,
        end_time: 2669400,
        duration: 5680,
        text: "would be waited to indicate that it's the first word in the sentence would be waited to indicate it's the second word",
      },
      {
        start_time: 2669400,
        end_time: 2677760,
        duration: 8360,
        text: "and so on and so forth these weighted word embeddings are then fed into a mechanism called self attention self",
      },
      {
        start_time: 2677760,
        end_time: 2683599,
        duration: 5839,
        text: "attention basically uses the information from the weighted word embeddings to understand how much attention it needs",
      },
      {
        start_time: 2683599,
        end_time: 2691240,
        duration: 7641,
        text: "to pay to the other words in the sentence in order to get the meaning of that word so let's break down these self",
      },
      {
        start_time: 2691240,
        end_time: 2696680,
        duration: 5440,
        text: "attention vectors each word has its own vector and if we have a closer look at",
      },
      {
        start_time: 2696680,
        end_time: 2703480,
        duration: 6800,
        text: "the vector Vector for the word bank we can see that each of the vector elements corresponds to a word in the sentence so",
      },
      {
        start_time: 2703480,
        end_time: 2709720,
        duration: 6240,
        text: "the first element corresponds to he the second to check and so on as you can see",
      },
      {
        start_time: 2709720,
        end_time: 2715440,
        duration: 5720,
        text: "the highest values in this Vector are for the words check bank and account",
      },
      {
        start_time: 2715440,
        end_time: 2721079,
        duration: 5639,
        text: "indicating that the model has worked out that in order to make sense of the meaning of the word Bank in this context",
      },
      {
        start_time: 2721079,
        end_time: 2727559,
        duration: 6480,
        text: "it needs to take these words into account so you can see that accounting for the words checked and account",
      },
      {
        start_time: 2727559,
        end_time: 2732920,
        duration: 5361,
        text: "allow the financial meaning of the word bang to be discovered by the model as",
      },
      {
        start_time: 2732920,
        end_time: 2740160,
        duration: 7240,
        text: "you can also see the self attention mechanism tends to focus on the word it's finding context for most strongly",
      },
      {
        start_time: 2740160,
        end_time: 2747520,
        duration: 7360,
        text: "as such the model creates these self attention vectors for each word multiple times and then averages over them",
      },
      {
        start_time: 2747520,
        end_time: 2753200,
        duration: 5680,
        text: "finally the model does some normalization which makes it easier to work with these attention vectors and",
      },
      {
        start_time: 2753200,
        end_time: 2759480,
        duration: 6280,
        text: "this process of generating self attention vectors and then normalizing them is called an encoder block the",
      },
      {
        start_time: 2759480,
        end_time: 2765920,
        duration: 6440,
        text: "attention mechanism allows Transformer models to do all sorts of interesting things with text we can see this with",
      },
      {
        start_time: 2765920,
        end_time: 2772440,
        duration: 6520,
        text: "the original architecture of the Transformer model which was designed to translate sentences from one language to",
      },
      {
        start_time: 2772440,
        end_time: 2779319,
        duration: 6879,
        text: "another so in order to do translation between two languages a Transformer based model needs two components an",
      },
      {
        start_time: 2779319,
        end_time: 2785200,
        duration: 5881,
        text: "encoder and a decod as you can see in both the encoder and the decoder they",
      },
      {
        start_time: 2785200,
        end_time: 2790240,
        duration: 5040,
        text: "both use attention blocks to process the text Data coming in however their goals",
      },
      {
        start_time: 2790240,
        end_time: 2796960,
        duration: 6720,
        text: "are a bit different the role of the encoder is to learn everything it can about how words in the source language",
      },
      {
        start_time: 2796960,
        end_time: 2802000,
        duration: 5040,
        text: "relate to one another and send that information over to the decoder the",
      },
      {
        start_time: 2802000,
        end_time: 2807079,
        duration: 5079,
        text: "decoder has a slightly more complex job it need toos learn everything it can",
      },
      {
        start_time: 2807079,
        end_time: 2813160,
        duration: 6081,
        text: "about how words in the target language relate to one another it then uses that knowledge as well as what the encoder",
      },
      {
        start_time: 2813160,
        end_time: 2818440,
        duration: 5280,
        text: "has sent over about the source sentence to predict word by word the most likely",
      },
      {
        start_time: 2818440,
        end_time: 2823960,
        duration: 5520,
        text: "sequence in the target language so you can see that in this example here let's",
      },
      {
        start_time: 2823960,
        end_time: 2831119,
        duration: 7159,
        text: "say we have the sentence in English I have visited Italy we want to translate it into German our encoder will have",
      },
      {
        start_time: 2831119,
        end_time: 2837400,
        duration: 6281,
        text: "learned a whole bunch about how English functions and our decoder will have learned about how German Works our",
      },
      {
        start_time: 2837400,
        end_time: 2845040,
        duration: 7640,
        text: "sentence is then processed by the encoder and word by word the aoto will generate the closest matching sentence",
      },
      {
        start_time: 2845040,
        end_time: 2852280,
        duration: 7240,
        text: "in German over the past 6 years the Transformer architecture has been so successful that",
      },
      {
        start_time: 2852280,
        end_time: 2858559,
        duration: 6279,
        text: "it's led to the development of larger and larger models which are of course called large language models or",
      },
      {
        start_time: 2858559,
        end_time: 2866319,
        duration: 7760,
        text: "llms the basic Transformer architecture has spun off many different types of models some like the original model use",
      },
      {
        start_time: 2866319,
        end_time: 2874160,
        duration: 7841,
        text: "both encoda and dcota blocks we're going to see such a model in the next section of the tutorial however many only use",
      },
      {
        start_time: 2874160,
        end_time: 2881920,
        duration: 7760,
        text: "dakoda blocks most of the generative text models you'll be used to using are decoder only models and then there there",
      },
      {
        start_time: 2881920,
        end_time: 2887119,
        duration: 5199,
        text: "are the encoder only models which tend to be good for tasks that require a full",
      },
      {
        start_time: 2887119,
        end_time: 2893920,
        duration: 6801,
        text: "understanding of the sentence llms are now so big that they're generally too expensive for most",
      },
      {
        start_time: 2893920,
        end_time: 2899240,
        duration: 5320,
        text: "people to train from scratch however the brilliant thing about llms is that due",
      },
      {
        start_time: 2899240,
        end_time: 2904520,
        duration: 5280,
        text: "to how they learn during training they are natural language generalists they",
      },
      {
        start_time: 2904520,
        end_time: 2910400,
        duration: 5880,
        text: "have a deep knowledge of how their training language work they've been used in such a way that they can be adapted",
      },
      {
        start_time: 2910400,
        end_time: 2916839,
        duration: 6439,
        text: "to many tasks and this has led to a proliferation of what are called pre-trained models these are large",
      },
      {
        start_time: 2916839,
        end_time: 2923599,
        duration: 6760,
        text: "language models that someone else has trained and they've made available to the public for use for a downstream task",
      },
      {
        start_time: 2923599,
        end_time: 2929559,
        duration: 5960,
        text: "here are some examples of pre-trained models you can see open source models here on a hugging face which I'm going",
      },
      {
        start_time: 2929559,
        end_time: 2937720,
        duration: 8161,
        text: "to be explaining in more detail in the next section then here are proprietary models offered by open AI there are many",
      },
      {
        start_time: 2937720,
        end_time: 2944200,
        duration: 6480,
        text: "many different models which have been made available by either large tech companies or research institutes and the",
      },
      {
        start_time: 2944200,
        end_time: 2949359,
        duration: 5159,
        text: "explosion and models can sometimes make it feel overwhelming to get started working with",
      },
      {
        start_time: 2949359,
        end_time: 2956359,
        duration: 7000,
        text: "llms however I hope by the end of this video you'll feel more confident about these models and how to apply them in",
      },
      {
        start_time: 2956359,
        end_time: 2962839,
        duration: 6480,
        text: "this section we're going to be using encoder models so let's have a closer look at these now as encoder models are",
      },
      {
        start_time: 2962839,
        end_time: 2969680,
        duration: 6841,
        text: "designed to understand the meaning of full sequences such as how all the words in a sentence relate to one another",
      },
      {
        start_time: 2969680,
        end_time: 2976400,
        duration: 6720,
        text: "they're trained with a goal that forces the model to understand this so let's take the case of a model called Roberta",
      },
      {
        start_time: 2976400,
        end_time: 2983319,
        duration: 6919,
        text: "which is trained by getting it to predict a masked word in a sentence that is a word that is missing so let's see",
      },
      {
        start_time: 2983319,
        end_time: 2990839,
        duration: 7520,
        text: "how this training Works let's say we have our training sentence I grew up in Paris so I speak mask and English mask",
      },
      {
        start_time: 2990839,
        end_time: 2999119,
        duration: 8280,
        text: "of course representing the missing word what Roberta first does is to tokenize this sentence and add these special CLS",
      },
      {
        start_time: 2999119,
        end_time: 3006160,
        duration: 7041,
        text: "and sep tokens to indicate the beginning and the end of the sentence these tokens are then passed",
      },
      {
        start_time: 3006160,
        end_time: 3011440,
        duration: 5280,
        text: "into the model and the model retrieves word embeddings for each word weighted",
      },
      {
        start_time: 3011440,
        end_time: 3017400,
        duration: 5960,
        text: "by their position in the sentences these are then passed through a bunch of encoder blocks to get all of those self",
      },
      {
        start_time: 3017400,
        end_time: 3023960,
        duration: 6560,
        text: "attention vectors the final part of the model uses everything that it's learned about the representation of these words",
      },
      {
        start_time: 3023960,
        end_time: 3029960,
        duration: 6000,
        text: "in a sentence to make its prediction about what the missing word is at the",
      },
      {
        start_time: 3029960,
        end_time: 3036520,
        duration: 6560,
        text: "beginning these guesses are going to be quite bad again just like with the word Toc model however after seeing many many",
      },
      {
        start_time: 3036520,
        end_time: 3042280,
        duration: 5760,
        text: "many different examples of such sentences the model builds up an internal representation of how the",
      },
      {
        start_time: 3042280,
        end_time: 3047680,
        duration: 5400,
        text: "language works and becomes very accurate the original Roberta model was trained",
      },
      {
        start_time: 3047680,
        end_time: 3052960,
        duration: 5280,
        text: "on 160 GB of text so you can imagine that the models have a chance to build",
      },
      {
        start_time: 3052960,
        end_time: 3060839,
        duration: 7879,
        text: "up a really rich representation of the meanings of the words in in different contexts now as we've discussed language",
      },
      {
        start_time: 3060839,
        end_time: 3066160,
        duration: 5321,
        text: "models work by transforming raw text into Vector representations so really",
      },
      {
        start_time: 3066160,
        end_time: 3073119,
        duration: 6959,
        text: "interesting thing we can do within Coda models is to pass in a sentence or a document and extract the internal Vector",
      },
      {
        start_time: 3073119,
        end_time: 3079520,
        duration: 6401,
        text: "representation that the model has made of that sequence this is called a document embedding and just like with",
      },
      {
        start_time: 3079520,
        end_time: 3084599,
        duration: 5079,
        text: "word embeddings is a way for us to be able to mathematically determine how",
      },
      {
        start_time: 3084599,
        end_time: 3090000,
        duration: 5401,
        text: "similar or dissimilar documents are to each other so let's return to the",
      },
      {
        start_time: 3090000,
        end_time: 3095799,
        duration: 5799,
        text: "example of our books let's say we have four book descriptions a heartwarming",
      },
      {
        start_time: 3095799,
        end_time: 3101640,
        duration: 5841,
        text: "journey of love and friendship an ambitious attorney gets entangled in a case which may prove to be more",
      },
      {
        start_time: 3101640,
        end_time: 3108920,
        duration: 7280,
        text: "dangerous than anticipated one of the most meticulous accounts of the decline and fall of the Roman Empire and a",
      },
      {
        start_time: 3108920,
        end_time: 3114520,
        duration: 5600,
        text: "provocative and well researched take on human relationships so we pass each of these",
      },
      {
        start_time: 3114520,
        end_time: 3120520,
        duration: 6000,
        text: "through an encoder model we can convert them into their document embeddings as each of these descriptions are quite",
      },
      {
        start_time: 3120520,
        end_time: 3126559,
        duration: 6039,
        text: "different the values in each of the dimensions are also quite different meaning each of these descriptions",
      },
      {
        start_time: 3126559,
        end_time: 3134280,
        duration: 7721,
        text: "should be in distinct parts of their embedding Vector space so how can we find a specific book",
      },
      {
        start_time: 3134280,
        end_time: 3140319,
        duration: 6039,
        text: "well the first thing we can do is to store each of these vectors in a vector database with some sort of ID perhaps",
      },
      {
        start_time: 3140319,
        end_time: 3147720,
        duration: 7401,
        text: "some sort of other metadata you can see that our vectors now have unique IDs assigned to them so let's say we want to",
      },
      {
        start_time: 3147720,
        end_time: 3154240,
        duration: 6520,
        text: "find a book about the Roman Empire because yes I do think about that every day we would first convert this query",
      },
      {
        start_time: 3154240,
        end_time: 3161559,
        duration: 7319,
        text: "into a document embedding using the same encoder model we used to create the embeddings in the database we would then",
      },
      {
        start_time: 3161559,
        end_time: 3169240,
        duration: 7681,
        text: "compare this Vector with those in the database calculating a similarity score between the vector and the query I'm",
      },
      {
        start_time: 3169240,
        end_time: 3176079,
        duration: 6839,
        text: "using a distance metric called the cosine similarity here but there are quite a few different options you can use and what you have available will",
      },
      {
        start_time: 3176079,
        end_time: 3183640,
        duration: 7561,
        text: "depend on the vector database that you choose so you can see from this comparison our third book Vector 103",
      },
      {
        start_time: 3183640,
        end_time: 3190480,
        duration: 6840,
        text: "ended up being the most similar to our query Vector however we don't want to just retrieve a vector that's not really",
      },
      {
        start_time: 3190480,
        end_time: 3197559,
        duration: 7079,
        text: "that useful to us so this is where the ID comes back in the ID can be used as a",
      },
      {
        start_time: 3197559,
        end_time: 3203119,
        duration: 5560,
        text: "link to the original text of the query as well as other potential metad data so",
      },
      {
        start_time: 3203119,
        end_time: 3208240,
        duration: 5121,
        text: "in the case of this example we can use the ID to retrieve the description and",
      },
      {
        start_time: 3208240,
        end_time: 3213880,
        duration: 5640,
        text: "also the title and the author of the book which turns out to be Edward Gibbon's legendary history of the",
      },
      {
        start_time: 3213880,
        end_time: 3221359,
        duration: 7479,
        text: "decline and fall of the Roman Empire so that turns out to be a very relevant recommendation indeed we might have",
      },
      {
        start_time: 3221359,
        end_time: 3227119,
        duration: 5760,
        text: "spotted a problem right now we're doing linear search our search time is going",
      },
      {
        start_time: 3227119,
        end_time: 3233079,
        duration: 5960,
        text: "to increase linearly with the size of our database CU right now we're comparing our query with every single",
      },
      {
        start_time: 3233079,
        end_time: 3239480,
        duration: 6401,
        text: "Vector so it's not terribly efficient so to to solve this there are many different algorithms you can use to",
      },
      {
        start_time: 3239480,
        end_time: 3245880,
        duration: 6400,
        text: "reduce the search space and these all roughly work by grouping similar vectors in the database index meaning that at",
      },
      {
        start_time: 3245880,
        end_time: 3252839,
        duration: 6959,
        text: "search time you're only going to be comparing your query Vector to the most similar vectors however this grouping is",
      },
      {
        start_time: 3252839,
        end_time: 3260559,
        duration: 7720,
        text: "not always precise meaning that most of these algorithms are a trade-off between speed and accuracy seeking an idea about",
      },
      {
        start_time: 3260559,
        end_time: 3266799,
        duration: 6240,
        text: "how this works from this page from web8 which is a popular Vector database company or there are many such pages",
      },
      {
        start_time: 3266799,
        end_time: 3272960,
        duration: 6161,
        text: "that you can read about online and of course you don't need to implement these algorithms yourself the advantage of",
      },
      {
        start_time: 3272960,
        end_time: 3278000,
        duration: 5040,
        text: "using a vector database is that they build these into the indexing and with",
      },
      {
        start_time: 3278000,
        end_time: 3284480,
        duration: 6480,
        text: "that big chunk of theory out of the way we are finally ready to get started building our semantic recommender so in",
      },
      {
        start_time: 3283000,
        end_time: 3526000,
        duration: 243000,
        text: "LangChain",
      },
      {
        start_time: 3284480,
        end_time: 3290599,
        duration: 6119,
        text: "order to build our Vector search we're going to be working with a framework called Lang chain and we briefly",
      },
      {
        start_time: 3290599,
        end_time: 3298599,
        duration: 8000,
        text: "mentioned Lang chain when we were installing our dependencies but I'm just going to dive a little bit more into what it is now so Lang chain is this",
      },
      {
        start_time: 3298599,
        end_time: 3304000,
        duration: 5401,
        text: "super powerful framework that's available in Python and it allows you to do a whole bunch of stuff with large",
      },
      {
        start_time: 3304000,
        end_time: 3311119,
        duration: 7119,
        text: "language models so we're going to be using it for Vector search you can of course extend that to make rag pipelines",
      },
      {
        start_time: 3311119,
        end_time: 3317319,
        duration: 6200,
        text: "you can also do things like creating chatbots or creating agents so it's very powerful and it's very sort of",
      },
      {
        start_time: 3317319,
        end_time: 3323520,
        duration: 6201,
        text: "state-ofthe-art so another thing that makes Lang chain really nice to work with is you're not",
      },
      {
        start_time: 3323520,
        end_time: 3329480,
        duration: 5960,
        text: "bound to a single large language model provider so as I mentioned when we were talking",
      },
      {
        start_time: 3329480,
        end_time: 3335640,
        duration: 6160,
        text: "about installing the dependencies we're going to be working with an open AI model in this section but you can work",
      },
      {
        start_time: 3335640,
        end_time: 3342880,
        duration: 7240,
        text: "with any of the proprietary vendors or almost any of them and you can also importantly work with open source models",
      },
      {
        start_time: 3342880,
        end_time: 3347960,
        duration: 5080,
        text: "from hugging face so there's a lot of flexibility there and it allows you to",
      },
      {
        start_time: 3347960,
        end_time: 3355799,
        duration: 7839,
        text: "do a lot of different experimentation and work with a whole range of different models so jumping back over to pie charm",
      },
      {
        start_time: 3355799,
        end_time: 3361559,
        duration: 5760,
        text: "you can see see from the dependencies that we're importing the methods we're importing kind of how the workflow is",
      },
      {
        start_time: 3361559,
        end_time: 3367240,
        duration: 5681,
        text: "going to go with creating this Vector database so the first method that we're importing is the text loader and",
      },
      {
        start_time: 3367240,
        end_time: 3374640,
        duration: 7400,
        text: "basically that's going to take the raw text the text of the book descriptions and kind of convert it into a format",
      },
      {
        start_time: 3374640,
        end_time: 3379680,
        duration: 5040,
        text: "that Lang chain can work with then the character text splitter method is going",
      },
      {
        start_time: 3379680,
        end_time: 3386480,
        duration: 6800,
        text: "to split that whole document containing all of the descriptions into meaningful chunks so in our case those chunks are",
      },
      {
        start_time: 3386480,
        end_time: 3392720,
        duration: 6240,
        text: "just going to be individual descriptions of each book but in other context you might be splitting a really long",
      },
      {
        start_time: 3392720,
        end_time: 3398359,
        duration: 5639,
        text: "document and you might just arbitrarily split it off at say a th characters there are many many different ways of",
      },
      {
        start_time: 3398359,
        end_time: 3404799,
        duration: 6440,
        text: "splitting documents and if you're interested in this topic definitely a rabbit hole you can go down the next",
      },
      {
        start_time: 3404799,
        end_time: 3410799,
        duration: 6000,
        text: "step is converting those chunks into document embeddings and we're going to be using the open AI embeddings method",
      },
      {
        start_time: 3410799,
        end_time: 3416359,
        duration: 5560,
        text: "to do that and do API calls to open AI to use their models to do that and then",
      },
      {
        start_time: 3416359,
        end_time: 3421920,
        duration: 5561,
        text: "finally we need to store those in a vector database and we're going to be using chroma for this this is a very",
      },
      {
        start_time: 3421920,
        end_time: 3428400,
        duration: 6480,
        text: "popular open-source Vector database but there are a range of other databases you can use with Lang chain some of them",
      },
      {
        start_time: 3428400,
        end_time: 3435559,
        duration: 7159,
        text: "proprietary so the next thing we need to do is set up our environment so that we can use that open AI model so we're",
      },
      {
        start_time: 3435559,
        end_time: 3442920,
        duration: 7361,
        text: "basically going to be calling that model using API calls so what this means is that we need an API key so that we can",
      },
      {
        start_time: 3442920,
        end_time: 3448319,
        duration: 5399,
        text: "connect to our own open AI account and be a able to charge to our account to",
      },
      {
        start_time: 3448319,
        end_time: 3455359,
        duration: 7040,
        text: "use that model and we're going to get into how to get the API keys and how to basically put credits on your open AI",
      },
      {
        start_time: 3455359,
        end_time: 3460760,
        duration: 5401,
        text: "account so you can use those models in a little bit but for now let's talk about",
      },
      {
        start_time: 3460760,
        end_time: 3467280,
        duration: 6520,
        text: "the nice clean way of passing that API key to your environment and my favorite way of doing that is using a package",
      },
      {
        start_time: 3467280,
        end_time: 3474720,
        duration: 7440,
        text: "called M so what M requires you to do is first create a m file and you can see",
      },
      {
        start_time: 3474720,
        end_time: 3484200,
        duration: 9480,
        text: "that here I just have it sitting in my room directory and all I need to do is pass in my API Keys into this file then",
      },
      {
        start_time: 3484200,
        end_time: 3489680,
        duration: 5480,
        text: "what I do is I import M and I import the",
      },
      {
        start_time: 3489680,
        end_time: 3494720,
        duration: 5040,
        text: "load m method and then I just need to call that load m method and what it's",
      },
      {
        start_time: 3494720,
        end_time: 3500880,
        duration: 6160,
        text: "going to do is look in the M file see those two keys that I have and it's going to write them to the environment",
      },
      {
        start_time: 3500880,
        end_time: 3506920,
        duration: 6040,
        text: "that I'm using for this particular project so it's very clean and it's very simple",
      },
      {
        start_time: 3506920,
        end_time: 3512200,
        duration: 5280,
        text: "now that we've done that let's go ahead and read in our nice cleaned books data",
      },
      {
        start_time: 3512200,
        end_time: 3517880,
        duration: 5680,
        text: "set so again we're going to be using pandas to do that so we import pandas and we're going to call it books again",
      },
      {
        start_time: 3517880,
        end_time: 3524880,
        duration: 7000,
        text: "and we're going to import that books cleaned data set so we can see here it is just as we saw it at the end of the",
      },
      {
        start_time: 3524880,
        end_time: 3530119,
        duration: 5239,
        text: "last section okay so now that we've loaded in our data and we've set up our",
      },
      {
        start_time: 3526000,
        end_time: 3777000,
        duration: 251000,
        text: "Splitting the books using CharacterTextSplitter",
      },
      {
        start_time: 3530119,
        end_time: 3537200,
        duration: 7081,
        text: "environment we are ready to start building our Vector search so this is where we revisit that tag description",
      },
      {
        start_time: 3537200,
        end_time: 3544079,
        duration: 6879,
        text: "that I created at the end of the last section and I promised you that I was going to explain why I did this so when",
      },
      {
        start_time: 3544079,
        end_time: 3550799,
        duration: 6720,
        text: "we create the vector search and when we query the database what we're going to get in return are the descriptions of",
      },
      {
        start_time: 3550799,
        end_time: 3556640,
        duration: 5841,
        text: "the books because this is what's in the vector database but we don't want to",
      },
      {
        start_time: 3556640,
        end_time: 3563400,
        duration: 6760,
        text: "give descriptions to the users of our recommender it doesn't really make sense what we want to give them are the titles",
      },
      {
        start_time: 3563400,
        end_time: 3568799,
        duration: 5399,
        text: "and the authors of the books so so what we essentially want to be able to do is",
      },
      {
        start_time: 3568799,
        end_time: 3576079,
        duration: 7280,
        text: "filter down the data frame that contains all the books to those that were recommended based on our query to the",
      },
      {
        start_time: 3576079,
        end_time: 3583119,
        duration: 7040,
        text: "vector database but doing this based on string match is really messy it's it's not a nice way of doing this filtering",
      },
      {
        start_time: 3583119,
        end_time: 3588599,
        duration: 5480,
        text: "it's quite slow and it can be imprecise so instead what I've done is I've",
      },
      {
        start_time: 3588599,
        end_time: 3595520,
        duration: 6921,
        text: "appended the ISBN as an identifier and what we can do is when we get back the",
      },
      {
        start_time: 3595520,
        end_time: 3601720,
        duration: 6200,
        text: "recommend ations we can split off that ISBN from the front of the description",
      },
      {
        start_time: 3601720,
        end_time: 3607640,
        duration: 5920,
        text: "and use that as the thing to filter so I'm going to talk you through how we do that but you're going to see that it's",
      },
      {
        start_time: 3607640,
        end_time: 3614680,
        duration: 7040,
        text: "quite clean and it's a much nicer way of doing this filtering than trying to do it on a full text match which is messy",
      },
      {
        start_time: 3614680,
        end_time: 3621440,
        duration: 6760,
        text: "and slow okay so the text loader method in Lang chain it doesn't work with Pan's",
      },
      {
        start_time: 3621440,
        end_time: 3629240,
        duration: 7800,
        text: "data frames so the first thing we need to do is save these tag descript and only the tag descriptions in a text file",
      },
      {
        start_time: 3629240,
        end_time: 3635960,
        duration: 6720,
        text: "so we're going to create some code to do that we're going to use the 2 CSV method in pandas going to change that to a text",
      },
      {
        start_time: 3635960,
        end_time: 3642119,
        duration: 6159,
        text: "file and we're going to make sure that it's separated by new lines and we're also going to make sure that it doesn't",
      },
      {
        start_time: 3642119,
        end_time: 3649280,
        duration: 7161,
        text: "have an index and it doesn't have a header so it's just going to be a file that contains just the text",
      },
      {
        start_time: 3649280,
        end_time: 3655520,
        duration: 6240,
        text: "descriptions okay so we can have a look at that text document that we've just created and we can see that it's done",
      },
      {
        start_time: 3655520,
        end_time: 3662960,
        duration: 7440,
        text: "exactly what we needed we have all of our nice descriptions separated neatly by new lines so great now we can start",
      },
      {
        start_time: 3662960,
        end_time: 3668200,
        duration: 5240,
        text: "splitting them so the first thing we do is we load them using the text loader",
      },
      {
        start_time: 3668200,
        end_time: 3674680,
        duration: 6480,
        text: "method and you can see the syntax here is pretty straightforward and what we need to do is instantiate the text",
      },
      {
        start_time: 3674680,
        end_time: 3679799,
        duration: 5119,
        text: "splitter so what we want to do is pass a couple of arguments here the first one",
      },
      {
        start_time: 3679799,
        end_time: 3685319,
        duration: 5520,
        text: "is chunk overlap it's pretty easy to understand essentially what it's telling us is we don't want any of these chunks",
      },
      {
        start_time: 3685319,
        end_time: 3692359,
        duration: 7040,
        text: "to have any overlap that's why we set it to zero because they are separate titles they they shouldn't overlap and we also",
      },
      {
        start_time: 3692359,
        end_time: 3697440,
        duration: 5081,
        text: "set the separator as a new line so making that really clear but just going",
      },
      {
        start_time: 3697440,
        end_time: 3702960,
        duration: 5520,
        text: "back to this chunk size argument the reason we're setting that to zero is",
      },
      {
        start_time: 3702960,
        end_time: 3711400,
        duration: 8440,
        text: "because it first tries to look for the closest separator to the index number",
      },
      {
        start_time: 3711400,
        end_time: 3718520,
        duration: 7120,
        text: "indicated by the chunks and basically if this is more than one there's a chance",
      },
      {
        start_time: 3718520,
        end_time: 3723960,
        duration: 5440,
        text: "that it may not split on a new line it will split on chunk size but so by",
      },
      {
        start_time: 3723960,
        end_time: 3729520,
        duration: 5560,
        text: "setting it to zero we make sure that it prioritize splitting on the separator",
      },
      {
        start_time: 3729520,
        end_time: 3735240,
        duration: 5720,
        text: "rather than trying to split on the chunk size so now that we've done this we've",
      },
      {
        start_time: 3735240,
        end_time: 3741839,
        duration: 6599,
        text: "instantiated our text spitter we can apply it to those documents that have been loaded in by the documents spitter",
      },
      {
        start_time: 3741839,
        end_time: 3749000,
        duration: 7161,
        text: "and this takes a while and you can see that we get basically a warning every single one because we set the chunk size",
      },
      {
        start_time: 3749000,
        end_time: 3754880,
        duration: 5880,
        text: "to zero but we'll just let that run we will just actually skip over that and",
      },
      {
        start_time: 3754880,
        end_time: 3760119,
        duration: 5239,
        text: "now you can see that it's done so let's just go ahead and check that that worked",
      },
      {
        start_time: 3760119,
        end_time: 3766960,
        duration: 6841,
        text: "correctly so what we're going to take is the first document um of those that have been split using the text splitter and",
      },
      {
        start_time: 3766960,
        end_time: 3773960,
        duration: 7000,
        text: "we can see perfect this is the first description it's just the description it's worked correctly so now we can go",
      },
      {
        start_time: 3773960,
        end_time: 3779960,
        duration: 6000,
        text: "ahead and we can start building building our Vector database so kind of the final",
      },
      {
        start_time: 3777000,
        end_time: 3950000,
        duration: 173000,
        text: "Building the vector database",
      },
      {
        start_time: 3779960,
        end_time: 3786319,
        duration: 6359,
        text: "step actually we're pretty much done is that we need to in the same step create",
      },
      {
        start_time: 3786319,
        end_time: 3792119,
        duration: 5800,
        text: "the document embeddings and store them in a vector database so what we're going",
      },
      {
        start_time: 3792119,
        end_time: 3799440,
        duration: 7321,
        text: "to do is to use the chroma method we're going to assign that to a variable called DB books and we're going to use",
      },
      {
        start_time: 3799440,
        end_time: 3805440,
        duration: 6000,
        text: "the from documents method in chroma and we're going to pass that two arguments we're going to pass it the documents",
      },
      {
        start_time: 3805440,
        end_time: 3810720,
        duration: 5280,
        text: "that we created the ones that have been split using the text splitter and we're going to tell it what embedding we want",
      },
      {
        start_time: 3810720,
        end_time: 3815880,
        duration: 5160,
        text: "to use and we're going to use our open AI embeddings so what I'm going to do",
      },
      {
        start_time: 3815880,
        end_time: 3820960,
        duration: 5080,
        text: "now is take a little diversion and explain to you how you can get access to",
      },
      {
        start_time: 3820960,
        end_time: 3826240,
        duration: 5280,
        text: "an open AI API key and how you can also load up credits so that you can pay for",
      },
      {
        start_time: 3826240,
        end_time: 3832240,
        duration: 6000,
        text: "this model so let's duck over to the openai website and have a look at that so in order to start working with open",
      },
      {
        start_time: 3832240,
        end_time: 3838960,
        duration: 6720,
        text: "AI models you first need to visit platform. open.com and if you don't have an",
      },
      {
        start_time: 3838960,
        end_time: 3846319,
        duration: 7359,
        text: "account you will need to create one so once you have an account you can then go up to the top right hand corner and go",
      },
      {
        start_time: 3846319,
        end_time: 3852760,
        duration: 6441,
        text: "to settings as you can see here and you will land on your profile page now there",
      },
      {
        start_time: 3852760,
        end_time: 3860079,
        duration: 7319,
        text: "are two relevant sections for us here the first is the billing page so in order to use any of these open AI models",
      },
      {
        start_time: 3860079,
        end_time: 3866240,
        duration: 6161,
        text: "you do need to pay for it but smaller models like the Ada embedding model that we're going to be using in order to",
      },
      {
        start_time: 3866240,
        end_time: 3871920,
        duration: 5680,
        text: "create our document embeddings or older models like GPT 3.5 turbo are actually",
      },
      {
        start_time: 3871920,
        end_time: 3877799,
        duration: 5879,
        text: "pretty cheap to use so I chucked $10 on my account I think 6 months ago and you",
      },
      {
        start_time: 3877799,
        end_time: 3883039,
        duration: 5240,
        text: "can see I've still got $440 left so it's not terribly expensive if you're not",
      },
      {
        start_time: 3883039,
        end_time: 3891240,
        duration: 8201,
        text: "really hammering these models so you can see here on this billing page you can add credit like I said you can load up a",
      },
      {
        start_time: 3891240,
        end_time: 3898319,
        duration: 7079,
        text: "small amount it will last you a while if you're not using the expensive models and you can also to manage your preferences to set things like usage",
      },
      {
        start_time: 3898319,
        end_time: 3904920,
        duration: 6601,
        text: "limits the other thing that we want to have a look at is how you get the API key and if you just navigate on the",
      },
      {
        start_time: 3904920,
        end_time: 3911799,
        duration: 6879,
        text: "right hand side you can see that there is a section called API Keys all you need to do is click this green button it",
      },
      {
        start_time: 3911799,
        end_time: 3918880,
        duration: 7081,
        text: "will generate a new API key and just make sure you save that straight in the M file so that you can use that and as",
      },
      {
        start_time: 3918880,
        end_time: 3926119,
        duration: 7239,
        text: "you can see it's relatively straightforward to set up and once you've got this set up you got your API key loaded in yourm file it's pretty",
      },
      {
        start_time: 3926119,
        end_time: 3933880,
        duration: 7761,
        text: "easy and straightforward to work with these models so now we have everything in place to create our Vector database",
      },
      {
        start_time: 3933880,
        end_time: 3939440,
        duration: 5560,
        text: "so if we just execute this cell you can see that this is going to run for a little while so I'm actually just going",
      },
      {
        start_time: 3939440,
        end_time: 3946160,
        duration: 6720,
        text: "to skip ahead and you can see that it took about 24 seconds to create that database so now we're ready to start",
      },
      {
        start_time: 3946160,
        end_time: 3953240,
        duration: 7080,
        text: "quering it we're at the fun part and you can see it actually wasn't that much work okay so for our first query let's",
      },
      {
        start_time: 3950000,
        end_time: 4267000,
        duration: 317000,
        text: "Getting book recommendations using vector search",
      },
      {
        start_time: 3953240,
        end_time: 3958559,
        duration: 5319,
        text: "try for something kind of specific so let's say a book to teach children about",
      },
      {
        start_time: 3958559,
        end_time: 3964920,
        duration: 6361,
        text: "nature so I'm going to save this to a query variable and then to get the recommendations what we're going to do",
      },
      {
        start_time: 3964920,
        end_time: 3971400,
        duration: 6480,
        text: "is take our database the DB books and we're going to run this similarity search method over it we're going to",
      },
      {
        start_time: 3971400,
        end_time: 3977279,
        duration: 5879,
        text: "pass in that query and this k equal 10 argument tells us how many results we",
      },
      {
        start_time: 3977279,
        end_time: 3982319,
        duration: 5040,
        text: "want to get in return so let's go ahead and run that and let's see what it's",
      },
      {
        start_time: 3982319,
        end_time: 3988599,
        duration: 6280,
        text: "returned so if we have a look at the top results the first one is children will discover the exciting world of their own",
      },
      {
        start_time: 3988599,
        end_time: 3995720,
        duration: 7121,
        text: "backyard in this introduction to familiar animals from cats and dogs to bugs and frogs and the second one is",
      },
      {
        start_time: 3995720,
        end_time: 4000839,
        duration: 5119,
        text: "introduce your babies to birds cats dogs and babies not really sure why you need",
      },
      {
        start_time: 4000839,
        end_time: 4007200,
        duration: 6361,
        text: "to introduce your baby to babies through a book about animals but anyway this is",
      },
      {
        start_time: 4007200,
        end_time: 4013440,
        duration: 6240,
        text: "still a relevant recommendation so this is super cool and it's working really nicely",
      },
      {
        start_time: 4013440,
        end_time: 4021480,
        duration: 8040,
        text: "recommendations really make sense but the problem is is as I said earlier this is just returning the descriptions to us",
      },
      {
        start_time: 4021480,
        end_time: 4026680,
        duration: 5200,
        text: "and we don't want to give recommendations of descriptions we want to give recommendations of book titles",
      },
      {
        start_time: 4026680,
        end_time: 4033799,
        duration: 7119,
        text: "and authors and things like that so we obviously need some way of using these recommendations to filter the data frame",
      },
      {
        start_time: 4033799,
        end_time: 4041000,
        duration: 7201,
        text: "containing all of our books and this is of course where those isbns come back in that I mentioned earlier so what I'm",
      },
      {
        start_time: 4041000,
        end_time: 4048319,
        duration: 7319,
        text: "going to do is create a piece of panda code that is going to filter that books data frame just to the first result that",
      },
      {
        start_time: 4048319,
        end_time: 4054200,
        duration: 5881,
        text: "was returned as our query so the one at the top there children will discover the exciting world of their own backyard",
      },
      {
        start_time: 4054200,
        end_time: 4061760,
        duration: 7560,
        text: "blah blah blah so let's have a closer look at this piece of code so we can see in this section here what we're doing is",
      },
      {
        start_time: 4061760,
        end_time: 4068319,
        duration: 6559,
        text: "take the docs take all of the recommendations that were returned from the vector database extract from them",
      },
      {
        start_time: 4068319,
        end_time: 4074839,
        duration: 6520,
        text: "the page content so just the text split that based on space and keep only the",
      },
      {
        start_time: 4074839,
        end_time: 4082079,
        duration: 7240,
        text: "first element so the ISBN and then strip it so that there's no trailing white space and then convert",
      },
      {
        start_time: 4082079,
        end_time: 4087960,
        duration: 5881,
        text: "the whole thing to an integer and the reason we need to do that conversion to an integer is because the field in the",
      },
      {
        start_time: 4087960,
        end_time: 4093000,
        duration: 5040,
        text: "data frame is also integer so they need to match in data type otherwise that",
      },
      {
        start_time: 4093000,
        end_time: 4098040,
        duration: 5040,
        text: "matching won't work and then we pass all of that into a pandas conditional and",
      },
      {
        start_time: 4098040,
        end_time: 4106440,
        duration: 8400,
        text: "that essentially tells pandas please give me only that book which has this ISBN so let's see how it works",
      },
      {
        start_time: 4106440,
        end_time: 4112520,
        duration: 6080,
        text: "so if we run that it seems to have worked perfectly we have a book that makes sense Baby Einstein Neighborhood",
      },
      {
        start_time: 4112520,
        end_time: 4119838,
        duration: 7318,
        text: "Animals and so this method has worked really cleanly and gives us a really quick and clean way of looking up the",
      },
      {
        start_time: 4119839,
        end_time: 4125719,
        duration: 5880,
        text: "books that are recommended through the descriptions so this is really nice but we've only done it for one",
      },
      {
        start_time: 4125719,
        end_time: 4131960,
        duration: 6241,
        text: "recommendation from one query so in order to make our lives a bit easier let's bundle all of this functionality",
      },
      {
        start_time: 4131960,
        end_time: 4137480,
        duration: 5520,
        text: "up into a function so we can do this for every query that we want to do and it's",
      },
      {
        start_time: 4137480,
        end_time: 4144440,
        duration: 6960,
        text: "going to return all of the recommendations so let's call this function retrieve semantic",
      },
      {
        start_time: 4144440,
        end_time: 4149640,
        duration: 5200,
        text: "recommendations and we're going to give it two arguments we're going to give it the query and we're going to give it the",
      },
      {
        start_time: 4149640,
        end_time: 4156199,
        duration: 6559,
        text: "number of recommendations we want the top K and it's going to return a panda data frame now the first thing we're",
      },
      {
        start_time: 4156199,
        end_time: 4162560,
        duration: 6361,
        text: "going to pass in is uh the code to basically give us the recommendations so",
      },
      {
        start_time: 4162560,
        end_time: 4168120,
        duration: 5560,
        text: "running that similarity search for the given query against the database then",
      },
      {
        start_time: 4168120,
        end_time: 4175719,
        duration: 7599,
        text: "what we're going to do is create this blank list this is going to contain all of the isbns and what we're going to do",
      },
      {
        start_time: 4175719,
        end_time: 4181040,
        duration: 5321,
        text: "is Loop over each of the recommendations that are returned and for each of them",
      },
      {
        start_time: 4181040,
        end_time: 4187920,
        duration: 6880,
        text: "we're essentially going to do what we did before with extracting the ISBN I've just made a small change in this",
      },
      {
        start_time: 4187920,
        end_time: 4194159,
        duration: 6239,
        text: "function and the reason why is because I found that for some of the descriptions",
      },
      {
        start_time: 4194159,
        end_time: 4200960,
        duration: 6801,
        text: "they were actually enclosed in quotation marks and this caused problems when I was trying to PA the ISBN I couldn't",
      },
      {
        start_time: 4200960,
        end_time: 4206679,
        duration: 5719,
        text: "recognize it as an integer so basically in this case what I do is once we have",
      },
      {
        start_time: 4206679,
        end_time: 4211840,
        duration: 5161,
        text: "the page content I strip off the quotation marks and then I split and keep the first element and convert that",
      },
      {
        start_time: 4211840,
        end_time: 4218199,
        duration: 6359,
        text: "to an INT and what we have in return in this books list is a bunch of int",
      },
      {
        start_time: 4218199,
        end_time: 4224159,
        duration: 5960,
        text: "isbns and then what we do as the final step is we filter the books data set",
      },
      {
        start_time: 4224159,
        end_time: 4229400,
        duration: 5241,
        text: "based on that so we keep all the IBN that match those in the books list so",
      },
      {
        start_time: 4229400,
        end_time: 4234600,
        duration: 5200,
        text: "let's now have a look at how we go with our query a book to teach children about",
      },
      {
        start_time: 4234600,
        end_time: 4239719,
        duration: 5119,
        text: "nature and these are the results that we get and they all look great you know",
      },
      {
        start_time: 4239719,
        end_time: 4246800,
        duration: 7081,
        text: "these all totally make sense I actually see a r doll book that I read when I was a kid so that's actually quite nice and",
      },
      {
        start_time: 4246800,
        end_time: 4253480,
        duration: 6680,
        text: "the Very Hungry Caterpillar as well um so yeah this has worked very very well and this is our first building block for",
      },
      {
        start_time: 4253480,
        end_time: 4259360,
        duration: 5880,
        text: "our recommender and I think you can see that even with the small amount of theory that we needed to cover this is",
      },
      {
        start_time: 4259360,
        end_time: 4267159,
        duration: 7799,
        text: "not terribly complex to understand and it's very very powerful and gives you very flexible ways of working with",
      },
      {
        start_time: 4267000,
        end_time: 4534000,
        duration: 267000,
        text: "Introduction to zero-shot text classification using LLMs",
      },
      {
        start_time: 4267159,
        end_time: 4273960,
        duration: 6801,
        text: "text so now that we have our basic recommender let's start thinking about some things we could do to improve it or",
      },
      {
        start_time: 4273960,
        end_time: 4281040,
        duration: 7080,
        text: "to refine it so have a think back to the first section when we were looking at our data set and remember we had that",
      },
      {
        start_time: 4281040,
        end_time: 4287000,
        duration: 5960,
        text: "categories field that was really really messy and you might remember that I said to put a pin in it that we were going to",
      },
      {
        start_time: 4287000,
        end_time: 4293600,
        duration: 6600,
        text: "come back to it and tidy it up well this is what we're going to do in this section we're going to use llms to do a",
      },
      {
        start_time: 4293600,
        end_time: 4300080,
        duration: 6480,
        text: "technique called text classification that's going to help us sort those categories into a much smaller number of",
      },
      {
        start_time: 4300080,
        end_time: 4307080,
        duration: 7000,
        text: "groups once we have this smaller number of categories we can add this to our book recommender as a potential filter",
      },
      {
        start_time: 4307080,
        end_time: 4312679,
        duration: 5599,
        text: "so text classification as you might guess from the name is the branch of natural language processing which is",
      },
      {
        start_time: 4312679,
        end_time: 4317840,
        duration: 5161,
        text: "concerned with trying to assign text to different discret groups so for example",
      },
      {
        start_time: 4317840,
        end_time: 4324320,
        duration: 6480,
        text: "let's say we have this book description that we've seen before a heartwarming journey of love and friendship and we",
      },
      {
        start_time: 4324320,
        end_time: 4330800,
        duration: 6480,
        text: "might for example want to sort it as either fiction or non-fiction so we could build a text classification model",
      },
      {
        start_time: 4330800,
        end_time: 4335880,
        duration: 5080,
        text: "which is trained to do so and voila it predicts for us that this book is likely",
      },
      {
        start_time: 4335880,
        end_time: 4342960,
        duration: 7080,
        text: "to be fiction we can repeat this with each of our book descriptions this one about the ambitious attorney also gets",
      },
      {
        start_time: 4342960,
        end_time: 4349000,
        duration: 6040,
        text: "classified as fiction Edward given Masterpiece is of course classified as",
      },
      {
        start_time: 4349000,
        end_time: 4354679,
        duration: 5679,
        text: "non-fiction and then finally our book about relationships is also assigned to",
      },
      {
        start_time: 4354679,
        end_time: 4361639,
        duration: 6960,
        text: "non-fiction Now text classification doesn't need to be done by llms of course this is an older problem that we",
      },
      {
        start_time: 4361639,
        end_time: 4368760,
        duration: 7121,
        text: "were solving before llms but it does turn out that text classification is something that they're rather good at",
      },
      {
        start_time: 4368760,
        end_time: 4374440,
        duration: 5680,
        text: "there are few different ways that llms can do text classification but the one we're going to use in this tutorial is",
      },
      {
        start_time: 4374440,
        end_time: 4381120,
        duration: 6680,
        text: "called Z shot classification what this involves is taking a pre-trained llm and without any",
      },
      {
        start_time: 4381120,
        end_time: 4386880,
        duration: 5760,
        text: "further training no further work getting the model to assign text to a category",
      },
      {
        start_time: 4386880,
        end_time: 4393080,
        duration: 6200,
        text: "what we do is we provide the model with a prompt like the one that you can see on the screen and the text that we want",
      },
      {
        start_time: 4393080,
        end_time: 4398120,
        duration: 5040,
        text: "it to classify and we may optionally provide it with our categories that we",
      },
      {
        start_time: 4398120,
        end_time: 4404239,
        duration: 6119,
        text: "want to classify as part of the prompt so in the case of our book descriptions we could take a pre-trained model that",
      },
      {
        start_time: 4404239,
        end_time: 4410320,
        duration: 6081,
        text: "is good at doing doing zero shot classification and without any further work instructed to assign the books to",
      },
      {
        start_time: 4410320,
        end_time: 4418040,
        duration: 7720,
        text: "either fiction or non-fiction so we can see a simplified version of how an llm might do that here we have this prompt",
      },
      {
        start_time: 4418040,
        end_time: 4424120,
        duration: 6080,
        text: "telling the model to do the classification and what the categories are and that's all the model needs to",
      },
      {
        start_time: 4424120,
        end_time: 4429199,
        duration: 5079,
        text: "either classify it as fiction or nonfiction so how can models do this out",
      },
      {
        start_time: 4429199,
        end_time: 4436360,
        duration: 7161,
        text: "of the box without us doing anything else well it seems to be something that sufficiently large llms able to do",
      },
      {
        start_time: 4436360,
        end_time: 4441480,
        duration: 5120,
        text: "models that are 100 million parameters or more as we've discussed Transformer",
      },
      {
        start_time: 4441480,
        end_time: 4447120,
        duration: 5640,
        text: "based models are good at understanding which words are likely to be semantically related to one another due",
      },
      {
        start_time: 4447120,
        end_time: 4453880,
        duration: 6760,
        text: "to seeing them in related context during training so in order to be able to do successful zero shot classification of",
      },
      {
        start_time: 4453880,
        end_time: 4460120,
        duration: 6240,
        text: "our book descriptions the model will need to have seen enough text showing that certain types of topics are likely",
      },
      {
        start_time: 4460120,
        end_time: 4466840,
        duration: 6720,
        text: "to be fiction or non-fiction in his training data so for example let's say that we're trying to train an encoda",
      },
      {
        start_time: 4466840,
        end_time: 4472400,
        duration: 5560,
        text: "decoda model during training this model will see an enormous variety of texts",
      },
      {
        start_time: 4472400,
        end_time: 4477560,
        duration: 5160,
        text: "from Wikipedia articles to news stories to Amazon reviews and somewhere in that",
      },
      {
        start_time: 4477560,
        end_time: 4484679,
        duration: 7119,
        text: "training data there is likely to be information about books with information about them such as their categories so",
      },
      {
        start_time: 4484679,
        end_time: 4491600,
        duration: 6921,
        text: "in the training data the model might see a book that is a moving Tale Of Love Redemption and family which is further",
      },
      {
        start_time: 4491600,
        end_time: 4497760,
        duration: 6160,
        text: "described as a fiction book after being exposed to enough similar examples the",
      },
      {
        start_time: 4497760,
        end_time: 4503480,
        duration: 5720,
        text: "model will have a pretty good understanding that books with this sort of topic are fiction so when when we",
      },
      {
        start_time: 4503480,
        end_time: 4508920,
        duration: 5440,
        text: "prompt it with the book that we want to classify the model will be able to compare the book's description with what",
      },
      {
        start_time: 4508920,
        end_time: 4516760,
        duration: 7840,
        text: "it's already seen during training and predict that that is most likely to be a fiction book so we can see that here a",
      },
      {
        start_time: 4516760,
        end_time: 4523199,
        duration: 6439,
        text: "heartwarming journey of love and friendship is similar enough to things that it's seen in the past so it knows",
      },
      {
        start_time: 4523199,
        end_time: 4530159,
        duration: 6960,
        text: "that this is likely to be a fiction so now that we understand the theory about how llms can do zero shot text",
      },
      {
        start_time: 4530159,
        end_time: 4536159,
        duration: 6000,
        text: "classification let's jump into doing this for our book descriptions so as we saw in the last",
      },
      {
        start_time: 4534000,
        end_time: 4941000,
        duration: 407000,
        text: "Finding LLMs for zero-shot classification on Hugging Face",
      },
      {
        start_time: 4536159,
        end_time: 4544560,
        duration: 8401,
        text: "section when we were cleaning and screening the data we have way way too many categories for the books so if we",
      },
      {
        start_time: 4544560,
        end_time: 4552040,
        duration: 7480,
        text: "revisit this and we have a look at it again what we can see is that we very very quickly go from sizable categories",
      },
      {
        start_time: 4552040,
        end_time: 4557880,
        duration: 5840,
        text: "things like fiction or juvenile fiction down to really small categories that get",
      },
      {
        start_time: 4557880,
        end_time: 4564000,
        duration: 6120,
        text: "really specific things like self-help Computing Etc and the thing is is",
      },
      {
        start_time: 4564000,
        end_time: 4570239,
        duration: 6239,
        text: "because we intend to use this for filtering we first we don't want too many but we also don't want each of",
      },
      {
        start_time: 4570239,
        end_time: 4575320,
        duration: 5081,
        text: "these to be too small because what we're looking for is something that's going to",
      },
      {
        start_time: 4575320,
        end_time: 4580760,
        duration: 5440,
        text: "facet the recommendations that are returned from the vector search and that's already going to be a subset of",
      },
      {
        start_time: 4580760,
        end_time: 4586960,
        duration: 6200,
        text: "the books so we don't want to you know divide up the categories into things that are two too small or too specific",
      },
      {
        start_time: 4586960,
        end_time: 4594000,
        duration: 7040,
        text: "so if we limit this to categories that only have 50 books or more we can essentially see that we have a number of",
      },
      {
        start_time: 4594000,
        end_time: 4599600,
        duration: 5600,
        text: "quite broad categories including fiction juvenile fiction and juvenile",
      },
      {
        start_time: 4599600,
        end_time: 4605679,
        duration: 6079,
        text: "non-fiction so let's go ahead and have a closer look at the Juvenile fiction",
      },
      {
        start_time: 4605679,
        end_time: 4612760,
        duration: 7081,
        text: "category we can see you know this looks pretty broad it looks like it really just contains you know fiction books for",
      },
      {
        start_time: 4612760,
        end_time: 4619920,
        duration: 7160,
        text: "children so it looks like it could be a potentially useful category and if we do the same thing with juvenile non-fiction",
      },
      {
        start_time: 4619920,
        end_time: 4625520,
        duration: 5600,
        text: "we can see you know a number of books like graph books or educational books",
      },
      {
        start_time: 4625520,
        end_time: 4632000,
        duration: 6480,
        text: "for children so this also could be a potentially useful category so it's the",
      },
      {
        start_time: 4632000,
        end_time: 4638760,
        duration: 6760,
        text: "easiest thing that we can focus on when creating the book categories is by focusing on this fiction non-fiction",
      },
      {
        start_time: 4638760,
        end_time: 4644280,
        duration: 5520,
        text: "distinction so basically what you can see is I pre-created a mapping of the",
      },
      {
        start_time: 4644280,
        end_time: 4649840,
        duration: 5560,
        text: "top 12 book categories to either fiction or non-fiction and in addition I",
      },
      {
        start_time: 4649840,
        end_time: 4655800,
        duration: 5960,
        text: "preserved juvenile fiction and juvenile non-fiction as separate categories but I've renamed them as children's fiction",
      },
      {
        start_time: 4655800,
        end_time: 4662040,
        duration: 6240,
        text: "and children's non-fiction so for example you can see that I've changed biography and autobiography to",
      },
      {
        start_time: 4662040,
        end_time: 4668960,
        duration: 6920,
        text: "non-fiction I've Changed History to non-fiction but I've changed things like comics and graphic novels to fiction and",
      },
      {
        start_time: 4668960,
        end_time: 4675880,
        duration: 6920,
        text: "drama to fiction so what this is going to give us is a nice chunk of the data",
      },
      {
        start_time: 4675880,
        end_time: 4682360,
        duration: 6480,
        text: "which is either classified as fiction or non-fiction and that's going to give us a starter for classifying the rest of",
      },
      {
        start_time: 4682360,
        end_time: 4687840,
        duration: 5480,
        text: "the books so if we have a look at how many of the books now have known labels",
      },
      {
        start_time: 4687840,
        end_time: 4694719,
        duration: 6879,
        text: "we can do this by checking which of the simple categories are not missing we can see that we have",
      },
      {
        start_time: 4694719,
        end_time: 4699800,
        duration: 5081,
        text: "3743 books so this is a pretty good basis and this is going to form the",
      },
      {
        start_time: 4699800,
        end_time: 4705440,
        duration: 5640,
        text: "basis of the data set that we're going to check our llm based classifications on",
      },
      {
        start_time: 4705440,
        end_time: 4712239,
        duration: 6799,
        text: "so at the beginning of this section we talked about how you can get llms to do a task called zero shot classification",
      },
      {
        start_time: 4712239,
        end_time: 4718600,
        duration: 6361,
        text: "that is you can get them to sort pieces of text into particular categories without having being explicitly trained",
      },
      {
        start_time: 4718600,
        end_time: 4725639,
        duration: 7039,
        text: "to do so so you might be thinking well where can I get such a model where can I find a model they can do zero shot",
      },
      {
        start_time: 4725639,
        end_time: 4733199,
        duration: 7560,
        text: "classification and the place we're going to be getting our model from today is hugging face so what is hugging face",
      },
      {
        start_time: 4733199,
        end_time: 4739760,
        duration: 6561,
        text: "hugging face is a company that has a significant open- Source branch and this open-source branch is responsible for",
      },
      {
        start_time: 4739760,
        end_time: 4748159,
        duration: 8399,
        text: "hosting and distributing all of the major open source llms as well as other types of AI models such as text to image",
      },
      {
        start_time: 4748159,
        end_time: 4753400,
        duration: 5241,
        text: "voice models and multimodal models so we can see that we're here on the",
      },
      {
        start_time: 4753400,
        end_time: 4761159,
        duration: 7759,
        text: "huggingface ./ models page and on this page you can see a whole variety of",
      },
      {
        start_time: 4761159,
        end_time: 4767120,
        duration: 5961,
        text: "different models that you can use for different tasks and we go down to zero shot classification under natural",
      },
      {
        start_time: 4767120,
        end_time: 4774000,
        duration: 6880,
        text: "language processing what we can see is a whole bunch of different models that we could potentially use for our zero shot",
      },
      {
        start_time: 4774000,
        end_time: 4781400,
        duration: 7400,
        text: "classification task so you might be thinking okay well how can I use this model and happily hugging face also",
      },
      {
        start_time: 4781400,
        end_time: 4786840,
        duration: 5440,
        text: "provides packages for us to interact with these models and the most powerful one for working with large language",
      },
      {
        start_time: 4786840,
        end_time: 4793480,
        duration: 6640,
        text: "models is called Transformers so Transformers gives us a whole bunch of functionality in Python",
      },
      {
        start_time: 4793480,
        end_time: 4798840,
        duration: 5360,
        text: "for working with open source large language models that are hosted on hugging face and you'll see we're going",
      },
      {
        start_time: 4798840,
        end_time: 4806480,
        duration: 7640,
        text: "to use it not only for our zero shot classification task but also for our sentiment analysis task down the line so",
      },
      {
        start_time: 4806480,
        end_time: 4812520,
        duration: 6040,
        text: "after this tutorial you might want to learn more about working with large language models and the best course I've",
      },
      {
        start_time: 4812520,
        end_time: 4817800,
        duration: 5280,
        text: "ever come across for this is hugging faces natural language processing course",
      },
      {
        start_time: 4817800,
        end_time: 4824719,
        duration: 6919,
        text: "so if you visit their URL huggingface clearn NLP course you will be taken to",
      },
      {
        start_time: 4824719,
        end_time: 4831120,
        duration: 6401,
        text: "to their homepage and this course is such an amazing free resource it takes",
      },
      {
        start_time: 4831120,
        end_time: 4837920,
        duration: 6800,
        text: "you through from the basics how to work with large language models what the different types of architecture mean",
      },
      {
        start_time: 4837920,
        end_time: 4844000,
        duration: 6080,
        text: "which we have covered a bit in this course and different ways of working with large language models beyond what",
      },
      {
        start_time: 4844000,
        end_time: 4850840,
        duration: 6840,
        text: "we cover in this tutorial so we've talked about the fact that hugging face has these zero shot classification",
      },
      {
        start_time: 4850840,
        end_time: 4858239,
        duration: 7399,
        text: "models that we want to use for our task but pie charm gives us a really nice shortcut to being able to choose and",
      },
      {
        start_time: 4858239,
        end_time: 4863520,
        duration: 5281,
        text: "access these models so I click in a new cell in my Jupiter notebook and I can",
      },
      {
        start_time: 4863520,
        end_time: 4868719,
        duration: 5199,
        text: "also do this if I'm using a python script what I will see is a context menu",
      },
      {
        start_time: 4868719,
        end_time: 4874159,
        duration: 5440,
        text: "which will give me the option to pick insert hugging face model so once we've",
      },
      {
        start_time: 4874159,
        end_time: 4879600,
        duration: 5441,
        text: "selected that we can see that we're presented with this tool window which gives us the same functionality that we",
      },
      {
        start_time: 4879600,
        end_time: 4886159,
        duration: 6559,
        text: "have on the hugging face models page so if we go over on the left hand side you can see that we can filter Again by task",
      },
      {
        start_time: 4886159,
        end_time: 4891239,
        duration: 5080,
        text: "type we select of course zero shot classification and then you can see that",
      },
      {
        start_time: 4891239,
        end_time: 4897800,
        duration: 6561,
        text: "we're presented with the same models that we saw on the hugging face models page we can change how they're sorted by",
      },
      {
        start_time: 4897800,
        end_time: 4903120,
        duration: 5320,
        text: "likes by downloads created at or last Modified by the license type and we can",
      },
      {
        start_time: 4903120,
        end_time: 4908800,
        duration: 5680,
        text: "also filter by tags so we're going to pick the most popular model the BART",
      },
      {
        start_time: 4908800,
        end_time: 4914600,
        duration: 5800,
        text: "large mnli this is a very popular model for zero shot classification tasks and",
      },
      {
        start_time: 4914600,
        end_time: 4921000,
        duration: 6400,
        text: "we can see that within this tool window we can also see the model card and that gives us a whole bunch of useful",
      },
      {
        start_time: 4921000,
        end_time: 4926040,
        duration: 5040,
        text: "information about the model including how to use it so if we go down to the",
      },
      {
        start_time: 4926040,
        end_time: 4931679,
        duration: 5639,
        text: "use model button we can see that pycharm has inserted some boilerplate code for",
      },
      {
        start_time: 4931679,
        end_time: 4938239,
        duration: 6560,
        text: "us to help us get started and we're going to use this as the basis of our classifier so having had a look at the",
      },
      {
        start_time: 4938239,
        end_time: 4943480,
        duration: 5241,
        text: "model card it tells us that if we want to be able to use this model for classification for zero shot",
      },
      {
        start_time: 4941000,
        end_time: 5184000,
        duration: 243000,
        text: "Classifying book descriptions",
      },
      {
        start_time: 4943480,
        end_time: 4950520,
        duration: 7040,
        text: "classification we need to set up the categories that we want the model to be able to classify into so I've decided to",
      },
      {
        start_time: 4950520,
        end_time: 4956280,
        duration: 5760,
        text: "just limit this to fiction and non-fiction I could have of course included the children's non-fiction and",
      },
      {
        start_time: 4956280,
        end_time: 4964239,
        duration: 7959,
        text: "fiction but just to keep it simple I decided to just limit to the adult classes so what we do is we set this up",
      },
      {
        start_time: 4964239,
        end_time: 4970199,
        duration: 5960,
        text: "as a list and we include that before we set up our model Pipeline and then one",
      },
      {
        start_time: 4970199,
        end_time: 4978159,
        duration: 7960,
        text: "additional change that you can make to this boilerplate code is if your device has a GPU you can specify that you want",
      },
      {
        start_time: 4978159,
        end_time: 4985080,
        duration: 6921,
        text: "the model to be able to use that so you can see that py charm is automatically completing device equals z you can use",
      },
      {
        start_time: 4985080,
        end_time: 4991480,
        duration: 6400,
        text: "this argument if you have Cuda I do not I have an apple machine which uses MPS",
      },
      {
        start_time: 4991480,
        end_time: 4999400,
        duration: 7920,
        text: "so that is the argument that I will pass in so I'm just going to execute that cell and now that that's run our model",
      },
      {
        start_time: 4999400,
        end_time: 5005000,
        duration: 5600,
        text: "is loaded in and ready to start making predictions before we start using it I",
      },
      {
        start_time: 5005000,
        end_time: 5011360,
        duration: 6360,
        text: "just want to show you one more thing and that's the hugging face tool window in pie charm so if you click on the hugging",
      },
      {
        start_time: 5011360,
        end_time: 5017239,
        duration: 5879,
        text: "Face logo over in the left hand side of pie charm you'll see this tool window pop up and what you can see that it",
      },
      {
        start_time: 5017239,
        end_time: 5023840,
        duration: 6601,
        text: "contains is every single one of the hugging face models that I've downloaded because what hugging face does is",
      },
      {
        start_time: 5023840,
        end_time: 5029080,
        duration: 5240,
        text: "downloads encases models rather than you having to redownload them every time you",
      },
      {
        start_time: 5029080,
        end_time: 5034120,
        duration: 5040,
        text: "want to use them now this is great but one problem that this can lead to is you",
      },
      {
        start_time: 5034120,
        end_time: 5040719,
        duration: 6599,
        text: "can see see from this size column that the models can be quite big so it's a good idea to review these models",
      },
      {
        start_time: 5040719,
        end_time: 5046520,
        duration: 5801,
        text: "periodically make sure that any models that you're not using you delete and that's something you can do right from",
      },
      {
        start_time: 5046520,
        end_time: 5053840,
        duration: 7320,
        text: "that tool window rather than having to go to the directory so let's now get to doing our zero shot classification and",
      },
      {
        start_time: 5053840,
        end_time: 5060159,
        duration: 6319,
        text: "first things first let's have a look at the first of the known fiction examples that we have so we're just going to do",
      },
      {
        start_time: 5060159,
        end_time: 5065760,
        duration: 5601,
        text: "this pend as filtering where symbol categories equals fiction take the description and the reason we add this",
      },
      {
        start_time: 5065760,
        end_time: 5071040,
        duration: 5280,
        text: "reset index argument is because when we do a filtering obviously we're left with",
      },
      {
        start_time: 5071040,
        end_time: 5078159,
        duration: 7119,
        text: "rows that have you know the index they had in the original data frame so by resetting the index we know that we're",
      },
      {
        start_time: 5078159,
        end_time: 5086080,
        duration: 7921,
        text: "resetting it so that it's now for the filter data frame and zero is going to be the first example so let's now run",
      },
      {
        start_time: 5086080,
        end_time: 5092800,
        duration: 6720,
        text: "our classifier over that sequence and you can see that the code here is very very simple we just need to pass in the",
      },
      {
        start_time: 5092800,
        end_time: 5098520,
        duration: 5720,
        text: "sequence that we want to classify and the categories we wanted to classify into and then once we've done that you",
      },
      {
        start_time: 5098520,
        end_time: 5103880,
        duration: 5360,
        text: "can see it's quite fast and we get back the labels and we get back the scores so",
      },
      {
        start_time: 5103880,
        end_time: 5111000,
        duration: 7120,
        text: "what this represents is the probability that that particular description that piece of text belongs to each of those",
      },
      {
        start_time: 5111000,
        end_time: 5117600,
        duration: 6600,
        text: "categories what we can see is that the probability that it is fiction is much much higher than non-fiction so just",
      },
      {
        start_time: 5117600,
        end_time: 5124119,
        duration: 6519,
        text: "like the known label tells us the model has also predicted that this is a fiction book so in order to actually get",
      },
      {
        start_time: 5124119,
        end_time: 5129719,
        duration: 5600,
        text: "the predicted label out of this output we need to do a bit of postprocessing so the first thing we're going to do is to",
      },
      {
        start_time: 5129719,
        end_time: 5134800,
        duration: 5081,
        text: "take that array that contains the scores and we're going to run numpy's ug Max",
      },
      {
        start_time: 5134800,
        end_time: 5140000,
        duration: 5200,
        text: "method over it and what that's going to yield is the index of the highest",
      },
      {
        start_time: 5140000,
        end_time: 5145320,
        duration: 5320,
        text: "probability now as you can see pie charm is telling me we have an error here it's because I haven't imported numpy so I'm",
      },
      {
        start_time: 5145320,
        end_time: 5151639,
        duration: 6319,
        text: "going to go ahead and do that so now that we have that index what we can do is we can now take the array that",
      },
      {
        start_time: 5151639,
        end_time: 5157920,
        duration: 6281,
        text: "contains the labels and take the index of the maximum",
      },
      {
        start_time: 5157920,
        end_time: 5165280,
        duration: 7360,
        text: "probability and if we have a look at that it tells us correctly that the maximum probability the most likely",
      },
      {
        start_time: 5165280,
        end_time: 5171880,
        duration: 6600,
        text: "label is fiction so let's now go ahead and bundle all of that up into a function we'll call it generate",
      },
      {
        start_time: 5171880,
        end_time: 5177400,
        duration: 5520,
        text: "predictions and it's basically just going to take in the sequence and it's going to take in the categories it's",
      },
      {
        start_time: 5177400,
        end_time: 5185199,
        duration: 7799,
        text: "going to run those predictions that zero shot classification and then it's going to extract the maximum label",
      },
      {
        start_time: 5184000,
        end_time: 5719000,
        duration: 535000,
        text: "Checking classifier accuracy",
      },
      {
        start_time: 5185199,
        end_time: 5191400,
        duration: 6201,
        text: "so now we set things up so we can get this model to do zero shot classification over a description and",
      },
      {
        start_time: 5191400,
        end_time: 5197199,
        duration: 5799,
        text: "tell us what the most likely label is fiction or non-fiction so the next thing",
      },
      {
        start_time: 5197199,
        end_time: 5202320,
        duration: 5121,
        text: "we want to know is how good is this model at actually doing this task so to",
      },
      {
        start_time: 5202320,
        end_time: 5209159,
        duration: 6839,
        text: "find this out what we're going to do is take a sizable sample of both fiction and non-fiction books we're going to get",
      },
      {
        start_time: 5209159,
        end_time: 5214840,
        duration: 5681,
        text: "the classifier to predict a label and then we're going to compare it to the known label",
      },
      {
        start_time: 5214840,
        end_time: 5221199,
        duration: 6359,
        text: "so the first thing we're going to do is import tqdm because that's going to give us a way of knowing how long we've got",
      },
      {
        start_time: 5221199,
        end_time: 5226360,
        duration: 5161,
        text: "left in our Loop because it does take a while to do these predictions over 600",
      },
      {
        start_time: 5226360,
        end_time: 5232800,
        duration: 6440,
        text: "examples and then what we're going to do is create blank lists for the actual categories the known categories and the",
      },
      {
        start_time: 5232800,
        end_time: 5240280,
        duration: 7480,
        text: "predicted categories the ones that the model comes up with then we set up our for loop with a range of 0 to",
      },
      {
        start_time: 5240280,
        end_time: 5245480,
        duration: 5200,
        text: "300 and what we do is we take examples",
      },
      {
        start_time: 5245480,
        end_time: 5251480,
        duration: 6000,
        text: "where the books have the simple category fiction extract just the description and",
      },
      {
        start_time: 5251480,
        end_time: 5257239,
        duration: 5759,
        text: "basically iterate through the first 300 of those and for each of them we",
      },
      {
        start_time: 5257239,
        end_time: 5262600,
        duration: 5361,
        text: "generate the predicted category and we add that to our predicted cats list and",
      },
      {
        start_time: 5262600,
        end_time: 5269719,
        duration: 7119,
        text: "then for our actual cats list we just add fiction then let's repeat the same thing for non-fiction so we change the",
      },
      {
        start_time: 5269719,
        end_time: 5276560,
        duration: 6841,
        text: "filtering to non-fiction and we change the actual categories to non-fiction and then we go ahead and run this and",
      },
      {
        start_time: 5276560,
        end_time: 5283679,
        duration: 7119,
        text: "this is going to take a while so I'm just going to skip ahead and you'll see the results so now that that's finished",
      },
      {
        start_time: 5283679,
        end_time: 5291040,
        duration: 7361,
        text: "let's go ahead and throw those two lists in a panda's data frame and we have these two columns actual categories and",
      },
      {
        start_time: 5291040,
        end_time: 5298040,
        duration: 7000,
        text: "predictor categories and you can see that py charm did a very nice job of predicting what I wanted to type there",
      },
      {
        start_time: 5298040,
        end_time: 5303480,
        duration: 5440,
        text: "and if we have a look at our data frame we can see actually from the first glance it looks like it's done a pretty",
      },
      {
        start_time: 5303480,
        end_time: 5308679,
        duration: 5199,
        text: "good job so the next step is to create a column where we compare these actual",
      },
      {
        start_time: 5308679,
        end_time: 5314639,
        duration: 5960,
        text: "categories to the predictions and see if they match and let's go ahead and start creating that we're going to call it",
      },
      {
        start_time: 5314639,
        end_time: 5319719,
        duration: 5080,
        text: "correct prediction and again you can see that py Chom has jumped ahead and autoc",
      },
      {
        start_time: 5319719,
        end_time: 5325119,
        duration: 5400,
        text: "completed most of that I would prefer it to be 1 and zero rather than true and",
      },
      {
        start_time: 5325119,
        end_time: 5332080,
        duration: 6961,
        text: "false it's basically the same thing but basically it will be one if the predictions lined up and it will be zero",
      },
      {
        start_time: 5332080,
        end_time: 5338119,
        duration: 6039,
        text: "if it didn't and then the final thing we can do is just check how many of those",
      },
      {
        start_time: 5338119,
        end_time: 5347199,
        duration: 9080,
        text: "predictions were correct and again pie Jam's going ahead and completing that code and we can see that we got 78%",
      },
      {
        start_time: 5347199,
        end_time: 5352520,
        duration: 5321,
        text: "correct so this is actually a pretty good rate for zero shot classification",
      },
      {
        start_time: 5352520,
        end_time: 5359040,
        duration: 6520,
        text: "it does mean we're getting around 1 in five incorrect but for something that is predicting on categories it was not",
      },
      {
        start_time: 5359040,
        end_time: 5365800,
        duration: 6760,
        text: "explicitly designed to predict on this is actually a pretty good rate so we can be happy with this and we can go ahead",
      },
      {
        start_time: 5365800,
        end_time: 5371600,
        duration: 5800,
        text: "and use this model to predict all of the missing categories okay so in order to predict",
      },
      {
        start_time: 5371600,
        end_time: 5378360,
        duration: 6760,
        text: "the category label for all of the missing boards what we're going to do is we're first going to create two lists",
      },
      {
        start_time: 5378360,
        end_time: 5384760,
        duration: 6400,
        text: "we're going to create a list for the isbns and we're going to create a list for the predictions so the reason we're",
      },
      {
        start_time: 5384760,
        end_time: 5390639,
        duration: 5879,
        text: "doing this is because what we're about to do is subset the data frame and take",
      },
      {
        start_time: 5390639,
        end_time: 5397840,
        duration: 7201,
        text: "only those where the category is missing or where the simple category is missing and we need the ISBN so that we can",
      },
      {
        start_time: 5397840,
        end_time: 5404880,
        duration: 7040,
        text: "actually merge that back into the full data frame later so let's now go ahead",
      },
      {
        start_time: 5404880,
        end_time: 5410719,
        duration: 5839,
        text: "and create that subset of the full data frame so we use the filtering code to",
      },
      {
        start_time: 5410719,
        end_time: 5418080,
        duration: 7361,
        text: "pick only those books where the simple category is missing is Na and we keep those two fields ispn and the",
      },
      {
        start_time: 5418080,
        end_time: 5424320,
        duration: 6240,
        text: "description and again we're resetting the index because we want to be able to Loop through it and we need the index to",
      },
      {
        start_time: 5424320,
        end_time: 5429960,
        duration: 5640,
        text: "be contiguous so here we set up another for Loop this time it's for the entire",
      },
      {
        start_time: 5429960,
        end_time: 5436000,
        duration: 6040,
        text: "length of the missing cats data frame then what we do is we take the",
      },
      {
        start_time: 5436000,
        end_time: 5443760,
        duration: 7760,
        text: "description we pass it into our generate predictions function so we extract the most likely category and then what we do",
      },
      {
        start_time: 5443760,
        end_time: 5449480,
        duration: 5720,
        text: "is we attach that category or we append it to the predicted cats list and then",
      },
      {
        start_time: 5449480,
        end_time: 5456320,
        duration: 6840,
        text: "finally we attach the ISBN to the ISBN list or we appended and then finally we",
      },
      {
        start_time: 5456320,
        end_time: 5462560,
        duration: 6240,
        text: "execute that and again this is going to take a while it's even more than the examples we did for checking the",
      },
      {
        start_time: 5462560,
        end_time: 5467639,
        duration: 5079,
        text: "accuracy so I'm going to skip ahead until this is finished so again we're",
      },
      {
        start_time: 5467639,
        end_time: 5473800,
        duration: 6161,
        text: "going to Chuck that into a data frame it will have two columns the isbn13 and the predicted",
      },
      {
        start_time: 5473800,
        end_time: 5480000,
        duration: 6200,
        text: "categories and you can see that data frame here so now that we have that data frame",
      },
      {
        start_time: 5480000,
        end_time: 5486199,
        duration: 6199,
        text: "the last step is basically merging it into the original data frame and using",
      },
      {
        start_time: 5486199,
        end_time: 5492600,
        duration: 6401,
        text: "these categories to replace those that are missing so first step is we're going to use a PD merge to merge those two",
      },
      {
        start_time: 5492600,
        end_time: 5499880,
        duration: 7280,
        text: "data frames we're going to do this on isbn13 and we're going to do a left join so the reason for this is because these",
      },
      {
        start_time: 5499880,
        end_time: 5505560,
        duration: 5680,
        text: "missing books these missing categories are a subset of the original data frame",
      },
      {
        start_time: 5505560,
        end_time: 5510920,
        duration: 5360,
        text: "and we want to be able to keep all the observations so having the books data frame on the left means that we can keep",
      },
      {
        start_time: 5510920,
        end_time: 5518480,
        duration: 7560,
        text: "all the rows when we do this join this second thing we need to do is now that we've merged those data frames there's",
      },
      {
        start_time: 5518480,
        end_time: 5526159,
        duration: 7679,
        text: "going to be a new column called predicted categories in the original data frame so we're going to use a numpy",
      },
      {
        start_time: 5526159,
        end_time: 5532920,
        duration: 6761,
        text: "wear Clause where basically we specify that when the original simple categories",
      },
      {
        start_time: 5532920,
        end_time: 5538800,
        duration: 5880,
        text: "column is missing please use the values from predictor categories the ones that",
      },
      {
        start_time: 5538800,
        end_time: 5545000,
        duration: 6200,
        text: "we just predicted otherwise use the original value and what that gives us is",
      },
      {
        start_time: 5545000,
        end_time: 5550440,
        duration: 5440,
        text: "a mixture of the original known labels and our predicted categories so that's",
      },
      {
        start_time: 5550440,
        end_time: 5556520,
        duration: 6080,
        text: "actually going to improve the overall accuracy of this category because only a subset of them are",
      },
      {
        start_time: 5556520,
        end_time: 5562400,
        duration: 5880,
        text: "predicted and then of course we can finish up by Tiding up and dropping that predicted categories column because we",
      },
      {
        start_time: 5562400,
        end_time: 5567520,
        duration: 5120,
        text: "don't need it anymore so let's now double check that everything has worked",
      },
      {
        start_time: 5567520,
        end_time: 5573920,
        duration: 6400,
        text: "we'll have a look at the data frame let's scroll across to this column we can see that everything looks okay and",
      },
      {
        start_time: 5573920,
        end_time: 5580360,
        duration: 6440,
        text: "when we have a look at our column statistics we can see that we do not have any missing and we have four",
      },
      {
        start_time: 5580360,
        end_time: 5587119,
        duration: 6759,
        text: "distinct categories so everything has worked exactly as we wanted so doing this zero shot classification possibly",
      },
      {
        start_time: 5587119,
        end_time: 5593920,
        duration: 6801,
        text: "got you thinking are there other things I could use it for are there other categories I could predict and of course",
      },
      {
        start_time: 5593920,
        end_time: 5599639,
        duration: 5719,
        text: "sky the limit if the model was trained on data that actually supports these",
      },
      {
        start_time: 5599639,
        end_time: 5604960,
        duration: 5321,
        text: "associations then of course you can absolutely use it for this so one",
      },
      {
        start_time: 5604960,
        end_time: 5612360,
        duration: 7400,
        text: "potential candidate for us is breaking down that fiction category we can see that it's 54% of all of our books so",
      },
      {
        start_time: 5612360,
        end_time: 5619320,
        duration: 6960,
        text: "maybe we want to narrow it down to specific fiction types however a challenge that we have is having",
      },
      {
        start_time: 5619320,
        end_time: 5624440,
        duration: 5120,
        text: "insufficient labeled data to actually test how good these predictions are so",
      },
      {
        start_time: 5624440,
        end_time: 5630440,
        duration: 6000,
        text: "you saw that how with the fiction and non-fiction categories we had a lot of labeled examples so we were able to",
      },
      {
        start_time: 5630440,
        end_time: 5635760,
        duration: 5320,
        text: "easily see how good our predictions were but when it comes to specific categories",
      },
      {
        start_time: 5635760,
        end_time: 5642400,
        duration: 6640,
        text: "especially those within fiction we really don't have a lot of examples in the data so let's have a look at this in",
      },
      {
        start_time: 5642400,
        end_time: 5648400,
        duration: 6000,
        text: "our books data set we're going to take that raw categories column and going to filter it down to those cases where",
      },
      {
        start_time: 5648400,
        end_time: 5655040,
        duration: 6640,
        text: "there's an exact match for the following terms so we're going to use romance science fiction and sci-fi as an",
      },
      {
        start_time: 5655040,
        end_time: 5661719,
        duration: 6679,
        text: "alternative fantasy horror mystery thriller comedy crime and",
      },
      {
        start_time: 5661719,
        end_time: 5668119,
        duration: 6400,
        text: "historical and when we run this you can see that we get a whole 16",
      },
      {
        start_time: 5668119,
        end_time: 5673639,
        duration: 5520,
        text: "observations so essentially we really don't have enough labeled data in order",
      },
      {
        start_time: 5673639,
        end_time: 5681080,
        duration: 7441,
        text: "to be able to tell how well our classifier will go with more specific categories so we could still do it and",
      },
      {
        start_time: 5681080,
        end_time: 5687880,
        duration: 6800,
        text: "we could still just assume that the model will do a reasonably good job but it is a little bit risky and this is",
      },
      {
        start_time: 5687880,
        end_time: 5693880,
        duration: 6000,
        text: "sort of a lesson we need to keep in mind when we're using llms they're not really magic they're not really different from",
      },
      {
        start_time: 5693880,
        end_time: 5700679,
        duration: 6799,
        text: "any other type of machine learning model we still need to apply the same checks and the same sort of uh processes with",
      },
      {
        start_time: 5700679,
        end_time: 5707159,
        duration: 6480,
        text: "working with them as we would with any other machine learning model so that's it for the end of this section we have",
      },
      {
        start_time: 5707159,
        end_time: 5713320,
        duration: 6161,
        text: "learned a lot about how we can use llms for zero shot classification and the final thing we're going to do is of",
      },
      {
        start_time: 5713320,
        end_time: 5719960,
        duration: 6640,
        text: "course save our nice new data set to file so we can use it in the next",
      },
      {
        start_time: 5719000,
        end_time: 5965000,
        duration: 246000,
        text: "Introduction to using LLMs for sentiment analysis",
      },
      {
        start_time: 5719960,
        end_time: 5725199,
        duration: 5239,
        text: "section so far we've used llms to find the most similar books to each other and",
      },
      {
        start_time: 5725199,
        end_time: 5730239,
        duration: 5040,
        text: "also to classify those books now we're going to use llms to do something called",
      },
      {
        start_time: 5730239,
        end_time: 5736840,
        duration: 6601,
        text: "sentiment analysis that's going to help us determine the emotional tone of those books I also think it's a really nice",
      },
      {
        start_time: 5736840,
        end_time: 5743639,
        duration: 6799,
        text: "way of showing that the type of data you use can open up the possibilities for different types of features in your data",
      },
      {
        start_time: 5743639,
        end_time: 5750280,
        duration: 6641,
        text: "science products because we are working with Text data we have the option of extracting sentiment whereas we're",
      },
      {
        start_time: 5750280,
        end_time: 5755960,
        duration: 5680,
        text: "working with a more traditional data set for recommenders we would wouldn't really have this information so once",
      },
      {
        start_time: 5755960,
        end_time: 5762199,
        duration: 6239,
        text: "we've extracted this information we can include it as part of our recommender to allow our users to filter the books",
      },
      {
        start_time: 5762199,
        end_time: 5767239,
        duration: 5040,
        text: "based on their tone so perhaps someone is after an exciting read so they might",
      },
      {
        start_time: 5767239,
        end_time: 5774040,
        duration: 6801,
        text: "choose something that's suspenseful or maybe they just want to be cheered up so they might choose a book that's joyful",
      },
      {
        start_time: 5774040,
        end_time: 5781199,
        duration: 7159,
        text: "so including this information will allow that additional degree of control for our users so in this section we're going",
      },
      {
        start_time: 5781199,
        end_time: 5788440,
        duration: 7241,
        text: "to revisit text classification but we're going to be applying a different technique using large language models so",
      },
      {
        start_time: 5788440,
        end_time: 5794159,
        duration: 5719,
        text: "first things first what are we doing well we're going to be classifying our text into seven different discreet",
      },
      {
        start_time: 5794159,
        end_time: 5802440,
        duration: 8281,
        text: "emotion categories we have anger disgust fear Joy sadness surprise and of course",
      },
      {
        start_time: 5802440,
        end_time: 5810119,
        duration: 7679,
        text: "a neutral category because sometimes the text will not have any emotional content so using these categories we can",
      },
      {
        start_time: 5810119,
        end_time: 5817159,
        duration: 7040,
        text: "get an llm to classify the dominant emotion expressed in our book descriptions so for example for this",
      },
      {
        start_time: 5817159,
        end_time: 5823400,
        duration: 6241,
        text: "description our old favorite our heartwarming journey of love and friendship the llm is likely predict",
      },
      {
        start_time: 5823400,
        end_time: 5828719,
        duration: 5319,
        text: "that the most likely emotion is Joy now of course we could actually do this",
      },
      {
        start_time: 5828719,
        end_time: 5834119,
        duration: 5400,
        text: "emotion classification using zero shot classification as long as the data set",
      },
      {
        start_time: 5834119,
        end_time: 5841920,
        duration: 7801,
        text: "that the model was originally trained on contains sufficient association between emotional tone and book descriptions but",
      },
      {
        start_time: 5841920,
        end_time: 5849080,
        duration: 7160,
        text: "this time we're actually going to be doing something bit different we're going to be using a technique called fine tuning in order to get an llm that",
      },
      {
        start_time: 5849080,
        end_time: 5854679,
        duration: 5599,
        text: "can do em motion classifications so to understand how fine tuning works and how it's going to",
      },
      {
        start_time: 5854679,
        end_time: 5859920,
        duration: 5241,
        text: "give us an llm that can classify emotions let's revisit our Roberta model",
      },
      {
        start_time: 5859920,
        end_time: 5866159,
        duration: 6239,
        text: "which we first saw when we were talking about document embeddings so this Roberta model is made up of a sequence",
      },
      {
        start_time: 5866159,
        end_time: 5872520,
        duration: 6361,
        text: "of layers we have our word embedding layers we have our encoder layers and then we have those final layers which",
      },
      {
        start_time: 5872520,
        end_time: 5879880,
        duration: 7360,
        text: "allow the model to do that mask word prediction task that it was initially trained to do with fine-tuning we can",
      },
      {
        start_time: 5879880,
        end_time: 5885960,
        duration: 6080,
        text: "throw away those last layers that we used to do that mass word prediction task and we can replace it with layers",
      },
      {
        start_time: 5885960,
        end_time: 5893320,
        duration: 7360,
        text: "that are instead used to predict motion categories what we then do is we take a small labeled data set and this data set",
      },
      {
        start_time: 5893320,
        end_time: 5901040,
        duration: 7720,
        text: "contains text and their Associated emotion and we can further train the model using this so what you can see is",
      },
      {
        start_time: 5901040,
        end_time: 5906599,
        duration: 5559,
        text: "that as part of setting up the model for fine tuning we haven't touched those lovely encoder layers they are still",
      },
      {
        start_time: 5906599,
        end_time: 5912000,
        duration: 5401,
        text: "there we didn't reset them or delete them meaning that the model has preserved all of that rich information",
      },
      {
        start_time: 5912000,
        end_time: 5918760,
        duration: 6760,
        text: "about language that it learned from its original training what we can use is that information and then the",
      },
      {
        start_time: 5918760,
        end_time: 5926119,
        duration: 7359,
        text: "information contained in the emotion data set to get the model to learn the weights in its new Final layer meaning",
      },
      {
        start_time: 5926119,
        end_time: 5933119,
        duration: 7000,
        text: "that we end up with an llm that is specifically designed to do an emotion classification task now we're not going",
      },
      {
        start_time: 5933119,
        end_time: 5939520,
        duration: 6401,
        text: "to be fine-tuning a model ourselves in this video it's quite complex to do and it's really a whole Topic in its own",
      },
      {
        start_time: 5939520,
        end_time: 5945000,
        duration: 5480,
        text: "right to do properly however if you want to learn more about how to do this for yourself in case you want to find Junior",
      },
      {
        start_time: 5945000,
        end_time: 5951599,
        duration: 6599,
        text: "own model I'm going to as always direct you to the hugging phase natural language processing course where they",
      },
      {
        start_time: 5951599,
        end_time: 5957320,
        duration: 5721,
        text: "show you in detail in the third section how to do this for yourself instead what we're going to be",
      },
      {
        start_time: 5957320,
        end_time: 5965280,
        duration: 7960,
        text: "doing today is use a model from hugging face Hub that someone else has fine-tuned and up loaded so let's get",
      },
      {
        start_time: 5965000,
        end_time: 6127000,
        duration: 162000,
        text: "Finding fine-tuned LLMs for sentiment analysis",
      },
      {
        start_time: 5965280,
        end_time: 5970639,
        duration: 5359,
        text: "started so as per usual I've gone ahead and created a new Jupiter notebook and",
      },
      {
        start_time: 5970639,
        end_time: 5978760,
        duration: 8121,
        text: "I've loaded in our new data set that one that contains all of those predicted categories so now that we've done that",
      },
      {
        start_time: 5978760,
        end_time: 5984239,
        duration: 5479,
        text: "let's get to work to finding a fine-tune model that we can use for a motion",
      },
      {
        start_time: 5984239,
        end_time: 5989760,
        duration: 5521,
        text: "classification so just like in the last section we're going to be using an open source model from hugging face so we're",
      },
      {
        start_time: 5989760,
        end_time: 5996800,
        duration: 7040,
        text: "going to right click in a new Jupiter cell and we're going to select insert hugging face model so as we discussed at",
      },
      {
        start_time: 5996800,
        end_time: 6003119,
        duration: 6319,
        text: "the beginning of this section we're going to be treating sentiment analysis as a text classification problem so that",
      },
      {
        start_time: 6003119,
        end_time: 6008960,
        duration: 5841,
        text: "means we select text classification from the left hand side of our model selection tool window and then we can",
      },
      {
        start_time: 6008960,
        end_time: 6014239,
        duration: 5279,
        text: "search for emotion in the search bar in order to narrow it down to emotion",
      },
      {
        start_time: 6014239,
        end_time: 6019760,
        duration: 5521,
        text: "models so let's have a look at the most liked model the most popular model in",
      },
      {
        start_time: 6019760,
        end_time: 6025560,
        duration: 5800,
        text: "this category and what we can see is this is a fine-tuning of a Roberta model like we talked about at the beginning of",
      },
      {
        start_time: 6025560,
        end_time: 6032520,
        duration: 6960,
        text: "this section but this been fine-tuned to predict many many many different types of emotions this is probably far more",
      },
      {
        start_time: 6032520,
        end_time: 6037599,
        duration: 5079,
        text: "than we really need for our purposes so let's have a look at the next model it's",
      },
      {
        start_time: 6037599,
        end_time: 6043040,
        duration: 5441,
        text: "also a fine-tuning of a Roberta model and what we can see is this time it's",
      },
      {
        start_time: 6043040,
        end_time: 6049560,
        duration: 6520,
        text: "been fine-tuned for only emman six basic emotions so we've got anger disgust fear",
      },
      {
        start_time: 6049560,
        end_time: 6057119,
        duration: 7559,
        text: "Joy sadness and surprise and we talked about those at the beginning of this section and it also has a neutral class",
      },
      {
        start_time: 6057119,
        end_time: 6063280,
        duration: 6161,
        text: "so having a bit of a look through the model card for this what we can see is just like with our zero shot",
      },
      {
        start_time: 6063280,
        end_time: 6069840,
        duration: 6560,
        text: "classification model we have instructions on how to use it so this time let's actually copy this and we're",
      },
      {
        start_time: 6069840,
        end_time: 6076760,
        duration: 6920,
        text: "going to use this as the basis of how to start using this model so because someone fine-tuned this model to do this",
      },
      {
        start_time: 6076760,
        end_time: 6084639,
        duration: 7879,
        text: "specific em motion classification task there are likely evaluation metrics we can look at so how well did this model",
      },
      {
        start_time: 6084639,
        end_time: 6090400,
        duration: 5761,
        text: "perform at doing this classification during its training so I found this page",
      },
      {
        start_time: 6090400,
        end_time: 6096920,
        duration: 6520,
        text: "from datal loop. a and it gives us a bunch of information about this model it's quite a well-known model but if we",
      },
      {
        start_time: 6096920,
        end_time: 6103719,
        duration: 6799,
        text: "scroll down to the accuracy section you can see that it tells us that it had an evaluation accuracy of",
      },
      {
        start_time: 6103719,
        end_time: 6108840,
        duration: 5121,
        text: "66% and this seems a little bit low but it is actually significantly higher than",
      },
      {
        start_time: 6108840,
        end_time: 6114880,
        duration: 6040,
        text: "the random chance Baseline of 14% that was achieved by taking 100% and dividing",
      },
      {
        start_time: 6114880,
        end_time: 6120560,
        duration: 5680,
        text: "it across the seven different categories so I think we can be happy with this model we can feel fairly confident in",
      },
      {
        start_time: 6120560,
        end_time: 6126599,
        duration: 6039,
        text: "using it and we can go ahead and use it to measure the emotional content in our",
      },
      {
        start_time: 6126599,
        end_time: 6133239,
        duration: 6640,
        text: "descriptions so let's first test out our Emotion classifier by literally running the code that we copied from the model",
      },
      {
        start_time: 6127000,
        end_time: 6865000,
        duration: 738000,
        text: "Extracting emotions from book descriptions",
      },
      {
        start_time: 6133239,
        end_time: 6138320,
        duration: 5081,
        text: "card so we have this little example I love this which is the sequence to",
      },
      {
        start_time: 6138320,
        end_time: 6144239,
        duration: 5919,
        text: "classify and if we run this we can see that we get two warnings the first is to",
      },
      {
        start_time: 6144239,
        end_time: 6149400,
        duration: 5161,
        text: "tell us that we are not using gpus when we could be and the second is to tell us",
      },
      {
        start_time: 6149400,
        end_time: 6156480,
        duration: 7080,
        text: "that this return all scores argument that was in the documentation is now deprecated so let's go ahead and update",
      },
      {
        start_time: 6156480,
        end_time: 6163560,
        duration: 7080,
        text: "our function so that we modify these arguments so the first thing that we're going to do is change this return all",
      },
      {
        start_time: 6163560,
        end_time: 6169320,
        duration: 5760,
        text: "scores argument to top k equals none as suggested and the second is like we did",
      },
      {
        start_time: 6169320,
        end_time: 6174599,
        duration: 5279,
        text: "last time we're going to add device equals MPS so we get GPU utilization so",
      },
      {
        start_time: 6174599,
        end_time: 6180080,
        duration: 5481,
        text: "we've loaded in our emotion classification model and we've seen how we can get it to predict the emotion of",
      },
      {
        start_time: 6180080,
        end_time: 6186520,
        duration: 6440,
        text: "different pieces of text so we now need to decide which level of the description we're going to apply the sentiment",
      },
      {
        start_time: 6186520,
        end_time: 6194320,
        duration: 7800,
        text: "analysis over and we've got two options here we can either get the sentiment classifier to try to predict the overall",
      },
      {
        start_time: 6194320,
        end_time: 6201239,
        duration: 6919,
        text: "emotion for the whole description or we can break it down into individual sentences and try to predict the",
      },
      {
        start_time: 6201239,
        end_time: 6206400,
        duration: 5161,
        text: "sentiment of each of these so let's first look at this first description we",
      },
      {
        start_time: 6206400,
        end_time: 6211719,
        duration: 5319,
        text: "have and let's just start having a look at the potential emotional tone of each",
      },
      {
        start_time: 6211719,
        end_time: 6218800,
        duration: 7081,
        text: "of the sentences so we start with a novel that readers and critics have been eagerly anticipating for over a decade",
      },
      {
        start_time: 6218800,
        end_time: 6226520,
        duration: 7720,
        text: "Gilead is an astonishingly imagined story of remarkable lives well this feels kind of surprising right and then",
      },
      {
        start_time: 6226520,
        end_time: 6233320,
        duration: 6800,
        text: "we have another sentence haunted by his grandfather's presence John tells the rift between his grandfather and his",
      },
      {
        start_time: 6233320,
        end_time: 6240520,
        duration: 7200,
        text: "father the Elder an angry Visionary who fought for the Abolitionist cause and his son an Ardent pacifist that almost",
      },
      {
        start_time: 6240520,
        end_time: 6247320,
        duration: 6800,
        text: "feels fearful so you can see that we have a bit of a mixture and potentially",
      },
      {
        start_time: 6247320,
        end_time: 6253119,
        duration: 5799,
        text: "running a sentiment analyzer to get one sentiment or one emotional prediction",
      },
      {
        start_time: 6253119,
        end_time: 6259280,
        duration: 6161,
        text: "from this whole description might be losing some information but let's have a closer look at this let's test it out so",
      },
      {
        start_time: 6259280,
        end_time: 6265840,
        duration: 6560,
        text: "let's first run the sentiment analyzer over the entire description and what we can see is the prediction we",
      },
      {
        start_time: 6265840,
        end_time: 6270960,
        duration: 5120,
        text: "get overall is that it's 65% likely to be",
      },
      {
        start_time: 6270960,
        end_time: 6277199,
        duration: 6239,
        text: "fearful now I don't really get that impression when I look at this whole book description like looking back up a",
      },
      {
        start_time: 6277199,
        end_time: 6282360,
        duration: 5161,
        text: "little bit we can see sen is like told in John A's joyous rambling voice that",
      },
      {
        start_time: 6282360,
        end_time: 6288719,
        duration: 6359,
        text: "finds Beauty humor and Truth in the smallest of life's details that feels kind of joyous it feels like this book",
      },
      {
        start_time: 6288719,
        end_time: 6294960,
        duration: 6241,
        text: "has a mixture of different themes and we want to be able to capture those so what we're going to do instead is split this",
      },
      {
        start_time: 6294960,
        end_time: 6300119,
        duration: 5159,
        text: "description down into its individual sentences and classify on that basis and",
      },
      {
        start_time: 6300119,
        end_time: 6307960,
        duration: 7841,
        text: "very nicely this classifier actually allows us to classify multiple sentences at the same time so we can just pass in",
      },
      {
        start_time: 6307960,
        end_time: 6315199,
        duration: 7239,
        text: "pretty much the same code but instead with a split argument that allows us to split that on the basis of full stops",
      },
      {
        start_time: 6315199,
        end_time: 6321280,
        duration: 6081,
        text: "and if we look through this this is way better we have a lot more variants so we",
      },
      {
        start_time: 6321280,
        end_time: 6326599,
        duration: 5319,
        text: "can see just like I suspected that first sentence is surprising and if we look a",
      },
      {
        start_time: 6326599,
        end_time: 6332920,
        duration: 6321,
        text: "bit further we've got high scores for other sentences we've got one that is fearful and we've got another one that",
      },
      {
        start_time: 6332920,
        end_time: 6338719,
        duration: 5799,
        text: "is sad and we've got another one that is joyous so we can see that we're getting",
      },
      {
        start_time: 6338719,
        end_time: 6345400,
        duration: 6681,
        text: "a lot more variety here and this is doing a much better job at getting at the true emotional tone of these",
      },
      {
        start_time: 6345400,
        end_time: 6351080,
        duration: 5680,
        text: "descriptions so let's just compare a couple of these predictions to the sentence to see if you know it's",
      },
      {
        start_time: 6351080,
        end_time: 6358080,
        duration: 7000,
        text: "actually giving the right predictions as well based on eyeballing so again let's just take that first sentence again and",
      },
      {
        start_time: 6358080,
        end_time: 6364440,
        duration: 6360,
        text: "let's have a look at the classification and yes again it's mostly classified it",
      },
      {
        start_time: 6364440,
        end_time: 6372480,
        duration: 8040,
        text: "as surprising as we said before so let's have a look at another sentence let's have a look at the fourth sentence and",
      },
      {
        start_time: 6372480,
        end_time: 6378320,
        duration: 5840,
        text: "the predictions that it's given for this is that it's mostly fearful and this makes sense haunted by his grandfather's",
      },
      {
        start_time: 6378320,
        end_time: 6386679,
        duration: 8359,
        text: "presence you know he's talking about a conflict he's talking about his grandfather being angry so this all",
      },
      {
        start_time: 6386679,
        end_time: 6393000,
        duration: 6321,
        text: "seems to make sense and it checks out that this classifier is also doing a good job so this idea does complicate",
      },
      {
        start_time: 6393000,
        end_time: 6398800,
        duration: 5800,
        text: "things for us somewhat because now what we've done is introduced multiple emotions that can be associated with the",
      },
      {
        start_time: 6398800,
        end_time: 6404679,
        duration: 5879,
        text: "same book so how can we make sense of this well my idea is what we can do is",
      },
      {
        start_time: 6404679,
        end_time: 6412000,
        duration: 7321,
        text: "for each book have a separate column for each of the seven emotion classes and",
      },
      {
        start_time: 6412000,
        end_time: 6417239,
        duration: 5239,
        text: "instead of a assigning a category of it is this or it isn't this what we can do",
      },
      {
        start_time: 6417239,
        end_time: 6422520,
        duration: 5281,
        text: "is take the highest probability from across the whole description for that",
      },
      {
        start_time: 6422520,
        end_time: 6428040,
        duration: 5520,
        text: "particular sentiment so for example if Joy is very high in one sentence but",
      },
      {
        start_time: 6428040,
        end_time: 6435000,
        duration: 6960,
        text: "it's low across all the others we'll just take that higher score for Joy for that book description and so on for all",
      },
      {
        start_time: 6435000,
        end_time: 6441080,
        duration: 6080,
        text: "of the other seven or other six so what that means we need to do is we need to",
      },
      {
        start_time: 6441080,
        end_time: 6448040,
        duration: 6960,
        text: "process this output of of the predictor and kind of amalgamate it or Cate it in",
      },
      {
        start_time: 6448040,
        end_time: 6455320,
        duration: 7280,
        text: "such a way that it only gives us one maximum score for each of these labels",
      },
      {
        start_time: 6455320,
        end_time: 6461040,
        duration: 5720,
        text: "and you can see with the way this is formatted we're going to have quite a lot of processing to do so the very",
      },
      {
        start_time: 6461040,
        end_time: 6466760,
        duration: 5720,
        text: "first problem we have is that this output is ordered by the score for each",
      },
      {
        start_time: 6466760,
        end_time: 6474000,
        duration: 7240,
        text: "of the sentences so you can see that we have a different order of labels for every single one of the sent sentences",
      },
      {
        start_time: 6474000,
        end_time: 6479840,
        duration: 5840,
        text: "so the first thing we can do is actually sort these by score instead and what it",
      },
      {
        start_time: 6479840,
        end_time: 6485760,
        duration: 5920,
        text: "means is that for each of the sentences we will have the exact same order of",
      },
      {
        start_time: 6485760,
        end_time: 6493880,
        duration: 8120,
        text: "each of the seven emotion categories so let's create some code to efficiently extract the maximum emotion probability",
      },
      {
        start_time: 6493880,
        end_time: 6499199,
        duration: 5319,
        text: "for each emotion for each description so first thing we're going to do is import",
      },
      {
        start_time: 6499199,
        end_time: 6505159,
        duration: 5960,
        text: "numpy and then what we're going to create is this list called emotion labels and this is basically going to be",
      },
      {
        start_time: 6505159,
        end_time: 6512280,
        duration: 7121,
        text: "the key in our dictionary so we're later going to turn that into The Columns of a panda data frame we also create an empty",
      },
      {
        start_time: 6512280,
        end_time: 6519040,
        duration: 6760,
        text: "list for holding the isbns the reason we're doing this is because later on we're going to create this data frame as",
      },
      {
        start_time: 6519040,
        end_time: 6526800,
        duration: 7760,
        text: "I said and we want to merge it back in with the full data frame so again we're going to use isbn13 as the key and then finally we",
      },
      {
        start_time: 6526800,
        end_time: 6535480,
        duration: 8680,
        text: "create this emotion score dictionary comprehension what this is going to contain is basically all of the scores",
      },
      {
        start_time: 6535480,
        end_time: 6541199,
        duration: 5719,
        text: "for every single description for each of these labels anger disgust fear so let's",
      },
      {
        start_time: 6541199,
        end_time: 6546320,
        duration: 5121,
        text: "now create this function calculate max em motion scores in order to extract the",
      },
      {
        start_time: 6546320,
        end_time: 6553520,
        duration: 7200,
        text: "maximum motion scores for each description so the first thing we do is create another another dictionary",
      },
      {
        start_time: 6553520,
        end_time: 6559960,
        duration: 6440,
        text: "comprehension this is designed to hold all of the predictions for a particular",
      },
      {
        start_time: 6559960,
        end_time: 6565800,
        duration: 5840,
        text: "description so we're not talking about every description just talking about a single description right now then what",
      },
      {
        start_time: 6565800,
        end_time: 6573599,
        duration: 7799,
        text: "we do is we Loop over each of the sentences so each of the sentences return by prediction we sort it like we",
      },
      {
        start_time: 6573599,
        end_time: 6579400,
        duration: 5801,
        text: "saw before so that all of the keys all of the emotions are in the same order",
      },
      {
        start_time: 6579400,
        end_time: 6587639,
        duration: 8239,
        text: "and then what we do is we Loop over that and per each of the emotions we extract",
      },
      {
        start_time: 6587639,
        end_time: 6592760,
        duration: 5121,
        text: "the score and we append it using the correct label",
      },
      {
        start_time: 6592760,
        end_time: 6599719,
        duration: 6959,
        text: "then what we do is we append this to the uh dictionary comprehension and then we",
      },
      {
        start_time: 6599719,
        end_time: 6606080,
        duration: 6361,
        text: "take the maximum score for each of those emotions so what we now have for each",
      },
      {
        start_time: 6606080,
        end_time: 6611320,
        duration: 5240,
        text: "description is a dictionary containing the maximum probability for each of the",
      },
      {
        start_time: 6611320,
        end_time: 6618920,
        duration: 7600,
        text: "different emotion labels so we now need to apply this function to each of the books so let's just test it out first",
      },
      {
        start_time: 6618920,
        end_time: 6624320,
        duration: 5400,
        text: "we'll just do the first 10 books and the first thing we do is of this for Loop is",
      },
      {
        start_time: 6624320,
        end_time: 6629920,
        duration: 5600,
        text: "we take the ISBN 13 for that book and we append it to that ISBN list then what we",
      },
      {
        start_time: 6629920,
        end_time: 6636480,
        duration: 6560,
        text: "do is we take the description we split it into individual sentences and save that to the sentences variable and we",
      },
      {
        start_time: 6636480,
        end_time: 6641920,
        duration: 5440,
        text: "pass that variable into the emotions classifier then what we do is we pass",
      },
      {
        start_time: 6641920,
        end_time: 6648560,
        duration: 6640,
        text: "those predictions generated by the classifier into our calculate max em motion scores function and then we take",
      },
      {
        start_time: 6648560,
        end_time: 6655320,
        duration: 6760,
        text: "the resulting dictionary that's returned by that function and we append it to to that emotion scores dictionary so",
      },
      {
        start_time: 6655320,
        end_time: 6662079,
        duration: 6759,
        text: "basically by doing that we should have a dictionary that can serve as the basis of our data frame containing different",
      },
      {
        start_time: 6662079,
        end_time: 6667760,
        duration: 5681,
        text: "columns with the maximum probabilities for each book and if we run that for",
      },
      {
        start_time: 6667760,
        end_time: 6673000,
        duration: 5240,
        text: "Loop and then we have a look at the results we can see that it seems to have",
      },
      {
        start_time: 6673000,
        end_time: 6680400,
        duration: 7400,
        text: "worked like all of these probabilities seem to make sense um if we scroll all the way through we can actually see that",
      },
      {
        start_time: 6680400,
        end_time: 6686280,
        duration: 5880,
        text: "Joy prediction for the first book that we already know about and we know that that's the correct number cuz we've seen",
      },
      {
        start_time: 6686280,
        end_time: 6692599,
        duration: 6319,
        text: "that before so now that we know this works let's go ahead and apply it to all of the books so we're just going to go",
      },
      {
        start_time: 6692599,
        end_time: 6698920,
        duration: 6321,
        text: "ahead and copy and paste the code for the for loop from above and the first change we're going to make is by",
      },
      {
        start_time: 6698920,
        end_time: 6704520,
        duration: 5600,
        text: "including tqdm as part of the for Loop so again we have a progress bar and py",
      },
      {
        start_time: 6704520,
        end_time: 6711159,
        duration: 6639,
        text: "charm is throwing an error so it's telling us we have not imported tqdm so let's go ahead and do that and of course",
      },
      {
        start_time: 6711159,
        end_time: 6719560,
        duration: 8401,
        text: "we modify the for Loop so that is now for the length of the entire book's data frame now of course we are starting from",
      },
      {
        start_time: 6719560,
        end_time: 6725639,
        duration: 6079,
        text: "scratch with this Loop so we don't want the results from the previous run to be saved to the ISBN or the emotion scores",
      },
      {
        start_time: 6725639,
        end_time: 6731760,
        duration: 6121,
        text: "variables so let's just go ahead and copy and paste the three variables from above down here so we've got emotion",
      },
      {
        start_time: 6731760,
        end_time: 6737079,
        duration: 5319,
        text: "labels we've got ISBN and we've got emotion scores and they're basically going to be reinstantiate",
      },
      {
        start_time: 6737079,
        end_time: 6742639,
        duration: 5560,
        text: "here and pretty much this is it we are good to go so let's just kick that off",
      },
      {
        start_time: 6742639,
        end_time: 6749159,
        duration: 6520,
        text: "and again this is going to take quite some time to run this over more than 5,000 observations so I'm just going to",
      },
      {
        start_time: 6749159,
        end_time: 6754199,
        duration: 5040,
        text: "skip ahead and we can now have a look at the results and with that done let's now",
      },
      {
        start_time: 6754199,
        end_time: 6761360,
        duration: 7161,
        text: "pass the results of this dictionary into a panda's data frame and we don't want the index to be ISBN but what we are",
      },
      {
        start_time: 6761360,
        end_time: 6766760,
        duration: 5400,
        text: "actually going to do is create a separate colum for ISBN and assign the",
      },
      {
        start_time: 6766760,
        end_time: 6773119,
        duration: 6359,
        text: "ISBN list to that so if we have a look at that data frame we see we have exactly what we wanted",
      },
      {
        start_time: 6773119,
        end_time: 6778800,
        duration: 5681,
        text: "got a separate column for each of the emotions and we can see that each of those columns contains the maximum",
      },
      {
        start_time: 6778800,
        end_time: 6785480,
        duration: 6680,
        text: "probability for that description now of course the final thing that we need to do is to merge this back into the book's",
      },
      {
        start_time: 6785480,
        end_time: 6792480,
        duration: 7000,
        text: "data frame so again we're going to use Panda's merge we have the books we have the emotions data frame and we can just",
      },
      {
        start_time: 6792480,
        end_time: 6797880,
        duration: 5400,
        text: "merge them both on isbm 13 and so let's now have a look at the resulting data",
      },
      {
        start_time: 6797880,
        end_time: 6803159,
        duration: 5279,
        text: "frame and if we scroll across we can see all of our emotions columns",
      },
      {
        start_time: 6803159,
        end_time: 6808960,
        duration: 5801,
        text: "and if we actually want to have a look at the distribution of those emotions we can again use the column statistics",
      },
      {
        start_time: 6808960,
        end_time: 6814440,
        duration: 5480,
        text: "function and what we can see is we actually have a pretty good distribution",
      },
      {
        start_time: 6814440,
        end_time: 6820840,
        duration: 6400,
        text: "of most of the emotions and in particular the sadness emotion has quite",
      },
      {
        start_time: 6820840,
        end_time: 6827360,
        duration: 6520,
        text: "a lot of pretty high probabilities so this indicates to us having a look at this that we do have a relatively good",
      },
      {
        start_time: 6827360,
        end_time: 6834760,
        duration: 7400,
        text: "range even though we do have you know some inflation at the lower areas and this is going to give us a pretty good",
      },
      {
        start_time: 6834760,
        end_time: 6842719,
        duration: 7959,
        text: "variable to use for sorting the different books when it comes to making the recommender and then as always the",
      },
      {
        start_time: 6842719,
        end_time: 6848199,
        duration: 5480,
        text: "final stage is to save our beautiful new data frame to file so we can use it in",
      },
      {
        start_time: 6848199,
        end_time: 6854239,
        duration: 6040,
        text: "our final step which is to present all of this in a dashboard so we're going to go ahead and do that and I hope this has",
      },
      {
        start_time: 6854239,
        end_time: 6861320,
        duration: 7081,
        text: "been an interesting overview of how large language models can do sentiment analysis and giving you some ideas on",
      },
      {
        start_time: 6861320,
        end_time: 6867560,
        duration: 6240,
        text: "how you might be able to use this in some of your projects so now we finished developing",
      },
      {
        start_time: 6865000,
        end_time: 7011000,
        duration: 146000,
        text: "Introduction to Gradio",
      },
      {
        start_time: 6867560,
        end_time: 6873880,
        duration: 6320,
        text: "all of the different components for our book recommender we have our Vector database that allows us to find the most",
      },
      {
        start_time: 6873880,
        end_time: 6881520,
        duration: 7640,
        text: "similar books to a query we use text classification to sort the books into fiction or non-fiction meaning our users",
      },
      {
        start_time: 6881520,
        end_time: 6888040,
        duration: 6520,
        text: "can also filter books based on this category and we found out how likely each book description is to have a",
      },
      {
        start_time: 6888040,
        end_time: 6893880,
        duration: 5840,
        text: "certain emotional tone however all we have right now is a bunch of code and a",
      },
      {
        start_time: 6893880,
        end_time: 6899159,
        duration: 5279,
        text: "data set admittedly a very nice data set but still it's just a data set it's not",
      },
      {
        start_time: 6899159,
        end_time: 6905480,
        duration: 6321,
        text: "the most userfriendly interface as such the last thing that we're going to cover is how we can bring",
      },
      {
        start_time: 6905480,
        end_time: 6910840,
        duration: 5360,
        text: "all of this together and present it in a dashboard that people can use to get their book",
      },
      {
        start_time: 6910840,
        end_time: 6917040,
        duration: 6200,
        text: "recommendations so in order to build this dashboard we have moved away from Jupiter notebooks and we're now working",
      },
      {
        start_time: 6917040,
        end_time: 6923239,
        duration: 6199,
        text: "with a python script and if you want to create a python script in pycharm it's the exact same process c as creating a",
      },
      {
        start_time: 6923239,
        end_time: 6929159,
        duration: 5920,
        text: "jupyter notebook you just need to pick python script instead of Jupiter notebook so to get us started I've",
      },
      {
        start_time: 6929159,
        end_time: 6934440,
        duration: 5281,
        text: "already gone ahead and imported all of our dependencies these should mostly",
      },
      {
        start_time: 6934440,
        end_time: 6940520,
        duration: 6080,
        text: "look familiar because we've already covered them in the previous section so we have pandas numpy andm we have our",
      },
      {
        start_time: 6940520,
        end_time: 6947280,
        duration: 6760,
        text: "Lang chain packages and the only new one we have here is gradio and I'm going to cover that in a second we've already",
      },
      {
        start_time: 6947280,
        end_time: 6953480,
        duration: 6200,
        text: "added our load. M function in order to load our open AI API Keys into the",
      },
      {
        start_time: 6953480,
        end_time: 6959040,
        duration: 5560,
        text: "background and I've gone ahead and read in our very latest books data frame the",
      },
      {
        start_time: 6959040,
        end_time: 6964239,
        duration: 5199,
        text: "one that contains all of those emotions that we just added so let's now talk",
      },
      {
        start_time: 6964239,
        end_time: 6970040,
        duration: 5801,
        text: "about gradio so gradio is an open-source python package that allows you to build",
      },
      {
        start_time: 6970040,
        end_time: 6975520,
        duration: 5480,
        text: "dashboards specifically designed to Showcase machine learning models so it's",
      },
      {
        start_time: 6975520,
        end_time: 6983199,
        duration: 7679,
        text: "really tailored nicely to allow you to use things like machine learning models or llms under the hood and if you go to",
      },
      {
        start_time: 6983199,
        end_time: 6989280,
        duration: 6081,
        text: "gradio doapp you can explore a lot of the very very powerful functionality",
      },
      {
        start_time: 6989280,
        end_time: 6995199,
        duration: 5919,
        text: "that it has and we'll see a touch of it in this you can see that it can be quite flexible in terms of the things you can",
      },
      {
        start_time: 6995199,
        end_time: 7002280,
        duration: 7081,
        text: "show um but it gives you a really cool way of demonstrating the things that you're building with code to people who",
      },
      {
        start_time: 7002280,
        end_time: 7009760,
        duration: 7480,
        text: "may not necessarily want to use code in order to use your models or whatever else you're creating in Python so first",
      },
      {
        start_time: 7009760,
        end_time: 7015360,
        duration: 5600,
        text: "things first we're actually going to be using the thumbnail as part of our dashboard and the thumbnail is basically",
      },
      {
        start_time: 7011000,
        end_time: 7969000,
        duration: 958000,
        text: "Building a Gradio dashboard to recommend books",
      },
      {
        start_time: 7015360,
        end_time: 7022280,
        duration: 6920,
        text: "a little preview of the book's front cover which is going to give us a nice sort of visual element to our",
      },
      {
        start_time: 7022280,
        end_time: 7028760,
        duration: 6480,
        text: "dashboard so the books data set that we use provides a URL which links to Google",
      },
      {
        start_time: 7028760,
        end_time: 7034440,
        duration: 5680,
        text: "books but what that provides Us by default is book covers that are all kind",
      },
      {
        start_time: 7034440,
        end_time: 7041719,
        duration: 7279,
        text: "of random different sizes so what we actually want is that Google Books returns to us the largest possible size",
      },
      {
        start_time: 7041719,
        end_time: 7048119,
        duration: 6400,
        text: "that it has available so that we get a better resolution so we can add this little argument to the end of the URL",
      },
      {
        start_time: 7048119,
        end_time: 7056000,
        duration: 7881,
        text: "just depending that to the string and that's going to give us back much better resolution book covers the next problem",
      },
      {
        start_time: 7056000,
        end_time: 7062000,
        duration: 6000,
        text: "we have is that a number of books don't have covers so if we try to render them",
      },
      {
        start_time: 7062000,
        end_time: 7069000,
        duration: 7000,
        text: "we're actually going to get an error so what I've done is I've gone ahead and I've created this interim cover I will",
      },
      {
        start_time: 7069000,
        end_time: 7077320,
        duration: 8320,
        text: "provide this as part of the repo with all the code for this project but you can use whatever you want and basically",
      },
      {
        start_time: 7077320,
        end_time: 7083320,
        duration: 6000,
        text: "what we now do is we modify the code again using NP Weare and what we're",
      },
      {
        start_time: 7083320,
        end_time: 7090920,
        duration: 7600,
        text: "going to do is replace those cases where we have a missing cover so where large",
      },
      {
        start_time: 7090920,
        end_time: 7096760,
        duration: 5840,
        text: "thumbnail is na a with this interim cover and otherwise we'll use the link",
      },
      {
        start_time: 7096760,
        end_time: 7102719,
        duration: 5959,
        text: "that's provided and that's it so we're now ready to use the thumbnails so we can get on with building buing the next",
      },
      {
        start_time: 7102719,
        end_time: 7108760,
        duration: 6041,
        text: "parts of our dashboard so the next thing we need to do is add that code that we created in the second section in order",
      },
      {
        start_time: 7108760,
        end_time: 7114280,
        duration: 5520,
        text: "to build our Vector do base and this is so we can of course do the core functionality of our recommender which",
      },
      {
        start_time: 7114280,
        end_time: 7121199,
        duration: 6919,
        text: "is semantic recommendations so just to remind you what this code does in this first line",
      },
      {
        start_time: 7121199,
        end_time: 7126960,
        duration: 5761,
        text: "what we're doing is reading those tag descriptions into the text loader then",
      },
      {
        start_time: 7126960,
        end_time: 7133239,
        duration: 6279,
        text: "we're instantiating a character text splitter which has as a separator the new line then we're applying that to",
      },
      {
        start_time: 7133239,
        end_time: 7139320,
        duration: 6081,
        text: "each of the documents so what we end up with are document chunks that are individual book descriptions and then",
      },
      {
        start_time: 7139320,
        end_time: 7147199,
        duration: 7879,
        text: "what we do is we convert those into document embeddings using the open a Ai embeddings and we store those in the",
      },
      {
        start_time: 7147199,
        end_time: 7153440,
        duration: 6241,
        text: "chroma Vector database so now we're going to create a function that's going to retrieve those",
      },
      {
        start_time: 7153440,
        end_time: 7158679,
        duration: 5239,
        text: "semantic recommendations from our books data set and it's also going to apply",
      },
      {
        start_time: 7158679,
        end_time: 7165440,
        duration: 6761,
        text: "filtering based on category and sorting based on tone so let's go ahead and start",
      },
      {
        start_time: 7165440,
        end_time: 7174040,
        duration: 8600,
        text: "creating this let's call it retrieve semantic recommendations and it's going to have as its arguments the query it's",
      },
      {
        start_time: 7174040,
        end_time: 7181079,
        duration: 7039,
        text: "going to have the category and we can set none as a default and also the tone which again can be none and then we're",
      },
      {
        start_time: 7181079,
        end_time: 7187079,
        duration: 6000,
        text: "going to have two top k categories we're going to initially retrieve 50",
      },
      {
        start_time: 7187079,
        end_time: 7194560,
        duration: 7481,
        text: "recommendations because we're going to apply some filtering and then what we're going to have have is a final top K",
      },
      {
        start_time: 7194560,
        end_time: 7200000,
        duration: 5440,
        text: "which is going to be lived to 16 because 16 as you will see looks quite nice for",
      },
      {
        start_time: 7200000,
        end_time: 7206800,
        duration: 6800,
        text: "display on our dashboard and then of course the result that it's going to return is a panda's data frame so to",
      },
      {
        start_time: 7206800,
        end_time: 7213400,
        duration: 6600,
        text: "start this function we're going to again repeat some code that we saw all the way back in the second section the first",
      },
      {
        start_time: 7213400,
        end_time: 7221239,
        duration: 7839,
        text: "thing that we're going to do is get our recommendations from the books Vector database the DB books and we're going to",
      },
      {
        start_time: 7221239,
        end_time: 7229119,
        duration: 7880,
        text: "limit that to the initial top K those top 50 results it's going to be based on a query that's going to be input by our",
      },
      {
        start_time: 7229119,
        end_time: 7234560,
        duration: 5441,
        text: "user then what we're going to do is get back those isbns of those",
      },
      {
        start_time: 7234560,
        end_time: 7241400,
        duration: 6840,
        text: "recommendations by splitting them off the front of the descriptions and then what we're going to do is limit our",
      },
      {
        start_time: 7241400,
        end_time: 7246440,
        duration: 5040,
        text: "books data frame to just those that match the isbns of those books",
      },
      {
        start_time: 7246440,
        end_time: 7253440,
        duration: 7000,
        text: "recommended from the vector database and then what we're going to do is start applying some filtering based",
      },
      {
        start_time: 7253440,
        end_time: 7259000,
        duration: 5560,
        text: "on category so basically we're going to have a drop down on our dashboard and it",
      },
      {
        start_time: 7259000,
        end_time: 7264560,
        duration: 5560,
        text: "can either read all or it can read one of the four simple categories fiction",
      },
      {
        start_time: 7264560,
        end_time: 7271599,
        duration: 7039,
        text: "non-fiction children's fiction and children's non-fiction so basically want the argument to be is that if someone",
      },
      {
        start_time: 7271599,
        end_time: 7279520,
        duration: 7921,
        text: "has picked anything other than the default all we want to filter the books Rex data frame down to only those books",
      },
      {
        start_time: 7279520,
        end_time: 7285639,
        duration: 6119,
        text: "that match that category and otherwise we just just want to return all the recommendations and then you can see",
      },
      {
        start_time: 7285639,
        end_time: 7290960,
        duration: 5321,
        text: "what we've done is we've limited those filtered recommendations down to the",
      },
      {
        start_time: 7290960,
        end_time: 7297520,
        duration: 6560,
        text: "final top K and then finally the way we're going to use the emotions category I think I",
      },
      {
        start_time: 7297520,
        end_time: 7303840,
        duration: 6320,
        text: "mentioned this earlier is we're going to sort based on the probabilities rather than doing any sort of classification or",
      },
      {
        start_time: 7303840,
        end_time: 7309840,
        duration: 6000,
        text: "filtering so say if someone picks happy as a label that's going to match to Joy",
      },
      {
        start_time: 7309840,
        end_time: 7317000,
        duration: 7160,
        text: "then what we will do is sort those recommend ations based on the highest probability of them being joyful books",
      },
      {
        start_time: 7317000,
        end_time: 7322360,
        duration: 5360,
        text: "so we're going to do this for five of the emotions we're going to do it for",
      },
      {
        start_time: 7322360,
        end_time: 7327679,
        duration: 5319,
        text: "Joy surprise anger fear and sadness and they're going to correspond to a drop-",
      },
      {
        start_time: 7327679,
        end_time: 7333920,
        duration: 6241,
        text: "down menu with labels happy surprising angry suspenseful and sad so I decided",
      },
      {
        start_time: 7333920,
        end_time: 7341920,
        duration: 8000,
        text: "to leave out disgust because I can't imagine anyone really wants to read books that are likely to disgust them",
      },
      {
        start_time: 7341920,
        end_time: 7348239,
        duration: 6319,
        text: "and I also left out neutral because neutral is kind of implied by all so you know you're not really looking for",
      },
      {
        start_time: 7348239,
        end_time: 7355960,
        duration: 7721,
        text: "anything specific so let's go ahead and create the code for that so what you can see again it's just a simple um give",
      },
      {
        start_time: 7355960,
        end_time: 7363239,
        duration: 7279,
        text: "else Clause so if tone equals happy then sort these books based on Joy and make",
      },
      {
        start_time: 7363239,
        end_time: 7369520,
        duration: 6281,
        text: "sure that it is descending and then do the same for the others and then to end",
      },
      {
        start_time: 7369520,
        end_time: 7376000,
        duration: 6480,
        text: "this function we just return the data frame with the book recommendations so the next thing we",
      },
      {
        start_time: 7376000,
        end_time: 7382719,
        duration: 6719,
        text: "need to do is to create a function that specifies what we want to display on the gradio dashboard so we're going to call",
      },
      {
        start_time: 7382719,
        end_time: 7389679,
        duration: 6960,
        text: "this recommend books and it's going to take three arguments it's going to take the user query it's going to take the",
      },
      {
        start_time: 7389679,
        end_time: 7397159,
        duration: 7480,
        text: "chosen category and it's going to take the selected tone and what we're going to do is first get our recommendations",
      },
      {
        start_time: 7397159,
        end_time: 7403400,
        duration: 6241,
        text: "data frame by calling that function that we just created retrieve semantic recommendations and we're going to pass",
      },
      {
        start_time: 7403400,
        end_time: 7410280,
        duration: 6880,
        text: "in those three arguments we then create this empty results list and what we do",
      },
      {
        start_time: 7410280,
        end_time: 7416320,
        duration: 6040,
        text: "is we then uh loop over every single one of these recommendations that have been",
      },
      {
        start_time: 7416320,
        end_time: 7424119,
        duration: 7799,
        text: "passed back from our previous function so the first thing we're going to deal with is the book description so this is",
      },
      {
        start_time: 7424119,
        end_time: 7430920,
        duration: 6801,
        text: "just going to be the description field of course but the thing is is we're going to be using this on a dashboard",
      },
      {
        start_time: 7430920,
        end_time: 7437639,
        duration: 6719,
        text: "that has limited space so we don't necessarily want to show the full description so instead what we're going",
      },
      {
        start_time: 7437639,
        end_time: 7443920,
        duration: 6281,
        text: "to do is we're going to split that description into its separate words and",
      },
      {
        start_time: 7443920,
        end_time: 7449040,
        duration: 5120,
        text: "if the description has more than 30 words what we're going to do is cut it",
      },
      {
        start_time: 7449040,
        end_time: 7455239,
        duration: 6199,
        text: "off and just make it continue with a trailing ellipses so let's now think about how we",
      },
      {
        start_time: 7455239,
        end_time: 7460520,
        duration: 5281,
        text: "want the author's list to be displayed so in this data set if a book has more",
      },
      {
        start_time: 7460520,
        end_time: 7466920,
        duration: 6400,
        text: "than one author they are combined using a semicolon so first things first we're going to take",
      },
      {
        start_time: 7466920,
        end_time: 7472599,
        duration: 5679,
        text: "the string containing the authors and split it on semicolon so let's now think about the",
      },
      {
        start_time: 7472599,
        end_time: 7480400,
        duration: 7801,
        text: "different conditions we might have a book that has two authors so let's create an F string that separates these",
      },
      {
        start_time: 7480400,
        end_time: 7485520,
        duration: 5120,
        text: "two authors using and so we have the first author in the first placeholder",
      },
      {
        start_time: 7485520,
        end_time: 7492440,
        duration: 6920,
        text: "and the second author in the second placeholder or we might have a book where we have more than two authors",
      },
      {
        start_time: 7492440,
        end_time: 7500159,
        duration: 7719,
        text: "so in this case we create an F string where all of the authors except for the last author are separated by a comma and",
      },
      {
        start_time: 7500159,
        end_time: 7505520,
        duration: 5361,
        text: "then the last author is added on using an and or else we just have a book with",
      },
      {
        start_time: 7505520,
        end_time: 7510800,
        duration: 5280,
        text: "one author in which case we just use the author and you can see I've just made a",
      },
      {
        start_time: 7510800,
        end_time: 7517119,
        duration: 6319,
        text: "small mistake here in the F string for two or more authors I need to use single quotation marks rather than double",
      },
      {
        start_time: 7517119,
        end_time: 7522559,
        duration: 5440,
        text: "quotation marks so I'll just pop up and change that so the way that we're going to",
      },
      {
        start_time: 7522559,
        end_time: 7529000,
        duration: 6441,
        text: "display all this information about the book is as a caption that's sort of appended to the bottom of the book",
      },
      {
        start_time: 7529000,
        end_time: 7534239,
        duration: 5239,
        text: "thumbnail image so let's now all combine this into a caption string again using",
      },
      {
        start_time: 7534239,
        end_time: 7540119,
        duration: 5880,
        text: "an F string we'll first have the title by authors and then colon we have that",
      },
      {
        start_time: 7540119,
        end_time: 7547480,
        duration: 7361,
        text: "truncated description and then finally we have that results empty list that we created earlier so what we appended is a",
      },
      {
        start_time: 7547480,
        end_time: 7552880,
        duration: 5400,
        text: "topple containing the thumbnail and the caption and we're going to do that",
      },
      {
        start_time: 7552880,
        end_time: 7558040,
        duration: 5160,
        text: "obviously for every single book looping over it using that itose",
      },
      {
        start_time: 7558040,
        end_time: 7564480,
        duration: 6440,
        text: "functionality okay so we are now ready to finally start creating the dashboard and you can see actually there really",
      },
      {
        start_time: 7564480,
        end_time: 7570360,
        duration: 5880,
        text: "wasn't that much code we needed to write to get to this point we could have actually been a little bit less fussy",
      },
      {
        start_time: 7570360,
        end_time: 7577639,
        duration: 7279,
        text: "about how we presented the caption but you'll see it will look very nice so you'll see it's worth the effort so the",
      },
      {
        start_time: 7577639,
        end_time: 7582800,
        duration: 5161,
        text: "first thing we do is we create two lists the first is our list containing all of",
      },
      {
        start_time: 7582800,
        end_time: 7589719,
        duration: 6919,
        text: "our categories plus that all category that I talked about earlier and then we do a similar thing for tones so if",
      },
      {
        start_time: 7589719,
        end_time: 7594760,
        duration: 5041,
        text: "someone doesn't want a particular emotional tone we have all as a standin for",
      },
      {
        start_time: 7594760,
        end_time: 7600000,
        duration: 5240,
        text: "neutral so we start off our gradio dashboard with the following code and",
      },
      {
        start_time: 7600000,
        end_time: 7605679,
        duration: 5679,
        text: "you might have noticed as I'm writing it I'm including the argument theme within",
      },
      {
        start_time: 7605679,
        end_time: 7611159,
        duration: 5480,
        text: "the blocks method so gradio actually allows you to customize dashboards to an",
      },
      {
        start_time: 7611159,
        end_time: 7616800,
        duration: 5641,
        text: "extent with a bunch of different themes so before we go any further let's quickly go and have a look at what they",
      },
      {
        start_time: 7616800,
        end_time: 7623800,
        duration: 7000,
        text: "are so we can see that we are on the theming guide page within the gradio documentation and if we scroll down a",
      },
      {
        start_time: 7623800,
        end_time: 7631159,
        duration: 7359,
        text: "bit we can see that these are all the themes that are available so they range from themes that are very simple up to",
      },
      {
        start_time: 7631159,
        end_time: 7636199,
        duration: 5040,
        text: "themes that are a bit more bright and a bit more colorful like the Citrus theme",
      },
      {
        start_time: 7636199,
        end_time: 7642320,
        duration: 6121,
        text: "so I specifically chose the glass theme because when I messed around with the different themes this really felt like",
      },
      {
        start_time: 7642320,
        end_time: 7647559,
        duration: 5239,
        text: "the most you know the most dignified something you might want for a book recommender but depending on your",
      },
      {
        start_time: 7647559,
        end_time: 7653880,
        duration: 6321,
        text: "purpose you might want something very simple very soft very bright so you can just play around with these so",
      },
      {
        start_time: 7653880,
        end_time: 7660719,
        duration: 6839,
        text: "continuing on with our dashboard we can see that the first thing we include is this markdown element and this is going",
      },
      {
        start_time: 7660719,
        end_time: 7667040,
        duration: 6321,
        text: "to be the title of our dashboard so this will appear at the top and it'll tell people what our dashboard is about so we",
      },
      {
        start_time: 7667040,
        end_time: 7673079,
        duration: 6039,
        text: "will call it semantic book recommender so now we're going to create the part of our dashboard that our users will be",
      },
      {
        start_time: 7673079,
        end_time: 7678840,
        duration: 5761,
        text: "interacting with so this is going to first contain our user query and we'll",
      },
      {
        start_time: 7678840,
        end_time: 7685920,
        duration: 7080,
        text: "represent this as a text box we're going to give it the description to please enter a description of a book and we can",
      },
      {
        start_time: 7685920,
        end_time: 7691679,
        duration: 5759,
        text: "actually add a placeholder which is really cool to give them an idea of what sort of things they can actually query",
      },
      {
        start_time: 7691679,
        end_time: 7697719,
        duration: 6040,
        text: "so let's say we put for example a story about forgiveness then what we're going to do",
      },
      {
        start_time: 7697719,
        end_time: 7704719,
        duration: 7000,
        text: "is we're going to add dropdowns for both category and tone so let's first have a look at the code for the category",
      },
      {
        start_time: 7704719,
        end_time: 7709920,
        duration: 5201,
        text: "dropdown so we use this dropdown method and what we do is we assign the choices",
      },
      {
        start_time: 7709920,
        end_time: 7715239,
        duration: 5319,
        text: "by assigning that list with all the categories and again we can add a label",
      },
      {
        start_time: 7715239,
        end_time: 7722400,
        duration: 7161,
        text: "and we can make the default value all and so we do the exact same thing with the tone drop down and then finally we",
      },
      {
        start_time: 7722400,
        end_time: 7727559,
        duration: 5159,
        text: "need to add a button so people can get their recommendations we use the button",
      },
      {
        start_time: 7727559,
        end_time: 7733239,
        duration: 5680,
        text: "method to do that and again we can label that so what we're now going to be doing",
      },
      {
        start_time: 7733239,
        end_time: 7739559,
        duration: 6320,
        text: "is adding the functionality to display the recommendations so again we use that markdown method and we give it the",
      },
      {
        start_time: 7739559,
        end_time: 7745280,
        duration: 5721,
        text: "subtitle recommendations and we're going to displaying it as a gallery so this is",
      },
      {
        start_time: 7745280,
        end_time: 7751520,
        duration: 6240,
        text: "going to be a really nice way to Showcase all of those nice thumbnails of the books that we prepared and what you",
      },
      {
        start_time: 7751520,
        end_time: 7756800,
        duration: 5280,
        text: "might have noticed is I've made it size of column 8 with two rows this is why we",
      },
      {
        start_time: 7756800,
        end_time: 7762360,
        duration: 5560,
        text: "have a maximum of 16 recommendations that are returned after filtering",
      },
      {
        start_time: 7762360,
        end_time: 7769000,
        duration: 6640,
        text: "and then finally we need to tell gradio what to do when users click that submit button so what we tell gradio to do is",
      },
      {
        start_time: 7769000,
        end_time: 7774920,
        duration: 5920,
        text: "to execute the function recommend books take as the inputs the user query the",
      },
      {
        start_time: 7774920,
        end_time: 7780119,
        duration: 5199,
        text: "category dropdown and the tone dropdown and to Output whatever comes out of that",
      },
      {
        start_time: 7780119,
        end_time: 7787840,
        duration: 7721,
        text: "recommend books function and then finally of course we create our main method and from there we",
      },
      {
        start_time: 7787840,
        end_time: 7793960,
        duration: 6120,
        text: "can execute the script so as you can see this is rebuilding the vector database",
      },
      {
        start_time: 7793960,
        end_time: 7800639,
        duration: 6679,
        text: "from scratch we can of course just save this Vector database cuz we don't really need to recreate it each time and that",
      },
      {
        start_time: 7800639,
        end_time: 7807840,
        duration: 7201,
        text: "means that it's going to be a lot faster for our dashboard to start and then finally our dashboard is launched so",
      },
      {
        start_time: 7807840,
        end_time: 7813800,
        duration: 5960,
        text: "let's go ahead and have a look so here's our gradio dashboard so here are all the",
      },
      {
        start_time: 7813800,
        end_time: 7820040,
        duration: 6240,
        text: "elements that I described we were creating when we were coding it up we can see our text box where our user can",
      },
      {
        start_time: 7820040,
        end_time: 7827679,
        duration: 7639,
        text: "enter their query with that placeholder that we designed we can see our two dropdowns with category and emotional",
      },
      {
        start_time: 7827679,
        end_time: 7833159,
        duration: 5480,
        text: "tone so let's go ahead and do our first query and let's make it pretty broad",
      },
      {
        start_time: 7833159,
        end_time: 7838920,
        duration: 5761,
        text: "let's say a book about World War I so when we click find recommendations we",
      },
      {
        start_time: 7838920,
        end_time: 7844840,
        duration: 5920,
        text: "get back that really nice Gallery with all of the different thumbnails and you can see the cover not found popping up a",
      },
      {
        start_time: 7844840,
        end_time: 7849920,
        duration: 5080,
        text: "couple of times and if we go ahead and click on the first of the books we can",
      },
      {
        start_time: 7849920,
        end_time: 7856440,
        duration: 6520,
        text: "see that c that we created being displayed down the bottom so you can see why I needed to truncate the description",
      },
      {
        start_time: 7856440,
        end_time: 7862079,
        duration: 5639,
        text: "there's not very much space and if we just go clicking through down the bottom we can actually scroll through the",
      },
      {
        start_time: 7862079,
        end_time: 7867800,
        duration: 5721,
        text: "gallery this way or scroll through it on the main screen so let's now try our",
      },
      {
        start_time: 7867800,
        end_time: 7872840,
        duration: 5040,
        text: "category filter and let's filter this down to fiction books and you can see",
      },
      {
        start_time: 7872840,
        end_time: 7878960,
        duration: 6120,
        text: "that this has eliminated a lot of books that were about World War I but we're not actually fiction",
      },
      {
        start_time: 7878960,
        end_time: 7884119,
        duration: 5159,
        text: "stories so let's now try sorting these books based on their emotional tone and",
      },
      {
        start_time: 7884119,
        end_time: 7891520,
        duration: 7401,
        text: "well we're talking about stories about World War I so they're probably going to be sad so let's try sorting on that and",
      },
      {
        start_time: 7891520,
        end_time: 7899040,
        duration: 7520,
        text: "basically what we can see is the top recommended one is this Virginia Wolf book so this is what our recommender has",
      },
      {
        start_time: 7899040,
        end_time: 7906119,
        duration: 7079,
        text: "come up with but searching for books about World War I is pretty straightforward so let's put our",
      },
      {
        start_time: 7906119,
        end_time: 7912079,
        duration: 5960,
        text: "semantic recommender to the test and let's try something a little more nuanced so let's say a story about a",
      },
      {
        start_time: 7912079,
        end_time: 7920719,
        duration: 8640,
        text: "troubled family set across many generations so looking at this second result we can see you know pretty good",
      },
      {
        start_time: 7920719,
        end_time: 7927040,
        duration: 6321,
        text: "so the description is a young Widow raising two boys Sarah Laden is struggling to keep her family together",
      },
      {
        start_time: 7927040,
        end_time: 7934360,
        duration: 7320,
        text: "when a shocking Revelation rips apart the family of her closest friend you know looks pretty relevant",
      },
      {
        start_time: 7934360,
        end_time: 7941920,
        duration: 7560,
        text: "this one here also looks pretty good Bry Ashley knows that her family's Grand estate is both hell and Paradise once",
      },
      {
        start_time: 7941920,
        end_time: 7947159,
        duration: 5239,
        text: "elegant and beautiful yet myed in debt and shrouded in shadow looks pretty",
      },
      {
        start_time: 7947159,
        end_time: 7953480,
        duration: 6321,
        text: "troubled to me and deals with this sort of generational family issues and",
      },
      {
        start_time: 7953480,
        end_time: 7960079,
        duration: 6599,
        text: "actually if we go ahead and we sort this list of recommendations based on how suspenseful they are this one actually",
      },
      {
        start_time: 7960079,
        end_time: 7965440,
        duration: 5361,
        text: "comes up at the top so that seems pretty consistent like this book seemed like it was probably going to be like good",
      },
      {
        start_time: 7965440,
        end_time: 7971679,
        duration: 6239,
        text: "mystery as well as a family generational drama and this brings us to the end of",
      },
      {
        start_time: 7969000,
        end_time: 8104000,
        duration: 135000,
        text: "Outro",
      },
      {
        start_time: 7971679,
        end_time: 7978159,
        duration: 6480,
        text: "the tutorial thank you so much for completing it with me and I hope you've enjoyed it so let's end with a quick",
      },
      {
        start_time: 7978159,
        end_time: 7985239,
        duration: 7080,
        text: "recap in the course of this tutorial we've covered a lot of different topics in modern natural language processing",
      },
      {
        start_time: 7985239,
        end_time: 7991000,
        duration: 5761,
        text: "the core of this tutorial was of course large language models and I hope you've ended this tutorial with an",
      },
      {
        start_time: 7991000,
        end_time: 7996960,
        duration: 5960,
        text: "understanding of how these important models work as well as how flexible their applications can be for solving",
      },
      {
        start_time: 7996960,
        end_time: 8003920,
        duration: 6960,
        text: "natural language problems we've also seen the current state of the development ecosystem around llms and",
      },
      {
        start_time: 8003920,
        end_time: 8010800,
        duration: 6880,
        text: "we've seen how getting access to and choosing between these models is getting easier and easier we saw how proprietary",
      },
      {
        start_time: 8010800,
        end_time: 8016320,
        duration: 5520,
        text: "providers like open AI have their own easyto usee apis to let you access their",
      },
      {
        start_time: 8016320,
        end_time: 8023639,
        duration: 7319,
        text: "models and these can be relatively inexpensive depending on the model you use we also saw how hugging face Hub",
      },
      {
        start_time: 8023639,
        end_time: 8030400,
        duration: 6761,
        text: "makes it easy to find and choose between open-source large language models and how py charms Integrations with hugging",
      },
      {
        start_time: 8030400,
        end_time: 8037280,
        duration: 6880,
        text: "face make make it even easier to do that within your development environment finally userfriendly python packages",
      },
      {
        start_time: 8037280,
        end_time: 8044040,
        duration: 6760,
        text: "such as Lang chain and Transformers make it easy to do even relatively complicated tasks like building a vector",
      },
      {
        start_time: 8044040,
        end_time: 8050079,
        duration: 6039,
        text: "database with really just a few lines of code so just before we wrap up there are a few things that I wanted to remind you",
      },
      {
        start_time: 8050079,
        end_time: 8056599,
        duration: 6520,
        text: "about that I've mentioned throughout this tutorial the first is if you want to get that three Monon free license for",
      },
      {
        start_time: 8056599,
        end_time: 8063199,
        duration: 6600,
        text: "py Chon professional make sure you grab the code from the description below if you want to ask me any questions or",
      },
      {
        start_time: 8063199,
        end_time: 8069679,
        duration: 6480,
        text: "contact me about this tutorial you can also find my social media links in the description as well and then finally I",
      },
      {
        start_time: 8069679,
        end_time: 8075559,
        duration: 5880,
        text: "have shared some further resources in the description if you want to follow up and learn more about this topic after",
      },
      {
        start_time: 8075559,
        end_time: 8083159,
        duration: 7600,
        text: "this tutorial so thank you again so much for joining me and I hope you had as much fun as I did I hope you're feeling",
      },
      {
        start_time: 8083159,
        end_time: 8089480,
        duration: 6321,
        text: "confident and excited about working with llms after this tutorial and I also hope that you're feeling inspired to learn",
      },
      {
        start_time: 8089480,
        end_time: 8095239,
        duration: 5759,
        text: "more about natural language Pro processing it is a very exciting area of data science and there's a whole lot",
      },
      {
        start_time: 8095239,
        end_time: 8101280,
        duration: 6041,
        text: "more that obviously I couldn't cover in this tutorial which is waiting for you to learn about please keep in touch I",
      },
      {
        start_time: 8101280,
        end_time: 8105480,
        duration: 4200,
        text: "would love to know what you end up building",
      },
    ],
    hashtags: null,
    tags: [],
    next_recommended_videos: null,
    recommended_videos: [
      {
        url: "https://www.youtube.com/watch?v=sVcwVQRHIc8",
        title:
          "Learn RAG From Scratch – Python AI Tutorial from a LangChain Engineer",
        thumbnail:
          "https://i.ytimg.com/vi/sVcwVQRHIc8/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&rs=AOn4CLDqRCXBih4uZl6S8z6l9a7-wWOMOw",
      },
      {
        url: "https://www.youtube.com/watch?v=GZvSYJDk-us",
        title:
          "APIs for Beginners - How to use an API (Full Course / Tutorial)",
        thumbnail:
          "https://i.ytimg.com/vi/GZvSYJDk-us/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&rs=AOn4CLCGLbDmsHcFVihYVPTaCWVAbDxNFQ",
      },
      {
        url: "https://www.youtube.com/watch?v=9vM4p9NN0Ts",
        title:
          "Stanford CS229 I Machine Learning I Building Large Language Models (LLMs)",
        thumbnail:
          "https://i.ytimg.com/vi/9vM4p9NN0Ts/hqdefault.jpg?sqp=-oaymwE2CNACELwBSFXyq4qpAygIARUAAIhCGAFwAcABBvABAfgB_gmAAtAFigIMCAAQARhlIGUoWDAP&rs=AOn4CLCP3Q0QaqoLWW2d3HlJERU1qK083w",
      },
      {
        url: "https://www.youtube.com/watch?v=LCEmiRjPEtQ",
        title: "Andrej Karpathy: Software Is Changing (Again)",
        thumbnail:
          "https://i.ytimg.com/vi/LCEmiRjPEtQ/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&rs=AOn4CLDmI0AgPgUnzn74TM-Ab_c99R1F7g",
      },
      {
        url: "https://www.youtube.com/watch?v=BW49QAfLunQ",
        title:
          "Data Science Roadmap 2025 | Step-by-Step Guide to Become a Data Scientist (Beginner to Pro)",
        thumbnail:
          "https://i.ytimg.com/vi/BW49QAfLunQ/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&rs=AOn4CLA3yflr9H89KkG-D2KCkDaM0Ug0dA",
      },
      {
        url: "https://www.youtube.com/watch?v=tmB5JIX3Lxk",
        title: "Intro to Machine Learning featuring Generative AI",
        thumbnail:
          "https://i.ytimg.com/vi/tmB5JIX3Lxk/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&rs=AOn4CLCcy5vgM1p3mTy-fZJ4d8YegZypFQ",
      },
      {
        url: "https://www.youtube.com/watch?v=7xTGNNLPyMI",
        title: "Deep Dive into LLMs like ChatGPT",
        thumbnail:
          "https://i.ytimg.com/vi/7xTGNNLPyMI/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&rs=AOn4CLDcbgy07h94MUHaKBB7BeDcdKg1pQ",
      },
      {
        url: "https://www.youtube.com/watch?v=ZMsTMuyH7w8",
        title:
          "3-HOUR DEEP WORK SESSION | Hyper Efficient, Focus Music, Pomodoro 50-10",
        thumbnail:
          "https://i.ytimg.com/vi/ZMsTMuyH7w8/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&rs=AOn4CLAwS4yvyAlcWv2UwabFFzTiCMk7tA",
      },
      {
        url: "https://www.youtube.com/watch?v=Cyv-dgv80kE",
        title:
          "LangChain Mastery in 2025 | Full 5 Hour Course [LangChain v0.3]",
        thumbnail:
          "https://i.ytimg.com/vi/Cyv-dgv80kE/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&rs=AOn4CLAPi9r-B8Z4Bkr1pv5t_rzRhsn-rQ",
      },
      {
        url: "https://www.youtube.com/watch?v=Ams4sEn50cw",
        title: "Recommender Systems: Basics, Types, and Design Consideration",
        thumbnail:
          "https://i.ytimg.com/vi/Ams4sEn50cw/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&rs=AOn4CLCg975a7qtMYQg581kbljciH9oa0w",
      },
      {
        url: "https://www.youtube.com/watch?v=PkZNo7MFNFg",
        title: "Learn JavaScript - Full Course for Beginners",
        thumbnail:
          "https://i.ytimg.com/vi/PkZNo7MFNFg/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&rs=AOn4CLAwNU5OSSZjemAET6tnzWmSp_GrGw",
      },
      {
        url: "https://www.youtube.com/watch?v=Ylz779Op9Pw",
        title: "How to Improve LLMs with RAG (Overview + Python Code)",
        thumbnail:
          "https://i.ytimg.com/vi/Ylz779Op9Pw/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&rs=AOn4CLBlwSOwoUSEsZQ0Aeqg8a0_9oZJjQ",
      },
    ],
    transcript_language: [
      {
        language: "English (auto-generated)",
        auto_translate: true,
      },
    ],
    chapters: [
      {
        title: "Intro",
        time_stamp: null,
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_24000.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLA-JobPtGAlUYN93iQy35pREt_asg",
      },
      {
        title: "Introduction to getting and preparing text data",
        time_stamp: "185000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_209833.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLAI4rPlOmlr7vt0lQpldgoE4Di9lg",
      },
      {
        title: "Starting a new PyCharm project",
        time_stamp: "351000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_358800.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLCnjn2BCNmtBjOu63J-rhEy2TJ_8w",
      },
      {
        title: "Patterns of missing data",
        time_stamp: "1019000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_1023766.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLCwihJkdV8pJ4xFNgmFPYL6ip7CEA",
      },
      {
        title: "Checking the number of categories",
        time_stamp: "1521000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_1537733.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLBPYmg8xhLVKqxxFiu1lrZvJMaRCQ",
      },
      {
        title: "Remove short descriptions",
        time_stamp: "1707000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_1708266.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLDkK-1nzjYFcXn18gf-Sz7H5Y6Hzg",
      },
      {
        title: "Final cleaning steps",
        time_stamp: "2076000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_2079200.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLBrWaTKVd5fcQlzS6XOvKvzXilPCg",
      },
      {
        title: "Introduction to LLMs and vector search",
        time_stamp: "2291000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_2304833.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLDw-pdU6qyB48mZRS3aDDJLYr9vPA",
      },
      {
        title: "LangChain",
        time_stamp: "3283000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_3283100.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLBJuLR2G4_gvqVyKBjNJy9qvNPebw",
      },
      {
        title: "Splitting the books using CharacterTextSplitter",
        time_stamp: "3526000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_3530066.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLBEh1S8HCvYKJvN8kwm0oo-O9g6Iw",
      },
      {
        title: "Building the vector database",
        time_stamp: "3777000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_3794033.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLAtMVl7VUu2U-pzhE45_sWuKtBWFA",
      },
      {
        title: "Getting book recommendations using vector search",
        time_stamp: "3950000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_3957100.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLBaZN68fNY1IsXQHPsiWQWbpfZffQ",
      },
      {
        title: "Introduction to zero-shot text classification using LLMs",
        time_stamp: "4267000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_4284966.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLCmKTXp7kRlHtUPTUPxaekyX1BgAQ",
      },
      {
        title: "Finding LLMs for zero-shot classification on Hugging Face",
        time_stamp: "4534000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_4534000.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLAnF3AI_Z6lwpD7SrhAV03R3D-nng",
      },
      {
        title: "Classifying book descriptions",
        time_stamp: "4941000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_4950900.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLCuK4jcSsP9G8Bc2dCJcufcmOXY6w",
      },
      {
        title: "Checking classifier accuracy",
        time_stamp: "5184000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_5184866.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLD5lr1Nr8fYEzYD1j9UFkHmK19huA",
      },
      {
        title: "Introduction to using LLMs for sentiment analysis",
        time_stamp: "5719000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_5737966.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLBDXZTAZWHj2__qzhzjRw1zZv8_GA",
      },
      {
        title: "Finding fine-tuned LLMs for sentiment analysis",
        time_stamp: "5965000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_5965300.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLAZOL8ZgfLeOorex0IGxHq4hvXdNg",
      },
      {
        title: "Extracting emotions from book descriptions",
        time_stamp: "6127000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_6127366.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLBFViSsK5TXsCArlebthcKHf5R7OA",
      },
      {
        title: "Introduction to Gradio",
        time_stamp: "6865000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_6885066.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLBWU6sm9uKb7t9eKHR9fcrAtA5Dmg",
      },
      {
        title: "Building a Gradio dashboard to recommend books",
        time_stamp: "7011000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_7040300.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLD-IQVENA1HDfDgQ_22J4u7aTeDCg",
      },
      {
        title: "Outro",
        time_stamp: "7969000",
        image:
          "https://i.ytimg.com/vi/Q7mS1VHm3Yw/hqdefault_7988666.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLDAEIGU6hE1ftZUGqig6uzHc4Wo_g",
      },
    ],
    transcription_language: null,
    timestamp: "2025-07-14T08:08:07.647Z",
    input: {
      url: "https://www.youtube.com/watch?v=Q7mS1VHm3Yw",
      country: "",
      transcription_language: "",
    },
  },
];
